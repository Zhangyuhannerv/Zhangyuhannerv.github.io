<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>学习路线</title>
      <link href="/posts/4225.html"/>
      <url>/posts/4225.html</url>
      
        <content type="html"><![CDATA[<p>jlpt <del>n5</del>-&gt;n4-&gt;n3-&gt;n2</p><p>java：<del>stream</del>,<del>lambda</del>，<del>IO 流</del>，注解，反射，<del>枚举</del>，网络编程，<del>websocket</del>,nio</p><p><del>mysql</del>,<del>redis</del></p><p>jvm,juc</p><p><del>spring</del>-&gt;springmvc-&gt;<del>springboot</del>-&gt;<del>springcloud</del></p><p><del>zookeeper</del>,<del>nginx</del>,<del>linux</del></p><p><del>kafka</del>,<del>rabbitmq</del></p><p>Elasticsearch</p><p>maven,docker,k8s</p><p>设计模式，<del>计算机网络</del>，<del>数据结构与算法</del>，计算机组成原理，操作系统，编译原理</p><p>项目:谷粒学院，<del>尚融宝</del></p><p>grid 布局</p><hr><p><del>shiro</del>,<del>zookeeper</del>,<del>kafka</del><br>计算机网络，操作系统，计算机组成原理<br>maven,docker<br>jvm,juc,设计模式<br>算法，刷题，面经</p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> essays </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> essays </tag>
            
            <tag> 学习路线 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>待学习</title>
      <link href="/posts/7682.html"/>
      <url>/posts/7682.html</url>
      
        <content type="html"><![CDATA[<ol><li>计算机网络：ipv6 部分</li><li>echarts 网课：前边布局，后面地图</li><li>ztree 的使用</li><li>jstree 的 demo</li><li><del>java 底层：2 进制，10 进制，移位，源码，补码，反码</del></li><li>前端关于滚动条的各个属性:clientHeight offsetHeight scrollHeight offsetTop scrollTop</li><li>redis 实战</li><li>js 高级</li><li>mysql 游标的使用</li><li><del>idea 工具的系统使用</del></li></ol>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> essays </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> essays </tag>
            
            <tag> 待学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>远程请求http的三种方式</title>
      <link href="/posts/17762.html"/>
      <url>/posts/17762.html</url>
      
        <content type="html"><![CDATA[<p>1.ajax 远程调用，远程服务器必须开放跨域访问权限</p><p>2.form 表单远程调用，不受跨域限制，缺点是需要组装表单</p><p>3.java 代码远程调用（常用的有 java.net.HttpURLConnection，springboot 的 restTemplate)</p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> essays </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> essays </tag>
            
            <tag> 远程请求http的三种方式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在maven库上添加手动添加第三方jar包</title>
      <link href="/posts/61509.html"/>
      <url>/posts/61509.html</url>
      
        <content type="html"><![CDATA[<p>进入到放这个 jar 包的文件夹，运行 cmd</p><p>然后根据下面的例子手动自己可以尝试着添加</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mvn install:install-file -Dfile=aspose-words-16.4.0-jdk16.jar -DgroupId=com.aspose.word  -DartifactId=aspose.words -Dversion=16.4.0-jdk16 -Dpackaging=jar -DgeneratePom=<span class="literal">true</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aspose.word<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspose.words<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>16.4.0-jdk16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> maven </tag>
            
            <tag> 在maven库上添加手动添加第三方jar包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将普通项目托付给maven管理</title>
      <link href="/posts/21615.html"/>
      <url>/posts/21615.html</url>
      
        <content type="html"><![CDATA[<p>如需将一个 java 项目托付给 maven 管理。在项目的根目录下，建个 pom.xml 把以下内容复制进去。同时<strong>右键把该项目标记为 maven 项目</strong>(不同的 idea 版本该操作的名称可能不一样)</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--组id--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zh<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--唯一标识id--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>parseStsSwing<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--版本号--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--这里面添加各种依赖,比如例子就是poi--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--这里面添加各种插件,例子是打所有的依赖与文件到一个jar包的插件--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">descriptorRefs</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">descriptorRef</span>&gt;</span>jar-with-dependencies<span class="tag">&lt;/<span class="name">descriptorRef</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">descriptorRefs</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> maven </tag>
            
            <tag> 将普通项目托付给maven管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目打成jar包时，将项目下的文件，以及所有的依赖打成一个jar包</title>
      <link href="/posts/22750.html"/>
      <url>/posts/22750.html</url>
      
        <content type="html"><![CDATA[<p>例子：在做一个单机的用 maven 管理的 swing 项目时，引入了 poi，但是打成的 jar 包里没有 poi 的依赖，导致用 exe4j 转换出的 exe 程序报错（Caused by: java.lang.NoClassDefFoundError）</p><p>这种错误就是没有将依赖打包进去导致的，所以最好打包成单个 jar 包。</p><p>解决办法：在 maven 里加入以下插件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">descriptorRefs</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">descriptorRef</span>&gt;</span>jar-with-dependencies<span class="tag">&lt;/<span class="name">descriptorRef</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">descriptorRefs</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在项目的根目录下执行(在执行以下任意操作前别忘了 clean。清除以前的 target 文件夹)<br><code>mvn assembly:assembly</code><br>或<br><code>install -Dmaven.test.skip=true</code><br>或<br>添加了新的插件后，右侧 maven 的 plugins 列表会多出个命令选项:<strong>assembly</strong>。鼠标左键双击该命令选项下的第一个命令<strong>assembly:assembly</strong>。<br>实际上和上面的是一样的。但是推荐这种方式（简单，方便，图形化操作，还能应用上 maven 在 idea 里面设置的 setting.xml 配置)<br><img src="https://raw.githubusercontent.com/zhangyuhannerv/picture-host-1/main/202111051728272.png" alt="github连接失败。图片无法展示"><br>执行成功后会在 target 文件夹下除了普通的 jar 外还多出一个以-jar-with-dependencies 结尾的 JAR 包. 这个 JAR 包就包含了项目所依赖的所有 JAR 的 CLASS.</p><p>用这个包含所有 CLASS 的单独的 jar 包通过 exe4j 转出的 exe 文件就能成功执行</p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> maven </tag>
            
            <tag> 项目打成jar包时，将项目下的文件，以及所有的依赖打成一个jar包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目的jar包都正常引用了，但是build时就是提示jar包不存在的解决办法</title>
      <link href="/posts/52198.html"/>
      <url>/posts/52198.html</url>
      
        <content type="html"><![CDATA[<p>如题，编译和打包都是正常的，pom 文件中依赖存在并且没有报错。找到相应包的引用位置，也能正常访问包中的内容。而且提示的一般都是基础的 jar 包找不到，比如单元测试用到的 jar 包等。。。</p><p>情形一：</p><p>其他同事提交代码时把 idea 中的 .iml 文件也一起提交了，该文件中配置的 jdk lib 路径与自己电脑中的该路径不一致。</p><p>解决方法很简单，执行一下 maven update 即可，也可以手动修改 .iml 文件中的该路径。<br><img src="https://raw.githubusercontent.com/zhangyuhannerv/picture-host-1/main/20210713083737.png"></p><p>情形二：</p><p>排除情形一出现的原因，或使用情形一中的方法解决无效时，可以使用以下命令更新不完整依赖：</p><p><code>mvn -U idea:idea</code></p><p>需要注意的是，该命令使用的插件早在 13 年就已经停止维护，所以有可能出现各种问题，比如我遇到过的空指针异常。</p><p>情形三：</p><p>使用情形二中的方法解决无效时，可以使用以下方法再次尝试</p><ol><li><p>ctrl + alt + shift + s 或 在界面菜单选择 File –&gt; Project Structure</p></li><li><p>点击 Libraries 找到提示不存在的 jar 包（这里以 junit 为例），选中，然后右键打开菜单，选择 Convert to Repository Library…</p></li><li><p>执行 maven update</p><p><img src="https://raw.githubusercontent.com/zhangyuhannerv/picture-host-1/main/20210713084001.png" alt="如图"></p><p>一般到此都能解决问题，如果还是解决不了，可能真的是人品问题，那就只能呵呵了。。</p><p><a href="https://www.jb51.net/article/189894.htm">原文连接</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> maven </tag>
            
            <tag> 项目的jar包都正常引用了，但是build时就是提示jar包不存在的解决办法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DATE_FORMAT()和STR_TO_DATE()</title>
      <link href="/posts/24292.html"/>
      <url>/posts/24292.html</url>
      
        <content type="html"><![CDATA[<p>常用的 DATE_FORMAA()格式</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">DATE_FORMAT(updatetime,<span class="string">&#x27;%Y-%m-%d&#x27;</span>) <span class="comment">-- 把mysql的datetime格式化成2021-09-23的字符串格式</span></span><br><span class="line">DATE_FORMAT(updatetime,<span class="string">&#x27;%Y-%m-%d %H:%i:%S&#x27;</span>) <span class="comment">-- 把mysql的datetime格式化成2021-09-07 09:30:37的字符串格式</span></span><br></pre></td></tr></table></figure><p>常用的 STR_TO_DATE()格式</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">STR_TO_DATE(<span class="string">&#x27;2015-09-01 00:00:00&#x27;</span>,<span class="string">&#x27;%Y-%m-%d %H:%i:%s&#x27;</span>) <span class="comment">-- 把字符串转为datetimeg</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> mysql </tag>
            
            <tag> DATE_FORMAT()和STR_TO_DATE() </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>any 和 all 关键字</title>
      <link href="/posts/52297.html"/>
      <url>/posts/52297.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">A <span class="operator">=</span> <span class="keyword">any</span>(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>) 等价于 A <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span> <span class="keyword">or</span> A <span class="operator">=</span> <span class="string">&#x27;b&#x27;</span></span><br><span class="line"></span><br><span class="line">A <span class="operator">=</span> <span class="keyword">all</span>(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>) 等价于 A <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span> <span class="keyword">and</span> A <span class="operator">=</span> <span class="string">&#x27;b&#x27;</span></span><br></pre></td></tr></table></figure><p>总结 ：any 相当于用 or 链接后面括号里的子元素，all 相当于用 and 链接后面括号里面的子元素</p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> mysql </tag>
            
            <tag> any 和 all 关键字 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql在导入.sql文件的时候报错  1067 - Invalid default value for LOCK_TIME</title>
      <link href="/posts/60814.html"/>
      <url>/posts/60814.html</url>
      
        <content type="html"><![CDATA[<p>推荐使用以下的方式永久修改</p><p>编辑 mysql 的配配置文件 my.cnf</p><p>在[mysqld]下面添加如下列：</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">sql_mode</span>=<span class="string">ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> mysql </tag>
            
            <tag> TIME_‘ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql dump导入sql脚本后表中的数据中文乱码</title>
      <link href="/posts/18721.html"/>
      <url>/posts/18721.html</url>
      
        <content type="html"><![CDATA[<p>解决办法：<br>加上–default-character-set&#x3D;utf8 参数即可</p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> mysql </tag>
            
            <tag> mysql dump导入sql脚本后表中的数据中文乱码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql常见的函数和问题的汇总</title>
      <link href="/posts/36898.html"/>
      <url>/posts/36898.html</url>
      
        <content type="html"><![CDATA[<ul><li><p>注意 mysql 里面关于字符串的截取下标一般都是从 1 开始</p></li><li><p>Substring(‘str’,a,b) 注意：a 是起始位置，b 是要截取得长度。且下标从 1 开始 ，如果 a 是 0，那么无论 b 是多少都返回一个空串</p></li><li><p>Round(num,a) num 如果为字符串，那么返回的也是数字。如果 num 为’a’或者’b’这种非数字类型的字符串，那么会把这种字符串当成数字 0 ，并且 a 是 0，那么就是 0 ，a 是 1，就是 0.0 。</p><p>注意：如果 num 是整数(round(2234,2))，那么无论 a 是多少，返回的都是整数(2234)，如果 num 是整数型的字符串(round(‘2234’,3))，那么返回的就是带 0 的小数(2234.000)。</p><p>注意：abs(25.0)&#x3D;&gt;25.0 abs(‘25.0’) &#x3D;&gt;25</p></li><li><p>INSTR（str,substr） &#x2F; instr(源字符串, 目标字符串) 获取子串第一次出现的索引，如果没有找到，则返回 0（下标从 1 开始）</p></li><li><p>使用 union all 链接两个查询结果的时候，如果链接查询结果要有各自的顺序并且总结果要保留这种顺序，那么每个链接的子查询都必须两边加上（）并且在最后加上 limit a,b，为了保证都各个子查询查询出全部的结果，ab 的取值可以为 0,10000000000000</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 例子：上行升序，下行降序</span></span><br><span class="line"><span class="keyword">select</span> t.<span class="operator">*</span>,t.lc_str <span class="keyword">as</span> lcStr <span class="keyword">from</span> (</span><br><span class="line">(<span class="keyword">SELECT</span></span><br><span class="line">id,</span><br><span class="line">xb,</span><br><span class="line">lc,</span><br><span class="line">cxlx,</span><br><span class="line">remove_end_zero(round(fz,<span class="number">2</span>)) <span class="keyword">as</span> fz,</span><br><span class="line">remark,</span><br><span class="line">formatMile(lc,<span class="string">&#x27;m&#x27;</span>,<span class="number">0</span>) <span class="keyword">as</span> lc_str</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">cxdata_table</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">dcjh_id <span class="operator">=</span> #&#123;dcjhId&#125;</span><br><span class="line"><span class="keyword">and</span> xb <span class="operator">=</span> <span class="string">&#x27;上行&#x27;</span></span><br><span class="line"><span class="keyword">AND</span> lc <span class="operator">+</span> <span class="number">0</span> <span class="operator">&gt;=</span> #&#123;startMileage&#125; <span class="operator">+</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">AND</span> lc <span class="operator">+</span> <span class="number">0</span> <span class="operator">&lt;</span> #&#123;endMileage&#125; <span class="operator">+</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">AND</span> flag <span class="operator">=</span> <span class="string">&#x27;0&#x27;</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> lc <span class="operator">+</span> <span class="number">0</span> <span class="keyword">asc</span></span><br><span class="line">LIMIT <span class="number">0</span>,<span class="number">10000000000000</span>)</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">(<span class="keyword">SELECT</span></span><br><span class="line">id,</span><br><span class="line">xb,</span><br><span class="line">lc,</span><br><span class="line">cxlx,</span><br><span class="line">remove_end_zero(round(fz,<span class="number">2</span>)) <span class="keyword">as</span> fz,</span><br><span class="line">remark,</span><br><span class="line">formatMile(lc,<span class="string">&#x27;m&#x27;</span>,<span class="number">0</span>) <span class="keyword">as</span> lc_str</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">cxdata_table</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">dcjh_id <span class="operator">=</span> #&#123;dcjhId&#125;</span><br><span class="line">  <span class="keyword">and</span> xb <span class="operator">=</span> <span class="string">&#x27;下行&#x27;</span></span><br><span class="line">  <span class="keyword">AND</span> lc <span class="operator">+</span> <span class="number">0</span> <span class="operator">&gt;=</span> #&#123;startMileage&#125; <span class="operator">+</span> <span class="number">0</span></span><br><span class="line">  <span class="keyword">AND</span> lc <span class="operator">+</span> <span class="number">0</span> <span class="operator">&lt;</span> #&#123;endMileage&#125; <span class="operator">+</span> <span class="number">0</span></span><br><span class="line">  <span class="keyword">AND</span> flag <span class="operator">=</span> <span class="string">&#x27;0&#x27;</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> lc <span class="operator">+</span> <span class="number">0</span> <span class="keyword">desc</span></span><br><span class="line">LIMIT <span class="number">0</span>,<span class="number">10000000000000</span>)</span><br><span class="line">) t</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> mysql </tag>
            
            <tag> mysql常见的函数和问题的汇总 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql建立新用户和授权</title>
      <link href="/posts/42280.html"/>
      <url>/posts/42280.html</url>
      
        <content type="html"><![CDATA[<h1 id="需求：只允许某个用户访问某个库"><a href="#需求：只允许某个用户访问某个库" class="headerlink" title="需求：只允许某个用户访问某个库"></a>需求：只允许某个用户访问某个库</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 建立用户<span class="keyword">user</span>能在任何ip登录，并且密码是passwd</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;user&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;passwd&#x27;</span>;</span><br><span class="line"></span><br><span class="line"># 授权：授予<span class="keyword">user</span>用户能用密码passwd从任何ip登录并且有访问ctoms_test数据库任何资源的所有权限</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> privileges <span class="keyword">on</span> ctoms_test.<span class="operator">*</span> <span class="keyword">to</span> <span class="keyword">user</span>@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;passwd&#x27;</span>;  </span><br><span class="line"></span><br><span class="line"># 刷新权限</span><br><span class="line">flush privileges;</span><br><span class="line"></span><br><span class="line"># 查看自己刚刚建立的用户</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> CONCAT(<span class="string">&#x27;User: &#x27;&#x27;&#x27;</span>,<span class="keyword">user</span>,<span class="string">&#x27;&#x27;&#x27;@&#x27;&#x27;&#x27;</span>,host,<span class="string">&#x27;&#x27;&#x27;;&#x27;</span>) <span class="keyword">AS</span> query <span class="keyword">FROM</span> mysql.user;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> mysql </tag>
            
            <tag> mysql建立新用户和授权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql建表的几个必备字段</title>
      <link href="/posts/62575.html"/>
      <url>/posts/62575.html</url>
      
        <content type="html"><![CDATA[<ul><li>id(主键)</li><li>码表（在基础字典表中该字段是必须的)</li><li>排序（在基础字典表中该字段是必须的)</li><li>创建人</li><li>创建时间</li><li>修改时间</li><li>逻辑删除字段</li></ul>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> mysql </tag>
            
            <tag> mysql建表的几个必备字段 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>show profile功能</title>
      <link href="/posts/51045.html"/>
      <url>/posts/51045.html</url>
      
        <content type="html"><![CDATA[<ul><li><p>开启 Show Profile 功能，默认该功能是关闭的，使用前需开启。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;profiling&#x27;</span>;</span><br><span class="line">  <span class="keyword">set</span> profiling <span class="operator">=</span> <span class="keyword">on</span>;</span><br><span class="line">  ## 执行一部分<span class="keyword">sql</span>后(默认保留<span class="number">15</span>条)</span><br><span class="line">  <span class="keyword">show</span> profiles;</span><br><span class="line">  ## duration是持续时间</span><br><span class="line">  ## 针对特定的<span class="keyword">sql</span>进行诊断</span><br><span class="line">  <span class="keyword">show</span> profile cpu,block io <span class="keyword">for</span> query Query_ID;<span class="comment">/*Query_ID为#3步骤中show profiles列表中的Query_ID*/</span></span><br></pre></td></tr></table></figure></li><li><p>show profile 的常用查询参数。</p><p>①ALL：显示所有的开销信息。</p><p>②BLOCK IO：显示块 IO 开销。</p><p>③CONTEXT SWITCHES：上下文切换开销。</p><p>④CPU：显示 CPU 开销信息。</p><p>⑤IPC：显示发送和接收开销信息。</p><p>⑥MEMORY：显示内存开销信息。</p><p>⑦PAGE FAULTS：显示页面错误开销信息。</p><p>⑧SOURCE：显示和 Source_function，Source_file，Source_line 相关的开销信息。</p><p>⑨SWAPS：显示交换次数开销信息。</p></li><li><p>日常开发需注意的结论。（出现下述结论都需要优化)</p><p>①converting HEAP to MyISAM：查询结果太大，内存不够，数据往磁盘上搬了。</p><p>②Creating tmp table：创建临时表。先拷贝数据到临时表，用完后再删除临时表。</p><p>③Copying to tmp table on disk：把内存中临时表复制到磁盘上，危险！！！</p><p>④locked。</p></li><li><p>总结</p><p>1.show profile 默认是关闭的，并且开启后只存活于当前会话，也就说每次使用前都需要开启。</p><p>2.通过 show profiles 查看 sql 语句的耗时时间，然后通过 show profile 命令对耗时时间长的 sql 语句进行诊断。</p><p>3.注意 show profile 诊断结果中出现相关字段的含义，判断是否需要优化 sql 语句。</p><p>4.可更多的关注 MySQL 官方文档，获取更多的知识。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> mysql </tag>
            
            <tag> show profile功能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>union和union all 关键字</title>
      <link href="/posts/32462.html"/>
      <url>/posts/32462.html</url>
      
        <content type="html"><![CDATA[<ul><li><p>区别 1：取结果的交集</p><ul><li>union: 对两个结果集进行并集操作, 不包括重复行,相当于 distinct, 同时进行默认规则的排序;</li><li>union all: 对两个结果集进行并集操作, 包括重复行, 即所有的结果全部显示, 不管是不是重复;</li></ul></li><li><p>区别 2：获取结果后的操作</p><ul><li>union: 会对获取的结果进行排序操作</li><li>union all: 不会对获取的结果进行排序操作</li></ul></li><li><p>区别 3：</p><ul><li><p>union 看到结果中 ID&#x3D;3 的只有一条</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student2 <span class="keyword">where</span> id <span class="operator">&lt;</span> <span class="number">4</span></span><br><span class="line"><span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student2 <span class="keyword">where</span> id <span class="operator">&gt;</span> <span class="number">2</span> <span class="keyword">and</span> id <span class="operator">&lt;</span> <span class="number">6</span></span><br></pre></td></tr></table></figure></li><li><p>union all 结果中 ID&#x3D;3 的结果有两个</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student2 <span class="keyword">where</span> id <span class="operator">&lt;</span> <span class="number">4</span></span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student2 <span class="keyword">where</span> id <span class="operator">&gt;</span> <span class="number">2</span> <span class="keyword">and</span> id <span class="operator">&lt;</span> <span class="number">6</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>总结</p><p>union all 只是合并查询结果，并不会进行去重和排序操作，在没有去重的前提下，使用 union all 的执行效率要比 union 高</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> mysql </tag>
            
            <tag> union和union all 关键字 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>主从复制的搭建</title>
      <link href="/posts/46953.html"/>
      <url>/posts/46953.html</url>
      
        <content type="html"><![CDATA[<h4 id=""><a href="#" class="headerlink" title=""></a></h4><ol start="0"><li><p>做主从的前提</p><ul><li>两台服务器的防火墙都开放了各自 mysql 的服务端口（下面以默认的 3306 为例子）</li><li>从库无法同步主库之前的数据。如果主库之前有数据，那么先把主库的数据导入到从库中。保证两台服务器在做主从复制之前的数据一致性</li><li>尽量保证两台服务器的 my.cnf 文件只有 server-id 不同。其他的配置都相同</li></ul></li><li><p>修改主服务器的配置</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/my.cnf</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启用主从配置(主服务器)</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">主服务器<span class="built_in">id</span></span></span><br><span class="line">server-id=1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">二进制日志</span></span><br><span class="line">log-bin=mysqlbin</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置忽略复制的数据库</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">binlog-ignore-db=mysql</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置需要复制的数据库</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">binlog-do-db=dtjc</span></span><br></pre></td></tr></table></figure></li><li><p>重启 mysql 服务器</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service mysqld restart</span><br></pre></td></tr></table></figure><p>mysqld 无效的话把 mysqld 换成 mysql</p></li><li><p>运行</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> master status;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+----------+--------------+------------------+------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> File            <span class="operator">|</span> Position <span class="operator">|</span> Binlog_Do_DB <span class="operator">|</span> Binlog_Ignore_DB <span class="operator">|</span> Executed_Gtid_Set                        <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+----------+--------------+------------------+------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> mysqlbin<span class="number">.000003</span> <span class="operator">|</span>      <span class="number">883</span> <span class="operator">|</span>              <span class="operator">|</span>                  <span class="operator">|</span> e730104b<span class="number">-113</span>f<span class="number">-11</span>eb<span class="number">-9739</span><span class="number">-000</span>c2972b171:<span class="number">1</span><span class="number">-7</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+----------+--------------+------------------+------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p>后续需要使用<strong>file</strong>和<strong>position</strong>这两个字段</p></li><li><p>为从服务器生成专门的账号用来做主从复制,同时赋予做从服务器的权限</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;repl&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;123456Aa?&#x27;</span>;</span><br><span class="line"><span class="keyword">grant</span> replication slave,replication client <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;repl&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure></li><li><p>修改从服务器的配置</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/my.cnf</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启用主从配置(主服务器)</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">从服务器<span class="built_in">id</span></span></span><br><span class="line">server-id=2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">二进制日志</span></span><br><span class="line">log-bin=mysqlbin</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置忽略复制的数据库</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">binlog-ignore-db=mysql</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置需要复制的数据库</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">binlog-do-db=dtjc</span></span><br></pre></td></tr></table></figure></li><li><p>重启 mysql 服务</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">service mysqld restart</span><br></pre></td></tr></table></figure><p>mysqld 无效的话把 mysqld 换成 mysql</p></li><li><p>slave 节点测试 repl 用户远程连接 mater 节点</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql <span class="operator">-</span>h192<span class="number">.168</span><span class="number">.220</span><span class="number">.10</span> <span class="operator">-</span>P3306 <span class="operator">-</span>urepl <span class="operator">-</span>p123456Aa?</span><br></pre></td></tr></table></figure><p>链接成功，即可进行下一步，否则要排错</p></li><li><p>退出 master 节点的登陆，登陆本机的 mysql,运行以下命令</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">change master <span class="keyword">to</span> master_host<span class="operator">=</span><span class="string">&#x27;192.168.220.10&#x27;</span>,master_port<span class="operator">=</span><span class="number">3306</span>,master_user<span class="operator">=</span><span class="string">&#x27;repl&#x27;</span>,master_password<span class="operator">=</span><span class="string">&#x27;12345Aa?&#x27;</span>,master_log_file<span class="operator">=</span><span class="string">&#x27;mysqlbin.000003&#x27;</span>,master_log_pos<span class="operator">=</span><span class="number">883</span>;</span><br></pre></td></tr></table></figure><p><strong>master_log_file 就是主服务器的 file 字段，883 就是主服务器的 position 字段</strong></p></li><li><p>如果第 8 步的 mysql 没有报错的话，查看 slave 状态</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> slave status\G</span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">1.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">               Slave_IO_State: Waiting <span class="keyword">for</span> source <span class="keyword">to</span> send event</span><br><span class="line">                  Master_Host: <span class="number">192.168</span><span class="number">.220</span><span class="number">.10</span></span><br><span class="line">                  Master_User: repl</span><br><span class="line">                  Master_Port: <span class="number">3306</span></span><br><span class="line">                Connect_Retry: <span class="number">60</span></span><br><span class="line">              Master_Log_File: mysqlbin<span class="number">.000003</span></span><br><span class="line">          Read_Master_Log_Pos: <span class="number">196</span></span><br><span class="line">               Relay_Log_File: localhost<span class="operator">-</span>relay<span class="operator">-</span>bin<span class="number">.000002</span></span><br><span class="line">                Relay_Log_Pos: <span class="number">323</span></span><br><span class="line">        Relay_Master_Log_File: mysqlbin<span class="number">.000003</span></span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br><span class="line">              Replicate_Do_DB:</span><br><span class="line">          Replicate_Ignore_DB:</span><br><span class="line">           Replicate_Do_Table:</span><br><span class="line">       Replicate_Ignore_Table:</span><br><span class="line">      Replicate_Wild_Do_Table:</span><br><span class="line">  Replicate_Wild_Ignore_Table:</span><br><span class="line">                   Last_Errno: <span class="number">0</span></span><br><span class="line">                   Last_Error:</span><br><span class="line">                 Skip_Counter: <span class="number">0</span></span><br><span class="line">          Exec_Master_Log_Pos: <span class="number">196</span></span><br><span class="line">              Relay_Log_Space: <span class="number">536</span></span><br><span class="line">              Until_Condition: <span class="keyword">None</span></span><br><span class="line">               Until_Log_File:</span><br><span class="line">                Until_Log_Pos: <span class="number">0</span></span><br><span class="line">           Master_SSL_Allowed: <span class="keyword">No</span></span><br><span class="line">           Master_SSL_CA_File:</span><br><span class="line">           Master_SSL_CA_Path:</span><br><span class="line">              Master_SSL_Cert:</span><br><span class="line">            Master_SSL_Cipher:</span><br><span class="line">               Master_SSL_Key:</span><br><span class="line">        Seconds_Behind_Master: <span class="number">0</span></span><br><span class="line">Master_SSL_Verify_Server_Cert: <span class="keyword">No</span></span><br><span class="line">                Last_IO_Errno: <span class="number">0</span></span><br><span class="line">                Last_IO_Error:</span><br><span class="line">               Last_SQL_Errno: <span class="number">0</span></span><br><span class="line">               Last_SQL_Error:</span><br><span class="line">  Replicate_Ignore_Server_Ids:</span><br><span class="line">             Master_Server_Id: <span class="number">1</span></span><br><span class="line">                  Master_UUID: e730104b<span class="number">-113</span>f<span class="number">-11</span>eb<span class="number">-9739</span><span class="number">-000</span>c2972b171</span><br><span class="line">             Master_Info_File: mysql.slave_master_info</span><br><span class="line">                    SQL_Delay: <span class="number">0</span></span><br><span class="line">          SQL_Remaining_Delay: <span class="keyword">NULL</span></span><br><span class="line">      Slave_SQL_Running_State: Replica has read <span class="keyword">all</span> relay log; waiting <span class="keyword">for</span> more updates</span><br><span class="line">           Master_Retry_Count: <span class="number">86400</span></span><br><span class="line">                  Master_Bind:</span><br><span class="line">      Last_IO_Error_Timestamp:</span><br><span class="line">     Last_SQL_Error_Timestamp:</span><br><span class="line">               Master_SSL_Crl:</span><br><span class="line">           Master_SSL_Crlpath:</span><br><span class="line">           Retrieved_Gtid_Set:</span><br><span class="line">            Executed_Gtid_Set: e730104b<span class="number">-113</span>f<span class="number">-11</span>eb<span class="number">-9739</span><span class="number">-000</span>c2972b171:<span class="number">1</span><span class="number">-3</span></span><br><span class="line">                Auto_Position: <span class="number">0</span></span><br><span class="line">         Replicate_Rewrite_DB:</span><br><span class="line">                 Channel_Name:</span><br><span class="line">           Master_TLS_Version:</span><br><span class="line">       Master_public_key_path:</span><br><span class="line">        Get_master_public_key: <span class="number">0</span></span><br><span class="line">            Network_Namespace:</span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>如果</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"> Slave_IO_Running: Yes</span><br><span class="line">Slave_SQL_Running: Yes</span><br></pre></td></tr></table></figure><p>那么主从配置就搭建好了</p><p>如果 Slave_IO_Running 或者 Slave_SQL_Running 有任意一个不是 Yes 的话，搭建失败</p><p>运行以下命令,停止主从。然后从最开始一步步排错</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">stop slave;</span><br><span class="line">reset slave <span class="keyword">all</span>;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> mysql </tag>
            
            <tag> 主从复制的搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>区间查询</title>
      <link href="/posts/59900.html"/>
      <url>/posts/59900.html</url>
      
        <content type="html"><![CDATA[<h2 id="取交集的区间查询"><a href="#取交集的区间查询" class="headerlink" title="取交集的区间查询"></a>取交集的区间查询</h2><p>两个区间段只要有交集就查出来</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&#x27;(startTime != &quot;&quot; and startTime != null) and (endTime == null or endTime == &quot;&quot;)&#x27;</span>&gt;</span></span><br><span class="line">    AND csrw.endtime &gt;= #&#123;startTime&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&#x27;(startTime == &quot;&quot; or startTime == null) and (endTime != null and endTime != &quot;&quot;)&#x27;</span>&gt;</span></span><br><span class="line">    AND csrw.createtime &lt;= #&#123;endTime&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&#x27;(startTime != &quot;&quot; and startTime != null) and (endTime != null and endTime != &quot;&quot;)&#x27;</span>&gt;</span></span><br><span class="line">    AND !(csrw.endtime &lt; #&#123;startTime&#125; OR csrw.endtime &gt; #&#123;startTime&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> mysql </tag>
            
            <tag> 区间查询 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>time和update_time的策略</title>
      <link href="/posts/17208.html"/>
      <url>/posts/17208.html</url>
      
        <content type="html"><![CDATA[<p>二者默认值都设置为 CURRENT_TIMESTAMP(DEFAULT CURRENT_TIMESTAMP)，保证插入时记录时间</p><p>update_time 勾选上根据当前时间戳更新(ON UPDATE CURRENT_TIMESTAMP)，保证更新时记录时间</p><p>参考 sql</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `mytest` (</span><br><span class="line">    `text` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;内容&#x27;</span>,</span><br><span class="line">    `create_time` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    `update_time` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span></span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><p>注意：采用数据库层面的策略不支持切换数据库，如果想要开发的应用兼容各种类型的数据库，那么就不能设置数据库层面的策略。而是应该使用应用层的各种 orm 框架自动填充策略</p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> mysql </tag>
            
            <tag> time和update_time的策略 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装</title>
      <link href="/posts/55020.html"/>
      <url>/posts/55020.html</url>
      
        <content type="html"><![CDATA[<h2 id="mysql8"><a href="#mysql8" class="headerlink" title="mysql8"></a>mysql8</h2><ol><li><p>查看是否有安装过 mysql</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -qa | grep -i mysql</span><br></pre></td></tr></table></figure></li><li><p>删除 mysql</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y remove MySQL-*</span><br><span class="line">yum -y remove MySQL</span><br></pre></td></tr></table></figure><p>一般用 rpm -e 的命令删除 mysql,这样表面上删除了 mysql,可是 mysql 的一些残余程序仍然存在,并且通过第一步的方式也查找不到残余,而 yum 命令比较强大,可以完全删除 mysql.(ps:用 rpm 删除后再次安装的时候会提示已经安装了,这就是 rpm 没删除干净的原因)</p></li><li><p>把所有出现的目录统统删除</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find / -name mysql</span><br></pre></td></tr></table></figure><p>查找 mysql 的一些目录，把所有出现的目录删除，可以使用 rm -rf 路径，删除时请注意，一旦删除无法恢复。</p></li><li><p>删除配置文件</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm -rf /etc/my.cnf</span><br></pre></td></tr></table></figure></li><li><p>删除 mysql 的默认密码</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm -rf /root/.mysql_sercret</span><br></pre></td></tr></table></figure><p>删除 mysql 的默认密码,如果不删除,以后安装 mysql 这个 sercret 中的默认密码不会变,使用其中的默认密码就可能会报类似 Access denied for user ‘root@localhost’ (using password:yes)的错误.</p></li></ol><hr><p>五步完成之后，这样 mysql 就全部删除干净了，若没安装过 mysql 可忽略以上步骤</p><ol><li><p>配置 Mysql 8.0 安装源</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo rpm -Uvh https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm</span><br></pre></td></tr></table></figure></li><li><p>安装 Mysql 8.0</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum --enablerepo=mysql80-community install mysql-community-server</span><br></pre></td></tr></table></figure><p>提示下载插件选择：y</p><p>看到 complet(完毕)就是安装完啦</p></li><li><p>启动 mysql 服务</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo service mysqld start</span><br></pre></td></tr></table></figure><p>显示如下：</p><p>启动完成</p></li><li><p>查看 mysql 服务运行状态</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service mysqld status</span><br></pre></td></tr></table></figure></li><li><p>查看 root 临时密码</p><p>安装完 mysql 之后，使用下列命令生成一个临时的密码让 root 用户登录</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grep &quot;A temporary password&quot; /var/log/mysqld.log</span><br></pre></td></tr></table></figure></li><li><p>更改临时密码</p><p>输入：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure><p>在 Enter password：后面输入临时密码<br>登录成功<br>输入：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;123456Aa?&#x27;</span>;</span><br></pre></td></tr></table></figure><p>会提示：ERROR 1819 (HY000): Your password does not satisfy the current policy requirements(密码不符合当前策略)</p><ul><li>方案 1: 设置符合策略的密码(大小写字母+数据+符号，8 位)</li><li>方案 2:密码策略改简单一点</li></ul><p>方案 2 设置方式</p><p>先看看当前的密码验证策略<br>输入：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;validate_password.%&#x27;</span>;</span><br></pre></td></tr></table></figure><p>策略说明</p><ul><li><p>validate_password.length 是密码的最小长度，默认是 8，我们把它改成 6<br>输入：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> validate_password.length<span class="operator">=</span><span class="number">6</span>;</span><br></pre></td></tr></table></figure></li><li><p>validate_password.policy 验证密码的复杂程度，我们把它改成 0<br>输入：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> validate_password.policy<span class="operator">=</span><span class="number">0</span>;</span><br></pre></td></tr></table></figure></li><li><p>validate_password.check_user_name 用户名检查，用户名和密码不能相同，我们也把它关掉</p><p>输入：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> validate_password.check_user_name<span class="operator">=</span>off;</span><br></pre></td></tr></table></figure></li><li><p>再执行修改密码的命令</p><p>输入：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> ‘root’@‘localhost’ IDENTIFIED <span class="keyword">BY</span> ‘<span class="number">12345</span>’;</span><br></pre></td></tr></table></figure><p>密码设成功<br>用 mysql 客户连接报不允许连接的错误，那是因为没开通远程访问的权限</p></li></ul></li><li><p>配置远程访问</p><p>输入：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p>报错：</p><p>mysql&gt; GRANT ALL ON . TO ‘root’@’%’;<br>ERROR 1410 (42000): You are not allowed to create a user with GRANT</p><p>看下默认 MySQL 用户：<br>输入：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use mysql;</span><br></pre></td></tr></table></figure><p>输入：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> host, <span class="keyword">user</span>, authentication_string, plugin <span class="keyword">from</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure><p>发现 root 的 host 是 localhost，不是%，可以加个 host 是%的 root 账号：<br>输入：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> ‘root’@’<span class="operator">%</span>’ IDENTIFIED <span class="keyword">BY</span> ‘<span class="number">123456</span>Aa?’;</span><br></pre></td></tr></table></figure><p>再查下用户</p><p>输入：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> host, <span class="keyword">user</span>, authentication_string, plugin <span class="keyword">from</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure><p>可以看到已经新增了 host 为%的 root 用户</p><p>输入：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p>配置成功</p></li></ol><hr><p><strong>如果客户端连接 mysql 报错，并且其他配置都正常的情况下</strong></p><p>原因可能是 mysql8 的加密方式规则不一样，是 caching_sha2_password</p><p>需要加密方式改成 mysql_native_password 就行了</p><p>语法:</p><p>ALTER USER ‘[用户名]’@’%’ IDENTIFIED WITH mysql_native_password BY ‘[密码]’;</p><p>输入：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> ‘root’@’<span class="operator">%</span>’ IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> ‘<span class="number">123456</span>Aa?’;</span><br></pre></td></tr></table></figure><p>加密方式以及改成了 mysql_native_password</p><hr>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> mysql </tag>
            
            <tag> 安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开放远程连接</title>
      <link href="/posts/32472.html"/>
      <url>/posts/32472.html</url>
      
        <content type="html"><![CDATA[<h2 id="5-7"><a href="#5-7" class="headerlink" title="5.7"></a>5.7</h2><p>先连接到本地数据库</p><p>切换到 mysql 数据库</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use mysql</span><br></pre></td></tr></table></figure><p>使用以下命令可以更改远程连接的设置</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;root&#x27;</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> OPTION;</span><br></pre></td></tr></table></figure><p>刷新权限</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p>查询 user 表看看是否生效，如果 ‘%’ ‘root’ 在第一行证明生效了</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> host,<span class="keyword">user</span> <span class="keyword">from</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/zhangyuhannerv/picture-host-1/main/20210720111410.png" alt="github无法连接"></p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> mysql </tag>
            
            <tag> 开放远程连接 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查询时别名</title>
      <link href="/posts/46997.html"/>
      <url>/posts/46997.html</url>
      
        <content type="html"><![CDATA[<p>在 mysql 中</p><ol><li><p>group by ,having ,order by 支持字段的别名。<br>group by ,order by 后使用别名</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="keyword">case</span></span><br><span class="line">        <span class="keyword">when</span> t.author_level <span class="keyword">in</span>(<span class="number">1</span>,<span class="number">2</span>) <span class="keyword">then</span> <span class="string">&#x27;1-2级&#x27;</span></span><br><span class="line">        <span class="keyword">when</span> t.author_level <span class="keyword">in</span>(<span class="number">3</span>,<span class="number">4</span>) <span class="keyword">then</span> <span class="string">&#x27;3-4级&#x27;</span></span><br><span class="line">        <span class="keyword">when</span> t.author_level <span class="keyword">in</span>(<span class="number">5</span>,<span class="number">6</span>) <span class="keyword">then</span> <span class="string">&#x27;5-6级&#x27;</span></span><br><span class="line">        <span class="keyword">else</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">as</span> level_cnt,</span><br><span class="line">    <span class="built_in">count</span>(s.issue_id) <span class="keyword">as</span> num</span><br><span class="line"><span class="keyword">from</span> author_tb t <span class="keyword">join</span> answer_tb s <span class="keyword">on</span> t.author_id <span class="operator">=</span> s.author_id</span><br><span class="line"><span class="keyword">where</span> s.char_len <span class="operator">&gt;=</span> <span class="number">100</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> level_cnt</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> num <span class="keyword">desc</span></span><br></pre></td></tr></table></figure></li><li><p>where 后面不支持字段的别名。</p></li><li><p>如果关联查询的时候给表起了别名。那么 where 后面如果用’表名.字段名’的话这个表名要用表的别名</p></li><li><p>case 关键字后面可以接表的别名</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line"><span class="keyword">case</span>  record.xingbie</span><br><span class="line">    <span class="keyword">when</span> <span class="number">1</span> <span class="keyword">then</span> <span class="string">&#x27;上行&#x27;</span></span><br><span class="line">    <span class="keyword">when</span> <span class="number">2</span> <span class="keyword">then</span> <span class="string">&#x27;下行&#x27;</span></span><br><span class="line">    <span class="keyword">when</span> <span class="number">3</span> <span class="keyword">then</span> <span class="string">&#x27;出段&#x27;</span></span><br><span class="line">    <span class="keyword">when</span> <span class="number">4</span> <span class="keyword">then</span> <span class="string">&#x27;入段&#x27;</span></span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">as</span> xingbieName</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    t_sjfx_mh_jcjl record</span><br><span class="line">    <span class="keyword">left</span> <span class="keyword">join</span> sys_dict_single lineDict <span class="keyword">on</span> lineDict.value <span class="operator">=</span> record.xianbie</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> mysql </tag>
            
            <tag> 查询时别名 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>比较date或者datetime</title>
      <link href="/posts/44371.html"/>
      <url>/posts/44371.html</url>
      
        <content type="html"><![CDATA[<p>单个的比较可以直接使用&gt; &lt; 或者&#x3D; 来比较，但是当两个值的组合与另两个值的组合进行比较的时候，可以使用**UNIX_TIMESTAMP()**函数</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">dtjc_jh_jdjh</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">xm_id <span class="operator">=</span> #&#123;xmId&#125;</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">(UNIX_TIMESTAMP( start_time ) <span class="operator">+</span> UNIX_TIMESTAMP( end_time ))<span class="operator">/</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>如上就是根据<strong>起始时间和终止时间的中间值</strong>进行比较。其中 start_time 和 end_time 都是 datetime 类型</p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> mysql </tag>
            
            <tag> 比较date或者datetime </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>索引</title>
      <link href="/posts/11557.html"/>
      <url>/posts/11557.html</url>
      
        <content type="html"><![CDATA[<ul><li><p>什么情况下要用索引</p><ul><li>主键自带主键索引</li><li>唯一约束自带唯一索引</li><li>外键自带外键索引</li><li>查询条件用到的字段需要</li><li>排序用的的字段</li><li>分组用到的字段</li></ul></li><li><p>什么情况下不能用索引</p><ul><li>数据量较少时不用建索引。</li><li>频繁更新字段不能建索引</li><li>索引的选择性（字段的值尽量复杂且尽量分布不平均)</li><li>where 条件查询用不到的字段不用建索引</li></ul></li></ul><hr><h2 id="mysql-优化索引十诫（附口诀"><a href="#mysql-优化索引十诫（附口诀" class="headerlink" title="mysql 优化索引十诫（附口诀)"></a>mysql 优化索引十诫（附口诀)</h2><ul><li>全值匹配我最爱</li><li>最佳左前缀法则(如果索引引了多列，要遵守最左前缀法则。指的是查询从索引的最左前列开始并且不跳过索引中的列)</li><li>不在索引列上做任何操作（计算，函数，（自动 or 手动)类型转换），会导致索引失效而转向全表扫描</li><li>存储引擎不能使用索引中范围条件右边的列</li><li>尽量使用覆盖索引（只访问索引的查询（索引列和查询列一致)),减少 select *</li><li>mysql 在使用!&#x3D;或者&lt;&gt;时候无法使用索引而转向全表扫描</li><li>is null,is not null 也无法使用索引</li><li>like 以通配符开头(‘%abc’)mysql 索引失效会变成全表扫描的操作。解决办法：使用覆盖索引</li><li>字符串不加单引号导致索引失效</li><li>少用 or,用 or 连接时会索引失效</li></ul><p><strong>口诀</strong></p><p><strong>全职匹配我最爱，最左前缀要遵守；<br>带头大哥不能死，中间兄弟不能断；<br>索引列上少计算，范围之后全失效；<br>LIKE 百分写最右，覆盖索引不写*；<br>不等空值还有 OR，索引影响要注意；<br>VAR 引号不可丢，SQL 优化有诀窍。</strong></p><hr><h2 id="排序使用索引"><a href="#排序使用索引" class="headerlink" title="排序使用索引"></a>排序使用索引</h2><p><img src="https://raw.githubusercontent.com/zhangyuhannerv/picture-host-1/main/20210810170647.png" alt="请确认能链接到github"></p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> mysql </tag>
            
            <tag> 索引 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>锁</title>
      <link href="/posts/21631.html"/>
      <url>/posts/21631.html</url>
      
        <content type="html"><![CDATA[<h2 id="myisam-的读写锁-表锁"><a href="#myisam-的读写锁-表锁" class="headerlink" title="myisam 的读写锁(表锁)"></a>myisam 的读写锁(表锁)</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">lock <span class="keyword">table</span> emp read;</span><br><span class="line">lock <span class="keyword">table</span> emp write;</span><br></pre></td></tr></table></figure><p>myisam 是写锁调度优于读锁调度,所以 mysiam 要偏读（因为写会阻塞其他线程对当前表的任何操作)</p><p>myisam 执行 select 时会给所有涉及的表增加读锁。执行增删改时会给所有涉及到的表增加写锁</p><p>表读锁，当前 session 只能读当前表，对其他表任何操作都做不了，其他 session 能做任何操作，只是对有读锁的表的增删改会阻塞</p><p>表写锁，当前 session 只能对当前表做增删改查，对其他表任何操作都做不了，其他 session 对有写锁的表的任何操作都会堵塞，但是对其他的表可以做任何操作</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">open</span> tables; <span class="comment">--查看哪些表被锁了</span></span><br><span class="line"><span class="keyword">show</span> status <span class="keyword">like</span> <span class="string">&#x27;table%&#x27;</span>; <span class="comment">--分析表的锁定状况</span></span><br></pre></td></tr></table></figure><hr><h2 id="innodb-的读写锁-行锁"><a href="#innodb-的读写锁-行锁" class="headerlink" title="innodb 的读写锁(行锁)"></a>innodb 的读写锁(行锁)</h2><p>session1 更新某一行时,且未提交。session2 读到的是旧数据。直到 ession1 提交。session2 才能读到新数据</p><p>session1 更新某一行时,且未提交。当 session2 同时也更新这一行时，阻塞。直到 ession1 提交。session2 才能更新完成。注意：session2 更新其他行的数据不受影响</p><p><strong>注意</strong></p><p>innode 引擎默认是行锁。但是出现以下情况的时候，行锁还是会变成表锁</p><p>即：更新时 where 后面的条件没有使用上索引。包括字段上本身没有索引或者有索引但是 sql 写的不严谨导致索引失效，此时即使是 innodb 引擎它在更新的时候还是会锁住整张表</p><p>行锁的状态查看命令</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> status <span class="keyword">like</span> <span class="string">&#x27;innodb_row_lock%&#x27;</span></span><br><span class="line"><span class="comment">--出现的参数依次往下分别是:</span></span><br><span class="line"><span class="comment">--当前正在等待的锁的数量</span></span><br><span class="line"><span class="comment">--从服务器启动到现在等待锁的总的时间长度</span></span><br><span class="line"><span class="comment">--每次等待所花的平均时间</span></span><br><span class="line"><span class="comment">--等待的最长的一次时间</span></span><br><span class="line"><span class="comment">--服务启动到现在总共等待锁的次数</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> mysql </tag>
            
            <tag> 锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybatis中$和#的使用场景</title>
      <link href="/posts/27592.html"/>
      <url>/posts/27592.html</url>
      
        <content type="html"><![CDATA[<ul><li>group by 字段 ,order by 字段，表名，字段名，如果是动态的用$</li><li>limit 用#</li><li>其他的用#</li></ul>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> mybatis </tag>
            
            <tag> mybatis中$和#的使用场景 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>传入集合循环查询并用union组合</title>
      <link href="/posts/25838.html"/>
      <url>/posts/25838.html</url>
      
        <content type="html"><![CDATA[<p>实例：接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * selectOverrunData:查询一个单次计划某个行别某个速度级下各个超限类型的占比</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> testTaskId 测试任务id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> xb         行别</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> speedLevel 速度级</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type       超限还是大值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> labelList  通道名称集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Zhangyuhan</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2021/7/8 15:03</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">selectStatisticalInformation</span><span class="params">(<span class="meta">@Param(&quot;testTaskId&quot;)</span> String testTaskId,</span></span><br><span class="line"><span class="params">                                                           <span class="meta">@Param(&quot;xb&quot;)</span> String xb,</span></span><br><span class="line"><span class="params">                                                           <span class="meta">@Param(&quot;speedLevel&quot;)</span> Integer speedLevel,</span></span><br><span class="line"><span class="params">                                                           <span class="meta">@Param(&quot;type&quot;)</span> String type,</span></span><br><span class="line"><span class="params">                                                           <span class="meta">@Param(&quot;labelList&quot;)</span> List&lt;String&gt; labelList)</span>;</span><br></pre></td></tr></table></figure><p>接口对应的 sql</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectStatisticalInformation&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;labelList&quot;</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;UNION&quot;</span>&gt;</span></span><br><span class="line">        SELECT numtab.num AS VALUE,</span><br><span class="line">        concat( round(( numtab.num / numtab.total ) * 100, 2),&#x27;%&#x27; ) AS NAME</span><br><span class="line">        FROM</span><br><span class="line">            (</span><br><span class="line">            SELECT</span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&#x27;type == &quot;超限&quot;&#x27;</span>&gt;</span></span><br><span class="line">                count( CASE WHEN cxlx = #&#123;item&#125; THEN 1 END ) AS num ,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&#x27;type == &quot;大值&quot;&#x27;</span>&gt;</span></span><br><span class="line">                count( CASE WHEN dzlx = #&#123;item&#125; THEN 1 END ) AS num,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            count(*) AS total</span><br><span class="line">            FROM</span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&#x27;type == &quot;超限&quot;&#x27;</span>&gt;</span></span><br><span class="line">            cxdata_table</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&#x27;type == &quot;大值&quot;&#x27;</span>&gt;</span></span><br><span class="line">            dzdata_table</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            WHERE</span><br><span class="line">            dcjh_id = &#x27;797cb0e7de3241029b5feb6b1ffa17ca&#x27;</span><br><span class="line">            AND xb = &#x27;上行&#x27;</span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&#x27;type == &quot;超限&quot;&#x27;</span>&gt;</span></span><br><span class="line">            AND flag = &#x27;0&#x27;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            ) numtab</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> mybatis </tag>
            
            <tag> 传入集合循环查询并用union组合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>判断字符串相等时的注意事项</title>
      <link href="/posts/281.html"/>
      <url>/posts/281.html</url>
      
        <content type="html"><![CDATA[<p>mybatis 映射文件中，if 标签判断字符串相等，两种方式：</p><p>因为 mybatis 映射文件，是使用的 ognl 表达式，所以在判断字符串 sex 变量是否是字符串 Y 的时候，</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex==&#x27;Y&#x27;.toString()&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span> = <span class="string">&#x27;sex== &quot;Y&quot;&#x27;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：不能使用</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex==&#x27;Y&#x27;&quot;</span>&gt;</span></span><br><span class="line">and 1=1</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br></pre></td></tr></table></figure><p>因为 mybatis 会把’Y’解析为字符，所以不能这样写 会报 NumberFormatException</p><p>MyBatis 是使用的 OGNL 表达式来进行解析的，这个地方有一个坑需要注意下，单引号内有一个字符的情况下，OGNL 会将其以 java 中的 char 类型进行解析，那么此时 char 类型与参数 String 类型用等号进行比较的时候结果都是 false。解决方案也很简单，就是讲 test 中的单个字符用双引号括起来。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">      /*不行*/</span><br><span class="line">          <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;qryStr==&#x27;Y&#x27;&quot;</span>&gt;</span></span><br><span class="line">              and counts=1</span><br><span class="line">          <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">           /*可以*/</span><br><span class="line">          <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;qryStr==&#x27;Y&#x27;.toString()&quot;</span>&gt;</span></span><br><span class="line">              and counts=1</span><br><span class="line">          <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">              /*可以*/</span><br><span class="line">          <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&#x27;qryStr==&quot;Y&quot;&#x27;</span>&gt;</span></span><br><span class="line">              and counts=2</span><br><span class="line">          <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br></pre></td></tr></table></figure><p>建议使用外部单引号，里面双引号嵌套的方式。</p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> mybatis </tag>
            
            <tag> 判断字符串相等时的注意事项 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实现if-else</title>
      <link href="/posts/51749.html"/>
      <url>/posts/51749.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;item.tdName == &#x27;hor_acceleration&#x27;&quot;</span>&gt;</span></span><br><span class="line">                   &#x27;0&#x27; as horAcceleration,</span><br><span class="line">               <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">                   hor_acceleration as horAcceleration,</span><br><span class="line">               <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> mybatis </tag>
            
            <tag> 实现if-else </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>批量插入和批量更新</title>
      <link href="/posts/3561.html"/>
      <url>/posts/3561.html</url>
      
        <content type="html"><![CDATA[<h2 id="批量插入"><a href="#批量插入" class="headerlink" title="批量插入"></a>批量插入</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertTgAfterCorrectData&quot;</span>&gt;</span></span><br><span class="line">        insert into dtjc_tg_after_correct_data(</span><br><span class="line">        id,</span><br><span class="line">        left_low</span><br><span class="line">        )</span><br><span class="line">        values</span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">            (</span><br><span class="line">            #&#123;item.id&#125;,</span><br><span class="line">            #&#123;item.left_low&#125;</span><br><span class="line">            )</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="批量更新"><a href="#批量更新" class="headerlink" title="批量更新"></a>批量更新</h2><h3 id="更新多条数据，每条数据都不一样"><a href="#更新多条数据，每条数据都不一样" class="headerlink" title="更新多条数据，每条数据都不一样"></a>更新多条数据，每条数据都不一样</h3><p>背景描述：通常如果需要一次更新多条数据有两个方式，（1）在业务代码中循环遍历逐条更新。（2）一次性更新所有数据（更准确的说是一条 sql 语句来更新所有数据，逐条更新的操作放到数据库端，在业务代码端展现的就是一次性更新所有数据）。两种方式各有利弊，下面将会对两种方式的利弊做简要分析，主要介绍第二种方式在 mybatis 中的实现。</p><h4 id="逐条实现（java-实现"><a href="#逐条实现（java-实现" class="headerlink" title="逐条实现（java 实现)"></a>逐条实现（java 实现)</h4><p>这种方式显然是最简单，也最不容易出错的，即便出错也只是影响到当条出错的数据，而且可以对每条数据都比较可控，更新失败或成功，从什么内容更新到什么内容，都可以在逻辑代码中获取。代码可能像下面这个样子：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">updateBatch(List&lt;MyData&gt; datas)&#123;</span><br><span class="line">    <span class="keyword">for</span>(MyData data : datas)&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            myDataDao.update(data);<span class="comment">//更新一条数据，mybatis中如下面的xml文件的update</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            ...<span class="comment">//如果更新失败可以做一些其他的操作，比如说打印出错日志等</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--mybatis中update操作的实现--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span>&gt;</span></span><br><span class="line">    update mydata</span><br><span class="line">    set   ...</span><br><span class="line">    where ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这种方式最大的问题就是效率问题，逐条更新，每次都会连接数据库，然后更新，再释放连接资源（虽然通过连接池可以将频繁连接数据的效率大大提高，抗不住数据量大），这中损耗在数据量较大的时候便会体现出效率问题。这也是在满足业务需求的时候，通常会使用上述提到的第二种批量更新的实现（当然这种方式也有数据规模的限制，后面会提到）。</p><h4 id="逐条更新-mybatis-实现"><a href="#逐条更新-mybatis-实现" class="headerlink" title="逐条更新(mybatis 实现)"></a>逐条更新(mybatis 实现)</h4><p>通过循环，依次执行多条 update 的 sql</p><p>前提条件:</p><p>要实现批量更新，首先得设置 mysql 支持批量操作，在 jdbc 链接中需要附加&amp;allowMultiQueries&#x3D;true 属性才行，可能会被阿里的 druid 给阻挡。需要上网找绕过阻挡得方案<br>例如：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">jdbc:</span> <span class="string">mysql://localhost:3306/dbname?characterEncoding=utf8&amp;zeroDateTimeBehavior=convertToNull&amp;allowMultiQueries=true</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateBatch&quot;</span>  <span class="attr">parameterType</span>=<span class="string">&quot;java.util.List&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span> <span class="attr">open</span>=<span class="string">&quot;&quot;</span> <span class="attr">close</span>=<span class="string">&quot;&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;;&quot;</span>&gt;</span></span><br><span class="line">        update course</span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            name=$&#123;item.name&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        where id = $&#123;item.id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一条记录 update 一次，性能比较差，容易造成阻塞。</p><h3 id="sql-批量更新-主力实现"><a href="#sql-批量更新-主力实现" class="headerlink" title="sql 批量更新(主力实现)"></a>sql 批量更新(主力实现)</h3><h5 id="实际实践-传入的是-List-lt-Map-lt-String-Object-gt-gt"><a href="#实际实践-传入的是-List-lt-Map-lt-String-Object-gt-gt" class="headerlink" title="实际实践(传入的是 List&lt;Map&lt;String, Object&gt;&gt;)"></a>实际实践(传入的是 List&lt;Map&lt;String, Object&gt;&gt;)</h5><p>务必注意:一定要加 where 条件,里面的 id 为需要更新的数据的 id;如果不加 where 条件,则会全部更新,但是需要更新且有数据的更新为传递的数据,没有数据的则更新为 null,此时更新出错</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateChartParamByAccountAndChartid&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">        update followme_parameters</span><br><span class="line">        <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;set&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;signal_source =case&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;end,&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;item.signalSource!=null&quot;</span>&gt;</span></span><br><span class="line">                        when account=#&#123;item.account&#125; and chart_id=#&#123;item.chartId&#125;</span><br><span class="line">                         then #&#123;item.signalSource&#125;</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;rate =case&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;end,&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;item.rate!=null&quot;</span>&gt;</span></span><br><span class="line">                        when account=#&#123;item.account&#125; and chart_id=#&#123;item.chartId&#125;</span><br><span class="line">                        then #&#123;item.rate&#125;</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">        where id in</span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">            #&#123;item.id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p>另外文章的样板</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateBatch&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">     update course</span><br><span class="line">      <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;set&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;peopleId =case&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;end,&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">item</span>=<span class="string">&quot;i&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;i.peopleId!=null&quot;</span>&gt;</span></span><br><span class="line">                    when id=#&#123;i.id&#125; then #&#123;i.peopleId&#125;</span><br><span class="line">                   <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot; roadgridid =case&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;end,&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">item</span>=<span class="string">&quot;i&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;i.roadgridid!=null&quot;</span>&gt;</span></span><br><span class="line">                    when id=#&#123;i.id&#125; then #&#123;i.roadgridid&#125;</span><br><span class="line">                   <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;type =case&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;end,&quot;</span> &gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">item</span>=<span class="string">&quot;i&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;i.type!=null&quot;</span>&gt;</span></span><br><span class="line">                    when id=#&#123;i.id&#125; then #&#123;i.type&#125;</span><br><span class="line">                   <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;unitsid =case&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;end,&quot;</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">item</span>=<span class="string">&quot;i&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;i.unitsid!=null&quot;</span>&gt;</span></span><br><span class="line">                     when id=#&#123;i.id&#125; then #&#123;i.unitsid&#125;</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">    where</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;or&quot;</span> <span class="attr">item</span>=<span class="string">&quot;i&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span> &gt;</span></span><br><span class="line">        id=#&#123;i.id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/junehappylove/article/details/82215674">原文链接</a></p><h5 id="下面逐步讲解"><a href="#下面逐步讲解" class="headerlink" title="下面逐步讲解"></a>下面逐步讲解</h5><p>一条 sql 语句来批量更新所有数据，下面直接看一下在 mybatis 中通常是怎么写的（去掉 mybatis 语法就是原生的 sql 语句了，所有就没单独说 sql 是怎么写的）</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateBatch&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.util.List&quot;</span>&gt;</span></span><br><span class="line">    update mydata_table</span><br><span class="line">    set  status=</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">separator</span>=<span class="string">&quot; &quot;</span> <span class="attr">open</span>=<span class="string">&quot;case ID&quot;</span> <span class="attr">close</span>=<span class="string">&quot;end&quot;</span>&gt;</span></span><br><span class="line">        when #&#123;item.id&#125; then #&#123;item.status&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    where id in</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">        #&#123;item.id,jdbcType=BIGINT&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中 when…then…是 sql 中的”switch” 语法。这里借助 mybatis 的语法来拼凑成了批量更新的 sql，上面的意思就是批量更新 id 在 updateBatch 参数所传递 List 中的数据的 status 字段。还可以使用实现同样的功能,代码如下:</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateBatch&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.util.List&quot;</span>&gt;</span></span><br><span class="line">        update mydata_table</span><br><span class="line">        <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;set&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;status =case&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;end,&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">                     when id=#&#123;item.id&#125; then #&#123;item.status&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">        where id in</span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">            #&#123;item.id,jdbcType=BIGINT&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p>属性说明</p><ul><li>prefix,suffix 表示在 trim 标签包裹的部分的前面或者后面添加内容</li><li>如果同时有 prefixOverrides,suffixOverrides 表示会用 prefix,suffix 覆盖 Overrides 中的内容。</li><li>如果只有 prefixOverrides,suffixOverrides 表示删除开头的或结尾的 xxxOverides 指定的内容。</li></ul><p>上述代码转化成 sql 如下:</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> mydata_table</span><br><span class="line">    <span class="keyword">set</span> status <span class="operator">=</span></span><br><span class="line">    <span class="keyword">case</span></span><br><span class="line">        <span class="keyword">when</span> id <span class="operator">=</span> #&#123;item.id&#125; <span class="keyword">then</span> #&#123;item.status&#125;<span class="operator">/</span><span class="operator">/</span>此处应该是<span class="operator">&lt;</span>foreach<span class="operator">&gt;</span>展开值</span><br><span class="line">        ...</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">where</span> id <span class="keyword">in</span> (...);</span><br></pre></td></tr></table></figure><p>当然这是最简单的批量更新实现,有时候可能需要更新多个字段,那就需要将</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;status =case&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;end,&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">          when id=#&#123;item.id&#125; then #&#123;item.status&#125;</span><br><span class="line">     <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br></pre></td></tr></table></figure><p>复制拷贝多次,更改 prefix 和 when…then…的内容即可.而如果当需要为某个字段设置默认值的时候可以使用 else</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;status =case&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;end,&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">          when id=#&#123;item.id&#125; then #&#123;item.status&#125;</span><br><span class="line">     <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">     else default_value</span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br></pre></td></tr></table></figure><p>还有更常见的情况就是需要对要更新的数据进行判断,只有符合条件的数据才能进行更新,这种情况可以这么做:</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;status =case&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;end,&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;item.status !=null and item.status != -1&quot;</span>&gt;</span></span><br><span class="line">             when id=#&#123;item.id&#125; then #&#123;item.status&#125;</span><br><span class="line">         <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样的话只有要更新的 list 中 status !&#x3D; null &amp;&amp; status !&#x3D; -1 的数据才能进行 status 更新.其他的将使用默认值更新,而不会保持原数据不变.如果要保持原数据不变呢?即满足条件的更新,不满足条件的保持原数据不变,简单的来做就是再加一个,因为 mybatis 中没有 if…else…语法,但可以通过多个实现同样的效果,如下:</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;status =case&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;end,&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;item.status !=null and item.status != -1&quot;</span>&gt;</span></span><br><span class="line">             when id=#&#123;item.id&#125; then #&#123;item.status&#125;</span><br><span class="line">         <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;item.status == null or item.status == -1&quot;</span>&gt;</span></span><br><span class="line">             when id=#&#123;item.id&#125; then mydata_table.status      //这里就是原数据</span><br><span class="line">         <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br></pre></td></tr></table></figure><p>整体批量更新的写法如下:</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateBatch&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.util.List&quot;</span>&gt;</span></span><br><span class="line">    update mydata_table</span><br><span class="line">    <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;set&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;status =case&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;end,&quot;</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;item.status !=null and item.status != -1&quot;</span>&gt;</span></span><br><span class="line">                     when id=#&#123;item.id&#125; then #&#123;item.status&#125;</span><br><span class="line">                 <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;item.status == null or item.status == -1&quot;</span>&gt;</span></span><br><span class="line">                     when id=#&#123;item.id&#125; then mydata_table.status//原数据</span><br><span class="line">                 <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">    where id in</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">        #&#123;item.id,jdbcType=BIGINT&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h5 id="批量更新-单个字段-传参-list-实际是-sql-批量更新的简化版本而已"><a href="#批量更新-单个字段-传参-list-实际是-sql-批量更新的简化版本而已" class="headerlink" title="批量更新(单个字段,传参 list),实际是 sql 批量更新的简化版本而已"></a>批量更新(单个字段,传参 list),实际是 sql 批量更新的简化版本而已</h5><h6 id="单个字段方法-1"><a href="#单个字段方法-1" class="headerlink" title="单个字段方法 1"></a>单个字段方法 1</h6><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateByBatch&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.util.List&quot;</span>&gt;</span></span><br><span class="line">    update t_goods</span><br><span class="line">    set NODE_ID=</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">separator</span>=<span class="string">&quot; &quot;</span> <span class="attr">open</span>=<span class="string">&quot;case&quot;</span> <span class="attr">close</span>=<span class="string">&quot;end&quot;</span>&gt;</span></span><br><span class="line">      when GOODS_ID=#&#123;item.goodsId&#125; then #&#123;item.nodeId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    where GOODS_ID in</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">      #&#123;item.goodsId,jdbcType=BIGINT&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="单个字段方法-2"><a href="#单个字段方法-2" class="headerlink" title="单个字段方法 2"></a>单个字段方法 2</h6><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateByBatch&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.util.List&quot;</span>&gt;</span></span><br><span class="line">    UPDATE</span><br><span class="line">    t_goods</span><br><span class="line">    SET NODE_ID = CASE</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">      WHEN GOODS_ID = #&#123;item.goodsId&#125; THEN #&#123;item.nodeId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    END</span><br><span class="line">    WHERE GOODS_ID IN</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">      #&#123;item.goodsId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上单字段更新实际执行：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> t_goods <span class="keyword">SET</span> NODE_ID <span class="operator">=</span> <span class="keyword">CASE</span> <span class="keyword">WHEN</span> GOODS_ID <span class="operator">=</span> ? <span class="keyword">THEN</span> ? <span class="keyword">END</span> <span class="keyword">WHERE</span> GOODS_ID <span class="keyword">IN</span> ( ? )</span><br></pre></td></tr></table></figure><h5 id="sql-批量更新-通过-insert-实现"><a href="#sql-批量更新-通过-insert-实现" class="headerlink" title="sql 批量更新(通过 insert 实现)"></a>sql 批量更新(通过 insert 实现)</h5><p>传入的是 List&lt;Map&lt;String,Object&gt;&gt;<br>直接运行插入,如果有插入的数据转为更新该条数据</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;updateChartParamByAccountAndChartid&quot;</span>&gt;</span></span><br><span class="line">    insert into followme_parameters</span><br><span class="line">    (account,chart_id,signal_source,rate)</span><br><span class="line">    values</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">        (#&#123;item.account&#125;,#&#123;item.chartId&#125;,#&#123;item.signalSource&#125;,#&#123;item.rate&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    ON duplicate KEY UPDATE</span><br><span class="line">    signal_source=values(signal_source),rate=values(rate)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h3 id="更新多条数据-更新的内容一样"><a href="#更新多条数据-更新的内容一样" class="headerlink" title="更新多条数据,更新的内容一样."></a>更新多条数据,更新的内容一样.</h3><h4 id="传-map-x2F-传-String"><a href="#传-map-x2F-传-String" class="headerlink" title="传 map&#x2F;传 String"></a>传 map&#x2F;传 String</h4><p>NODE_ID 从 map 中取出来,goodsIdList 是字符串拼接好的(如下面的”1,2,5”)</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateByBatchPrimaryKey&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.util.Map&quot;</span>&gt;</span></span><br><span class="line">    UPDATE t_goods</span><br><span class="line">    SET NODE_ID = #&#123;nodeId&#125;</span><br><span class="line">    WHERE GOODS_ID IN ($&#123;goodsIdList&#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实际的 sql</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> t_goods <span class="keyword">SET</span> NODE_ID <span class="operator">=</span> ? <span class="keyword">WHERE</span> GOODS_ID <span class="keyword">IN</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>);</span><br></pre></td></tr></table></figure><h4 id="传-map-x2F-传-list"><a href="#传-map-x2F-传-list" class="headerlink" title="传 map&#x2F;传 list"></a>传 map&#x2F;传 list</h4><p>NODE_ID 从 map 中取出来,goodsIdList 是用 list 拼接出来的</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateByBatchPrimaryKey&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.util.Map&quot;</span>&gt;</span></span><br><span class="line">    UPDATE t_goods</span><br><span class="line">    SET NODE_ID = #&#123;nodeId&#125;</span><br><span class="line">    WHERE GOODS_ID IN</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">      #&#123;item.goodsId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实际的 sql</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> t_goods <span class="keyword">SET</span> NODE_ID <span class="operator">=</span> ? <span class="keyword">WHERE</span> GOODS_ID <span class="keyword">IN</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>);</span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/eternityz/p/12284760.html">原文链接</a></p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> mybatis </tag>
            
            <tag> 批量插入和批量更新 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>批量插入大数据</title>
      <link href="/posts/33253.html"/>
      <url>/posts/33253.html</url>
      
        <content type="html"><![CDATA[<ol><li><p>思路分析<br>批量插入这个问题，我们用 JDBC 操作，其实就是两种思路吧：</p><ul><li><p>用一个 for 循环，把数据一条一条的插入（这种需要开启批处理）。</p></li><li><p>生成一条插入 sql，类似这种 insert into user(username,address) values(‘aa’,‘bb’),(‘cc’,‘dd’)…。<br>到底哪种快呢？</p></li></ul><p>我们从两方面来考虑这个问题：</p><ul><li><p>插入 SQL 本身执行的效率。</p></li><li><p>网络 I&#x2F;O。</p></li></ul><p><strong>先说第一种方案，就是用 for 循环循环插入：</strong></p><ul><li>这种方案的优势在于，JDBC 中的 PreparedStatement 有预编译功能，预编译之后会缓存起来，后面的 SQL 执行会比较快并且 JDBC 可以开启批处理，这个批处理执行非常给力。</li><li>劣势在于，很多时候我们的 SQL 服务器和应用服务器可能并不是同一台，所以必须要考虑网络 IO，如果网络 IO 比较费时间的话，那么可能会拖慢 SQL 执行的速度。</li></ul><p><strong>再来说第二种方案，就是生成一条 SQL 插入：</strong></p><ul><li>这种方案的优势在于只有一次网络 IO，即使分片处理也只是数次网络 IO，所以这种方案不会在网络 IO 上花费太多时间。</li><li>当然这种方案有好几个劣势，一是 SQL 太长了，甚至可能需要分片后批量处理；二是无法充分发挥 PreparedStatement 预编译的优势，SQL 要重新解析且无法复用；三是最终生成的 SQL 太长了，数据库管理器解析这么长的 SQL 也需要时间。<br>所以我们最终要考虑的就是我们在网络 IO 上花费的时间，是否超过了 SQL 插入的时间？这是我们要考虑的核心问题。</li></ul></li><li><p>数据测试</p><p><strong>2.1 方案 1 测试</strong></p><p>接下来我们来做一个简单的测试，批量插入 5 万条数据看下。</p><p>首先准备一个简单的测试表：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `address` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br></pre></td></tr></table></figure><p>接下来创建一个 Spring Boot 工程，引入 <a href="https://so.csdn.net/so/search?q=MyBatis&spm=1001.2101.3001.7020">MyBatis</a> 依赖和 MySQL 驱动，然后 application.properties 中配置一下数据库连接信息：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=123</span><br><span class="line">spring.datasource.url=jdbc:mysql:///batch_insert?serverTimezone=Asia/Shanghai&amp;rewriteBatchedStatements=true</span><br><span class="line"></span><br><span class="line">大家需要注意，这个数据库连接 URL 地址中多了一个参数 **rewriteBatchedStatements**，这是核心。``</span><br><span class="line"></span><br><span class="line">MySQL JDBC 驱动在默认情况下会无视 **executeBatch()** 语句，把我们期望批量执行的一组 sql 语句拆散，一条一条地发给 MySQL 数据库，批量插入实际上是单条插入，直接造成较低的性能。将 **rewriteBatchedStatements** 参数置为 true, 数据库驱动才会帮我们批量执行 SQL。</span><br><span class="line"></span><br><span class="line">OK，这样准备工作就做好了。</span><br><span class="line"></span><br><span class="line">## 2.1 方案一测试</span><br><span class="line">首先我们来看方案一的测试，即一条一条的插入（实际上是批处理）。</span><br><span class="line"></span><br><span class="line">首先创建相应的 mapper，如下：</span><br><span class="line"></span><br><span class="line">```cpp</span><br><span class="line">@Mapper</span><br><span class="line">public interface UserMapper &#123;</span><br><span class="line">    Integer addUserOneByOne(User user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对应的 XML 文件如下：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUserOneByOne&quot;</span>&gt;</span></span><br><span class="line">    insert into user (username,address,password) values (#&#123;username&#125;,#&#123;address&#125;,#&#123;password&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p>service 如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="keyword">implements</span> <span class="title class_">IUserService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(UserService.class);</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addUserOneByOne</span><span class="params">(List&lt;User&gt; users)</span> &#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> sqlSessionFactory.openSession(ExecutorType.BATCH);</span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">um</span> <span class="operator">=</span> session.getMapper(UserMapper.class);</span><br><span class="line">        <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            um.addUserOneByOne(user);</span><br><span class="line">        &#125;</span><br><span class="line">        session.commit();</span><br><span class="line">        <span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        logger.info(<span class="string">&quot;一条条插入 SQL 耗费时间 &#123;&#125;&quot;</span>, (endTime - startTime));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>补充说明：</p><p>虽然是一条一条的插入，但是我们要开启批处理模式（BATCH），这样前前后后就只用这一个 SqlSession，如果不采用批处理模式，反反复复的获取 Connection 以及释放 Connection 会耗费大量时间，效率奇低，这种效率奇低的方式松哥就不给大家测试了。</p><p>接下来写一个简单的测试接口看下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> getLogger(HelloController.class);</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserService userService;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一条一条插入</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user2&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">user2</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;User&gt; users = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">50000</span>; i++) &#123;</span><br><span class="line">            <span class="type">User</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">            u.setAddress(<span class="string">&quot;广州：&quot;</span> + i);</span><br><span class="line">            u.setUsername(<span class="string">&quot;张三：&quot;</span> + i);</span><br><span class="line">            u.setPassword(<span class="string">&quot;123：&quot;</span> + i);</span><br><span class="line">            users.add(u);</span><br><span class="line">        &#125;</span><br><span class="line">        userService.addUserOneByOne(users);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写个简单的单元测试：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 单元测试加事务的目的是为了插入之后自动回滚，避免影响下一次测试结果</span></span><br><span class="line"><span class="comment"> * 一条一条插入</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">addUserOneByOne</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;User&gt; users = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">50000</span>; i++) &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        u.setAddress(<span class="string">&quot;广州：&quot;</span> + i);</span><br><span class="line">        u.setUsername(<span class="string">&quot;张三：&quot;</span> + i);</span><br><span class="line">        u.setPassword(<span class="string">&quot;123：&quot;</span> + i);</span><br><span class="line">        users.add(u);</span><br><span class="line">    &#125;</span><br><span class="line">    userService.addUserOneByOne(users);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>经过测试，耗时 901 毫秒，5w 条数据插入不到 1 秒。</strong></p><p><strong>2.2 方案 2 测试</strong></p><p>方案二是生成一条 SQL 然后插入。</p><p>mapper 如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">addByOneSQL</span><span class="params">(<span class="meta">@Param(&quot;users&quot;)</span> List&lt;User&gt; users)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的 SQL 如下：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addByOneSQL&quot;</span>&gt;</span></span><br><span class="line">    insert into user (username,address,password) values</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;users&quot;</span> <span class="attr">item</span>=<span class="string">&quot;user&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">        (#&#123;user.username&#125;,#&#123;user.address&#125;,#&#123;user.password&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p>service 如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="keyword">implements</span> <span class="title class_">IUserService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(UserService.class);</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    SqlSessionFactory sqlSessionFactory;</span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addByOneSQL</span><span class="params">(List&lt;User&gt; users)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        userMapper.addByOneSQL(users);</span><br><span class="line">        <span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        logger.info(<span class="string">&quot;合并成一条 SQL 插入耗费时间 &#123;&#125;&quot;</span>, (endTime - startTime));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在单元测试中调一下这个方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 合并成一条 SQL 插入</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">addByOneSQL</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;User&gt; users = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">50000</span>; i++) &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        u.setAddress(<span class="string">&quot;广州：&quot;</span> + i);</span><br><span class="line">        u.setUsername(<span class="string">&quot;张三：&quot;</span> + i);</span><br><span class="line">        u.setPassword(<span class="string">&quot;123：&quot;</span> + i);</span><br><span class="line">        users.add(u);</span><br><span class="line">    &#125;</span><br><span class="line">    userService.addByOneSQL(users);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过测试，可以看到插入 5 万条数据耗时 1805 毫秒。</p><p>可以看到，生成一条 SQL 的执行效率还是要差一点。</p><p>另外还需要注意，第二种方案还有一个问题，就是当数据量大的时候，生成的 SQL 将特别的长，MySQL 可能一次性处理不了这么大的 SQL，这个时候就需要修改 MySQL 的配置或者对待插入的数据进行分片处理了，这些操作又会导致插入时间更长。</p><p><strong>2.3 对比分析</strong></p><p>很明显，方案一更具优势。当批量插入十万、二十万数据的时候，方案一的优势会更加明显（方案二则需要修改 MySQL 配置或者对待插入数据进行分片）。</p></li><li><p>mp 是怎么做的</p><p>我们知道，其实 MyBatis Plus 里边也有一个批量插入的方法 saveBatch，我们来看看它的实现源码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">saveBatch</span><span class="params">(Collection&lt;T&gt; entityList, <span class="type">int</span> batchSize)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">sqlStatement</span> <span class="operator">=</span> getSqlStatement(SqlMethod.INSERT_ONE);</span><br><span class="line">    <span class="keyword">return</span> executeBatch(entityList, batchSize, (sqlSession, entity) -&gt; sqlSession.insert(sqlStatement, entity));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，这里拿到的 sqlStatement 就是一个 INSERT_ONE，即一条一条插入。</p><p>再来看 executeBatch 方法，如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;E&gt; <span class="type">boolean</span> <span class="title function_">executeBatch</span><span class="params">(Class&lt;?&gt; entityClass, Log log, Collection&lt;E&gt; list, <span class="type">int</span> batchSize, BiConsumer&lt;SqlSession, E&gt; consumer)</span> &#123;</span><br><span class="line">    Assert.isFalse(batchSize &lt; <span class="number">1</span>, <span class="string">&quot;batchSize must not be less than one&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> !CollectionUtils.isEmpty(list) &amp;&amp; executeBatch(entityClass, log, sqlSession -&gt; &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> list.size();</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (E element : list) &#123;</span><br><span class="line">            consumer.accept(sqlSession, element);</span><br><span class="line">            <span class="keyword">if</span> ((i % batchSize == <span class="number">0</span>) || i == size) &#123;</span><br><span class="line">                sqlSession.flushStatements();</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里注意 return 中的第三个参数，是一个 lambda 表达式，这也是 MP 中批量插入的核心逻辑，可以看到，MP 先对数据进行分片（默认分片大小是 1000），分片完成之后，也是一条一条的插入。继续查看 executeBatch 方法，就会发现这里的 sqlSession 其实也是一个批处理的 sqlSession，并非普通的 sqlSession。</p><p>综上，MP 中的批量插入方案跟我们 2.1 小节的批量插入思路其实是一样的。入股想要批量插入大数据量的效率最高，就采用 2.1 的方式</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> mybatis </tag>
            
            <tag> 批量插入大数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>and() 和 or()的嵌套使用</title>
      <link href="/posts/4758.html"/>
      <url>/posts/4758.html</url>
      
        <content type="html"><![CDATA[<p>and 里面嵌套 or 如下使用</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">QueryWrapper&lt;ErrorData&gt; ew = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">ew.eq(<span class="string">&quot;dcjh_id&quot;</span>, csrwInfo.getCsrwID()).and(wrapper -&gt; wrapper.eq(<span class="string">&quot;wtlx&quot;</span>, <span class="string">&quot;0&quot;</span>).or().eq(<span class="string">&quot;wtlx&quot;</span>, <span class="string">&quot;1&quot;</span>));<span class="comment">// where dcjh_id = &#x27;&#x27; and (wtlx = &#x27;0&#x27; or wtlx = &#x27;1&#x27;),注意：这里是一个lambda表达式</span></span><br><span class="line">List&lt;ErrorData&gt; dataList = errorDataService.list(ew);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> mybatisPlus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> mybatisPlus </tag>
            
            <tag> and() 和 or()的嵌套使用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用QueryWrapper关于时间日期比较的问题</title>
      <link href="/posts/63472.html"/>
      <url>/posts/63472.html</url>
      
        <content type="html"><![CDATA[<p>首先明确。springmvc 默认不支持将前台传过来的日期&#x2F;日期时间字符串在到达 controller 层之前直接转成 Date&#x2F;LocalDate&#x2F;LocalDateTime 类型的，所以接收还是要用字符串类型接收</p><p>mp 的条件构造器不支持时间日期字符串与 mysql 的 date&#x2F;datetime 类型的字段的比较</p><p>所以在比较的时候。要这么写</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//query:startDate-&gt;String,endDate-&gt;String，例子：2020-08-01</span></span><br><span class="line"><span class="comment">//jcrq:mysql-&gt;date类型的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 应该同样适用2020-08-01 08:00:00的字符串和mysql中datetime类型的比较</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以这么理解。统一转成时间戳再进行比较</span></span><br><span class="line"></span><br><span class="line">QueryWrapper&lt;TSjfxJcjl&gt; qw = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">qw</span><br><span class="line"> .apply(!StringUtils.isEmpty(query.getStartDate()),</span><br><span class="line">         <span class="string">&quot;UNIX_TIMESTAMP(jcrq) &gt;= UNIX_TIMESTAMP(&#x27;&quot;</span> + query.getStartDate() + <span class="string">&quot;&#x27;)&quot;</span>)</span><br><span class="line">  .apply(!StringUtils.isEmpty(query.getEndDate()),</span><br><span class="line">         <span class="string">&quot;UNIX_TIMESTAMP(jcrq) &lt;= UNIX_TIMESTAMP(&#x27;&quot;</span> + query.getEndDate() + <span class="string">&quot;&#x27;)&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> mybatisPlus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> mybatisPlus </tag>
            
            <tag> 使用QueryWrapper关于时间日期比较的问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自带的分页插件的使用</title>
      <link href="/posts/13229.html"/>
      <url>/posts/13229.html</url>
      
        <content type="html"><![CDATA[<p>建一个 page 对象传入前台的 page,和 limit 参数（推荐使用泛型,限定返回的参数类型，例子的话应该是 Page&lt;Map&gt;）</p><p>调用 dao 或者 service 层时传入 page 对象</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Page</span> <span class="variable">pages</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Page</span>(Integer.valueOf(page), Integer.valueOf(limit));</span><br><span class="line">List&lt;Map&gt; list = dtjcXmGeneralreportService.getCxList(pages, csrwId,xlId,xb,ppbzId,Integer.valueOf(topSpeed));</span><br></pre></td></tr></table></figure><p>service 接口层</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Map&gt; <span class="title function_">getCxList</span><span class="params">(Page pages, String csrwId, String xlId, String xb,String bz,Integer topSpeed)</span>;</span><br></pre></td></tr></table></figure><p>service 层</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> List&lt;Map&gt; <span class="title function_">getCxList</span><span class="params">(Page pages, String csrwId, String xlId, String xb,String bz,Integer topSpeed)</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> dtjcXmGeneralreportMapper.getCxList(pages, csrwId,xlId,xb,bz,topSpeed);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>dao 层</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Map&gt; <span class="title function_">getCxList</span><span class="params">(<span class="meta">@Param(&quot;pages&quot;)</span> Page pages,<span class="meta">@Param(&quot;csrwId&quot;)</span> String csrwId,<span class="meta">@Param(&quot;xlId&quot;)</span> String xlId,<span class="meta">@Param(&quot;xb&quot;)</span> String xb,<span class="meta">@Param(&quot;bz&quot;)</span> String bz,<span class="meta">@Param(&quot;topSpeed&quot;)</span> Integer topSpeed)</span>;</span><br></pre></td></tr></table></figure><p>同时写 sql 的时候不需要专门使用 page,只需要正常的写 sql，使用参数筛选即可</p><p>回到 controller 里</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">map.put(<span class="string">&quot;count&quot;</span>, pages.getTotal());</span><br><span class="line">map.put(<span class="string">&quot;data&quot;</span>, list);</span><br></pre></td></tr></table></figure><p>至此是城轨项目的使用 page 方法</p><hr><p>以下是 mybatis-plus 官方的使用参考</p><p><a href="https://baomidou.com/guide/page.html">原文链接</a></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- spring xml 方式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;plugins&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlParser&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;自定义解析类、可以没有&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dialectClazz&quot;</span> <span class="attr">value</span>=<span class="string">&quot;自定义方言类、可以没有&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- COUNT SQL 解析.可以没有 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;countSqlParser&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;countSqlParser&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;countSqlParser&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.baomidou.mybatisplus.extension.plugins.pagination.optimize.JsqlParserCountOptimize&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置为 true 可以优化部分 left join 的sql --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;optimizeJoin&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Spring boot方式</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.baomidou.cloud.service.*.mapper*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 旧版</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PaginationInterceptor <span class="title function_">paginationInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">PaginationInterceptor</span> <span class="variable">paginationInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PaginationInterceptor</span>();</span><br><span class="line">        <span class="comment">// 设置请求的页面大于最大页后操作， true调回到首页，false 继续请求  默认false</span></span><br><span class="line">        <span class="comment">// paginationInterceptor.setOverflow(false);</span></span><br><span class="line">        <span class="comment">// 设置最大单页限制数量，默认 500 条，-1 不受限制</span></span><br><span class="line">        <span class="comment">// paginationInterceptor.setLimit(500);</span></span><br><span class="line">        <span class="comment">// 开启 count 的 join 优化,只针对部分 left join</span></span><br><span class="line">        paginationInterceptor.setCountSqlParser(<span class="keyword">new</span> <span class="title class_">JsqlParserCountOptimize</span>(<span class="literal">true</span>));</span><br><span class="line">        <span class="keyword">return</span> paginationInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最新版</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>(DbType.H2));</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>UserMapper.java 方法内容</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;<span class="comment">//可以继承或者不继承BaseMapper</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 查询 : 根据state状态查询用户列表，分页显示</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page 分页对象,xml中可以从里面进行取值,传递参数 Page 即自动分页,必须放在第一位(你可以继承Page实现自己的分页对象)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> state 状态</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 分页对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    IPage&lt;User&gt; <span class="title function_">selectPageVo</span><span class="params">(Page&lt;?&gt; page, Integer state)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>UserMapper.xml 等同于编写一个普通 list 查询，mybatis-plus 自动替你分页</li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectPageVo&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.baomidou.cloud.entity.UserVo&quot;</span>&gt;</span></span><br><span class="line">    SELECT id,name FROM user WHERE state=#&#123;state&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>UserServiceImpl.java 调用分页方法</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> IPage&lt;User&gt; <span class="title function_">selectUserPage</span><span class="params">(Page&lt;User&gt; page, Integer state)</span> &#123;</span><br><span class="line">    <span class="comment">// 不进行 count sql 优化，解决 MP 无法自动优化 SQL 问题，这时候你需要自己查询 count 部分</span></span><br><span class="line">    <span class="comment">// page.setOptimizeCountSql(false);</span></span><br><span class="line">    <span class="comment">// 当 total 为小于 0 或者设置 setSearchCount(false) 分页插件不会进行 count 查询</span></span><br><span class="line">    <span class="comment">// 要点!! 分页返回的对象与传入的对象是同一个</span></span><br><span class="line">    <span class="keyword">return</span> userMapper.selectPageVo(page, state);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> mybatisPlus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> mybatisPlus </tag>
            
            <tag> 自带的分页插件的使用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用api整理</title>
      <link href="/posts/11039.html"/>
      <url>/posts/11039.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Object <span class="title function_">parse</span><span class="params">(String text)</span>; <span class="comment">// 把JSON文本parse为JSONObject或者JSONArray</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> JSONObject <span class="title function_">parseObject</span><span class="params">(String text)</span>； <span class="comment">// 把JSON文本parse成JSONObject</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> &lt;T&gt; T <span class="title function_">parseObject</span><span class="params">(String text, Class&lt;T&gt; clazz)</span>; <span class="comment">// 把JSON文本parse为JavaBean</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> JSONArray <span class="title function_">parseArray</span><span class="params">(String text)</span>; <span class="comment">// 把JSON文本parse成JSONArray</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">parseArray</span><span class="params">(String text, Class&lt;T&gt; clazz)</span>; <span class="comment">//把JSON文本parse成JavaBean集合</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String <span class="title function_">toJSONString</span><span class="params">(Object object)</span>; <span class="comment">// 将JavaBean序列化为JSON文本</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String <span class="title function_">toJSONString</span><span class="params">(Object object, <span class="type">boolean</span> prettyFormat)</span>; <span class="comment">// 将JavaBean序列化为带格式的JSON文本</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Object <span class="title function_">toJSON</span><span class="params">(Object javaObject)</span>; <span class="comment">//将JavaBean转换为JSONObject或者JSONArray。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> FastJSON </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> FastJSON </tag>
            
            <tag> 常用api整理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>容器滚动条出现的条件</title>
      <link href="/posts/49921.html"/>
      <url>/posts/49921.html</url>
      
        <content type="html"><![CDATA[<p>容器出现滚动条的条件：1，容器有固定的高度，2，容器的内容高度，超出了容器的高度，如果容器未设定高度，则它会向父亲，祖先找到有高度的容器，并在其身上显示滚动条</p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> html </tag>
            
            <tag> 容器滚动条出现的条件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自适应宽度的input框</title>
      <link href="/posts/45263.html"/>
      <url>/posts/45263.html</url>
      
        <content type="html"><![CDATA[<p>解决办法 1：div 的 contenteditable&#x3D;”true”属性。能实现一行编辑。<br>待解决的问题：需要禁止回车换行，同时还有编辑完之后光标不会回到最开始，光标会保留在你最后编辑的地方</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;dict_val1&quot;</span> <span class="attr">contenteditable</span>=<span class="string">&quot;true&quot;</span> <span class="attr">id</span>=<span class="string">&quot;lineLength&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-attr">[contenteditable]</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0.1458rem</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">0.1458rem</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*重要*/</span></span><br><span class="line">  <span class="attribute">width</span>: auto;</span><br><span class="line">  <span class="attribute">min-width</span>: <span class="number">0.1458rem</span>;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">outline</span>: none;</span><br><span class="line">  <span class="comment">/*重要*/</span></span><br><span class="line"></span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#001631</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">0.0677rem</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>开启编辑状态的话只需把 outline 的 none 去掉就行，改为默认状态或自定义属性如 outline:#00FF00 dotted thick;<br>或者不更改 outLine 状态，把 div 的 border 调出来也可以</p><hr><p>解决方案 2:传统的 input 方法 我比较推荐使用<br>待解决的问题：只能实现下划线效果的自适应，不能实现四周带边框效果的自适应<br>给 input 一个固定的宽度,隐藏它周围的边框</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">readonly</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span> <span class="attr">class</span>=<span class="string">&quot;line_edit&quot;</span> <span class="attr">id</span>=<span class="string">&quot;line_name&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>当点击编辑的时候给 input 加上一个类 input_text_underline,这样文字就有下划线了。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.input_text_underline</span> &#123;</span><br><span class="line">   <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">   <span class="attribute">text-decoration-color</span>: <span class="number">#8F9AB4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> css </tag>
            
            <tag> 自适应宽度的input框 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node的环境安装</title>
      <link href="/posts/24427.html"/>
      <url>/posts/24427.html</url>
      
        <content type="html"><![CDATA[<h2 id="nvm"><a href="#nvm" class="headerlink" title="nvm"></a>nvm</h2><p>建议先安装 nvm，而不是直接安装 node</p><h3 id="nvm-是什么"><a href="#nvm-是什么" class="headerlink" title="nvm 是什么"></a>nvm 是什么</h3><p>nvm 全英文也叫 node.js version management，是一个 nodejs 的版本管理工具，为了解决 node.js 各种版本存在不兼容现象可以通过它可以安装和切换不同版本的 node.js。<br>可在点此在上下载最新版本</p><h3 id="nvm-命令提示"><a href="#nvm-命令提示" class="headerlink" title="nvm 命令提示"></a>nvm 命令提示</h3><ul><li><code>nvm arch</code>：显示 node 是运行在 32 位还是 64 位。</li><li><code>nvm install &lt;version&gt; [arch]</code> ：安装 node， version 是特定版本也可以是最新稳定版本 latest。可选参数 arch 指定安装 32 位还是 64 位版本，默认是系统位数。可以添加–insecure 绕过远程服务器的 SSL。</li><li><code>nvm list [available]</code> ：显示已安装的列表。可选参数 available，显示可安装的所有版本。list 可简化为 ls。</li><li><code>nvm on</code> ：开启 node.js 版本管理。</li><li><code>nvm off</code> ：关闭 node.js 版本管理。</li><li><code>nvm proxy [url]</code> ：设置下载代理。不加可选参数 url，显示当前代理。将 url 设置为 none 则移除代理。</li><li><code>nvm node_mirror [url]</code> ：设置 node 镜像。默认是<a href="https://nodejs.org/dist/%E3%80%82%E5%A6%82%E6%9E%9C%E4%B8%8D%E5%86%99url%EF%BC%8C%E5%88%99%E4%BD%BF%E7%94%A8%E9%BB%98%E8%AE%A4url%E3%80%82%E8%AE%BE%E7%BD%AE%E5%90%8E%E5%8F%AF%E8%87%B3%E5%AE%89%E8%A3%85%E7%9B%AE%E5%BD%95settings.txt%E6%96%87%E4%BB%B6%E6%9F%A5%E7%9C%8B%EF%BC%8C%E4%B9%9F%E5%8F%AF%E7%9B%B4%E6%8E%A5%E5%9C%A8%E8%AF%A5%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E3%80%82">https://nodejs.org/dist/。如果不写url，则使用默认url。设置后可至安装目录settings.txt文件查看，也可直接在该文件操作。</a></li><li><code>nvm npm_mirror [url]</code> ：设置 npm 镜像。<a href="https://github.com/npm/cli/archive/%E3%80%82%E5%A6%82%E6%9E%9C%E4%B8%8D%E5%86%99url%EF%BC%8C%E5%88%99%E4%BD%BF%E7%94%A8%E9%BB%98%E8%AE%A4url%E3%80%82%E8%AE%BE%E7%BD%AE%E5%90%8E%E5%8F%AF%E8%87%B3%E5%AE%89%E8%A3%85%E7%9B%AE%E5%BD%95settings.txt%E6%96%87%E4%BB%B6%E6%9F%A5%E7%9C%8B%EF%BC%8C%E4%B9%9F%E5%8F%AF%E7%9B%B4%E6%8E%A5%E5%9C%A8%E8%AF%A5%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E3%80%82">https://github.com/npm/cli/archive/。如果不写url，则使用默认url。设置后可至安装目录settings.txt文件查看，也可直接在该文件操作。</a></li><li><code>nvm uninstall &lt;version&gt;</code> ：卸载指定版本 node。</li><li><code>nvm use [version] [arch]</code> ：使用制定版本 node。可指定 32&#x2F;64 位。</li><li><code>nvm root [path]</code> ：设置存储不同版本 node 的目录。如果未设置，默认使用当前目录。</li><li><code>nvm version</code> ：显示 nvm 版本。version 可简化为 v。</li></ul><h3 id="nvm-安装后的操作"><a href="#nvm-安装后的操作" class="headerlink" title="nvm 安装后的操作"></a>nvm 安装后的操作</h3><ol><li><code>nvm install 官网最新的稳定版node的版本号</code></li><li><code>nvm use 官网最新的稳定版node的版本号</code></li><li><code>node -v</code>查看 node 是否安装完成</li></ol><h2 id="pnpm"><a href="#pnpm" class="headerlink" title="pnpm"></a>pnpm</h2><p>使用 nvm 安装好 node 后，建议使用 pnpm 代替 npm<br>执行<code>npm install pnpm -g</code>安装 pnpm<br>在项目里使用<code>pnpm install</code>代理<code>npm install</code></p><h3 id="pnpm-命令"><a href="#pnpm-命令" class="headerlink" title="pnpm 命令"></a>pnpm 命令</h3><ul><li><code>pnpm add -g pnpm</code> 更新 pnpm</li><li><code>pnpm install</code> 安装项目所有依赖</li></ul><h2 id="nrm"><a href="#nrm" class="headerlink" title="nrm"></a>nrm</h2><p>安装完 node 和 pnpm，最后安装 nrm<br>nrm 是一个镜像源管理工具，可以设置 npm&#x2F;pnpm 的以来下载地址<br>执行<code>npm install nrm -g</code>安装 nrm<br>安装完后执行<code>nrm use taobao</code>，设置 npm&#x2F;pnpm 的包下载源使用淘宝镜像</p><h3 id="nrm-命令"><a href="#nrm-命令" class="headerlink" title="nrm 命令"></a>nrm 命令</h3><ul><li><code>nrm -v</code>：查看 nrm 是否安装成功</li><li><code>nrm ls</code>：列出可选择的源</li><li><code>nrm use 源名称</code>：切换使用的源，切换后可使用 nrm ls 查看</li><li><code>nrm add 源名称 &lt;url&gt;</code>：添加新源</li><li><code>nrm del 源名称</code>：删除旧源,nrm del 命令不能删除 nrm 自己内置的源。</li><li><code>nrm test 源名称</code>：测试源的速度，如果不加源名称则是测试所有的源速度</li><li><code>nrm home 源名称</code>：访问源的主页（在默认浏览器打开）</li><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> node </tag>
            
            <tag> node的环境安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>向静态类注入bean</title>
      <link href="/posts/50567.html"/>
      <url>/posts/50567.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DtjcProjectGeneralReportUtil</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IDataAnalysisService dataAnalysisService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> IDataAnalysisService staticDataAnalysisService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        staticDataAnalysisService = dataAnalysisService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//  这里是静态方法，该方法请调用静态bean</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getDtcjGeneralReportTestTaskId</span><span class="params">(String projectId)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">TestTaskId</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        TestTaskId = staticDataAnalysisService.getReportDcjh(projectId);</span><br><span class="line">        <span class="keyword">if</span> (TestTaskId == <span class="literal">null</span> || <span class="string">&quot;&quot;</span>.equals(TestTaskId)) &#123;</span><br><span class="line">            List&lt;Map&lt;String, String&gt;&gt; list = staticDataAnalysisService.getFirstDcjh(projectId);</span><br><span class="line">            <span class="keyword">if</span> (list == <span class="literal">null</span> || list.size() == <span class="number">0</span>) &#123;</span><br><span class="line">                list = staticDataAnalysisService.getFirstDcjhNoData(projectId);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (list != <span class="literal">null</span> &amp;&amp; list.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                TestTaskId = list.get(list.size() - <span class="number">1</span>).get(<span class="string">&quot;id&quot;</span>).toString();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> TestTaskId;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> Spring </tag>
            
            <tag> 向静态类注入bean </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用java代码控制事务</title>
      <link href="/posts/46891.html"/>
      <url>/posts/46891.html</url>
      
        <content type="html"><![CDATA[<ol><li><p>代码中控制事务的三种方式</p><ul><li>编程式事务：就是直接在代码里手动开启事务，手动提交，手动回滚。优点就是可以灵活控制，缺点就是太麻烦了，太多重复的代码了。</li><li>声明式事务：就是使用 SpringAop 配置事务，这种方式大大的简化了编码。需要注意的是切入点表达式一定要写正确。</li><li>注解事务：直接在 Service 层的方法上面加上@Transactional 注解，个人比较喜欢用这种方式。</li></ul></li><li><p>事务回滚的原因</p><p>在工作中，看过别人写的代码出现了事务不回滚的现象。当然，事务不回滚的都是采用的声明式事务或者是注解事务；编程式事务都是自己写代码手动回滚的，因此是不会出现不回滚的现象。</p><p>再说下声明式事务和注解事务回滚的原理：当被切面切中或者是加了注解的方法中抛出了 RuntimeException 异常时，Spring 会进行事务回滚。默认情况下是捕获到方法的 RuntimeException 异常，也就是说抛出只要属于运行时的异常（即 RuntimeException 及其子类）都能回滚；但当抛出一个不属于运行时异常时，事务是不会回滚的。</p><p>下面说说我经常见到的 3 种事务不回滚的产生原因：</p><ul><li>（1）声明式事务配置切入点表达式写错了，没切中 Service 中的方法</li><li>（2）Service 方法中，把异常给 try catch 了，但 catch 里面只是打印了异常信息，没有手动抛出 RuntimeException 异常</li><li>（3）Service 方法中，抛出的异常不属于运行时异常（如 IO 异常），因为 Spring 默认情况下是捕获到运行时异常就回滚</li></ul></li><li><p>如何保证事务回滚</p><p>正常情况下，按照正确的编码是不会出现事务回滚失败的。下面说几点保证事务能回滚的方法</p><ul><li><p>（1）如果采用声明式事务，一定要确保切入点表达式书写正确</p></li><li><p>（2）如果 Service 层会抛出不属于运行时异常也要能回滚，那么可以将 Spring 默认的回滚时的异常修改为 Exception，这样就可以保证碰到什么异常都可以回滚。具体的设置方式也说下。</p><ul><li><p>声明式事务，在配置里面添加一个 rollback-for，代码如下</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;update*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span> <span class="attr">rollback-for</span>=<span class="string">&quot;java.lang.Exception&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>注解事务，直接在注解上面指定，代码如下</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional(rollbackFor=Exception.class)</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>（3）只有非只读事务才能回滚的，只读事务是不会回滚的</p></li><li><p>（4）如果在 Service 层用了 try catch，在 catch 里面再抛出一个 RuntimeException 异常，这样出了异常才会回滚</p></li><li><p>（5）如果你不喜欢（4）的方式，你还可以直接在 catch 后面写一句回滚代码**TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();**来实现回滚，这样的话，就可以在抛异常后也能 return 返回值；比较适合需要拿到 Service 层的返回值的场景。具体的用法可以参见考下面的伪代码</p></li></ul></li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/** TransactionAspectSupport手动回滚事务：*/</span><br><span class="line">@Transactional(rollbackFor = &#123; Exception.class &#125;)</span><br><span class="line">public boolean test() &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        doDbSomeThing();</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        //就是这一句了, 加上之后抛了异常就能回滚（有这句代码就不需要再手动抛出运行时异常了）</span><br><span class="line">        TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em><strong>几点注意事项:</strong></em></p><p><em><strong>1.接口中 A、B 两个方法，A 无@Transactional 标签，B 有，上层通过 A 间接调用 B，此时事务不生效</strong></em></p><p><em><strong>2.接口中异常（运行时异常）被捕获而没有被抛出。默认配置下，spring 只有在抛出的异常为运行时 unchecked 异常时才回滚该事务，也就是抛出的异常为 RuntimeException 的子类(Errors 也会导致事务回滚)，而抛出 checked 异常则不会导致事务回滚 。可通过 @Transactional rollbackFor 进行配置。</strong></em></p><p><em><strong>3.多线程下事务管理因为线程不属于 spring 托管，故线程不能够默认使用 spring 的事务,也不能获取 spring 注入的 bean 。在被 spring 声明式事务管理的方法内开启多线程，多线程内的方法不被事务控制。 一个使用了@Transactional 的方法，如果方法内包含多线程的使用，方法内部出现异常，不会回滚线程中调用方法的事务。</strong></em></p><p><em><strong>4.在@Transactional 注解中如果不配置 rollbackFor 属性,那么事物只会在遇到 RuntimeException 的时候才会回滚,加上 rollbackFor&#x3D;Exception.class,可以让事物在遇到非运行时异常时也回滚</strong></em></p><p><a href="https://www.cnblogs.com/zeng1994/p/8257763.html">原文链接</a></p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> 使用java代码控制事务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>事务的传播行为以及在spring中的配置</title>
      <link href="/posts/32036.html"/>
      <url>/posts/32036.html</url>
      
        <content type="html"><![CDATA[<p>一、什么是事务传播行为？<br>事务传播行为（propagation behavior）指的就是当一个事务方法被另一个事务方法调用时，这个事务方法应该如何运行。</p><p>例如：methodA 方法调用 methodB 方法时，methodB 是继续在调用者 methodA 的事务中运行呢，还是为自己开启一个新事务运行，这就是由 methodB 的事务传播行为决定的。</p><p>二、事务的 7 种传播行为<br>Spring 在 TransactionDefinition 接口中规定了 7 种类型的事务传播行为。<br>事务传播行为是 Spring 框架独有的事务增强特性。<br>7 种：(required &#x2F; supports &#x2F; mandatory &#x2F; requires_new &#x2F; not supported &#x2F; never &#x2F; nested)</p><ul><li><p>PROPAGATION_REQUIRED：如果当前没有事务，就创建一个新事务，如果当前存在事务，就加入该事务，这是最常见的选择，也是 Spring 默认的事务传播行为。(required 需要，没有新建，有加入)</p></li><li><p>PROPAGATION_SUPPORTS：支持当前事务，如果当前存在事务，就加入该事务，如果当前不存在事务，就以非事务执行。（supports 支持，有则加入，没有就不管了，非事务运行）</p></li><li><p>PROPAGATION_MANDATORY：支持当前事务，如果当前存在事务，就加入该事务，如果当前不存在事务，就抛出异常。（mandatory 强制性，有则加入，没有异常）</p></li><li><p>PROPAGATION_REQUIRES_NEW：创建新事务，无论当前存不存在事务，都创建新事务。（requires_new 需要新的，不管有没有，直接创建新事务）</p></li><li><p>PROPAGATION_NOT_SUPPORTED：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。（not supported 不支持事务，存在就挂起）</p></li><li><p>PROPAGATION_NEVER：以非事务方式执行，如果当前存在事务，则抛出异常。（never 不支持事务，存在就异常）</p></li><li><p>PROPAGATION_NESTED：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则按 REQUIRED 属性执行。（nested 存在就在嵌套的执行，没有就找是否存在外面的事务，有则加入，没有则新建）</p></li></ul><p>对事务的要求程度可以从大到小排序：mandatory &#x2F; supports &#x2F; required &#x2F; requires_new &#x2F; nested &#x2F; not supported &#x2F; never</p><p>三、实战<br>1、描述</p><p>外围无事务，内部有事务，外围管不着内部</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test_PROPAGATION_REQUIRED</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// add方法 @Transactional(propagation = Propagation.REQUIRED)</span></span><br><span class="line">    userService.add(user);</span><br><span class="line">    <span class="comment">// add方法 @Transactional(propagation = Propagation.REQUIRED)</span></span><br><span class="line">    userRoleService.add(userRole);</span><br><span class="line">    <span class="comment">//抛异常，不影响上面的add方法执行，外部异常不影响内部</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、描述</p><p>外围方法 Propagation.REQUIRED<br>内部方法 Propagation.REQUIRED<br>修饰的内部方法会加入到外围方法的事务中<br>内部方法和外围方法均属于同一事务，只要一个方法回滚，整个事务均回滚</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional</span>  <span class="comment">// 默认Required</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test_PROPAGATION_REQUIRED</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 增加用户表 Required 加入了外部事务</span></span><br><span class="line">    userService.add(user);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 增加用户角色表 Required 加入了外部事务</span></span><br><span class="line">    userRoleService.add(userRole);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//抛异常 所有都回滚</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、描述</p><p>支持当前事务，如果当前存在事务，就加入该事务，如果当前不存在事务，就以非事务执行<br>外围方法没有开启事务，add 方法直接无事务执行</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test_PROPAGATION_SUPPORTS</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 增加用户表 @Transactional(propagation = Propagation.SUPPORTS)</span></span><br><span class="line">    userService.add(user);</span><br><span class="line">    <span class="comment">// 增加用户角色表 @Transactional(propagation = Propagation.SUPPORTS)</span></span><br><span class="line">    userRoleService.add(userRole);</span><br><span class="line">    <span class="comment">//抛异常，当前无事务，直接无事务执行</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、描述</p><p>外围加入事务，默认 Propagation.REQUIRED<br>内部使用 Propagation.SUPPORTS<br>内部发现有事务，加入，外部异常，内部回滚</p><p>5、描述</p><p>支持当前事务，如果当前存在事务，就加入该事务，如果当前不存在事务，就抛出异常<br>外围不存在事务<br>内部 add 方法使用@Transactional(propagation &#x3D; Propagation.MANDATORY)<br>内部发现当前没事务，直接抛出异常<br>其他的都同理，就不一一讲了……<br>————————————————<br>原文链接：<a href="https://blog.csdn.net/qq_38262266/article/details/108709840">https://blog.csdn.net/qq_38262266/article/details/108709840</a></p><hr><p>B 为主方法, C 子方法, 操作 B 的是否有事务, 操作 C 的传播属性 ,这个地方的情况太多,直接在下面表格中的<code>本文中的解释</code>部分说明</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Transaction3ServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">Transaction3Service</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Transaction4Service transaction4Service;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired(required = false)</span></span><br><span class="line">    <span class="keyword">private</span> StudentMapper mapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span> <span class="comment">//如果不存在事务,注释掉此行来表示</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">B</span><span class="params">()</span>&#123;</span><br><span class="line">        mapper.saveStudent(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;ZZZDC&quot;</span>));</span><br><span class="line">        transaction4Service.C();</span><br><span class="line">        <span class="comment">// int zdc = 1/0; //如发生异常用此替代</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Transaction4ServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">Transaction4Service</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired(required = false)</span></span><br><span class="line">    <span class="keyword">private</span> StudentMapper mapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span> <span class="comment">//传播行为会在这里操作</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">C</span><span class="params">()</span> &#123;</span><br><span class="line">        mapper.saveStudent(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;ZDDDC&quot;</span>));</span><br><span class="line">        <span class="comment">//int zdc = 1/0;  如发生异常用此替代</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">链接：https:<span class="comment">//juejin.cn/post/7032652904498462751</span></span><br><span class="line">来源：稀土掘金</span><br></pre></td></tr></table></figure><table><thead><tr><th>传播行为</th><th>本文中的解释</th></tr></thead><tbody><tr><td>REQUIRED</td><td>如果 B 存在事务,则 C 加入该事务<code>(如果发生异常,则BC一起回滚)</code>;如果 B 不存在事务,则 C 创建一个新的事务<code>(B不回滚,如果C发生异常则只有C部分回滚)</code></td></tr><tr><td>SUPPORTS</td><td>如果 B 存在事务,则 C 加入该事务<code>(如果发生异常,则BC一起回滚)</code>;如果 B 不存在事务,则 C 以非事务的方式继续运行<code>(BC任何情况都不回滚)</code></td></tr><tr><td>MANDATORY</td><td>如果 B 存在事务,则 C 加入该事务<code>(如果发生异常,则一起回滚)</code>;如果 B 不存在事务,则 C 抛出异常.<code>(C直接报错,无事务B不回滚)</code></td></tr><tr><td>REQUIRES_NEW</td><td>如果 B 不存在事务,C 重新创建一个新的事务<code>(无事务B发生异常不回滚,有事C发生异常则C回滚)</code>;如果 B 存在事务,C 挂起 B 得事务并重新创建一个新的事务<code>(这是两个事务,自己部分有异常,则自己部分回滚)</code></td></tr><tr><td>NOT_SUPPORTED</td><td>如果 B 不存在事务,C 以非事务的方式运行<code>(任何情况都不回滚)</code>;如果 B 存在事务,C 暂停当前的事务并以非事务的方式运行<code>(B部分报错,则B部分回滚,C不回滚;非事务C部分报错,则都不会回滚)</code></td></tr><tr><td>NEVER</td><td>如果 B 不存在事务,C 以非事务的方式运行<code>(任何情况都不回滚)</code>,如果 B 存在事务,C 则抛出异常<code>(C报错,B因为异常回滚)</code></td></tr><tr><td>NESTED</td><td>和 REQUIRED 效果一样.</td></tr></tbody></table><p>作者：我也不会呀<br>链接：<a href="https://juejin.cn/post/7032652904498462751">https://juejin.cn/post/7032652904498462751</a><br>来源：稀土掘金<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> 事务的传播行为以及在spring中的配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用注解和拦截器实现登录验证</title>
      <link href="/posts/38014.html"/>
      <url>/posts/38014.html</url>
      
        <content type="html"><![CDATA[<h3 id="1、-LoginRequired-注解"><a href="#1、-LoginRequired-注解" class="headerlink" title="1、@LoginRequired 注解"></a>1、@LoginRequired 注解</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在需要登录验证的Controller的方法上使用此注解</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> LoginRequired &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、MyControllerAdvice"><a href="#2、MyControllerAdvice" class="headerlink" title="2、MyControllerAdvice"></a>2、MyControllerAdvice</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyControllerAdvice</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(TokenValidationException.class)</span></span><br><span class="line">    <span class="keyword">public</span> JsonResponse <span class="title function_">tokenValidationExceptionHandler</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> JsonResponse.loginInvalid();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(ServiceException.class)</span></span><br><span class="line">    <span class="keyword">public</span> JsonResponse <span class="title function_">serviceExceptionHandler</span><span class="params">(ServiceException se)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> JsonResponse.fail(se.getMsg());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> JsonResponse <span class="title function_">exceptionHandler</span><span class="params">(Exception e)</span> &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> JsonResponse.fail(e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、AuthenticationInterceptor"><a href="#3、AuthenticationInterceptor" class="headerlink" title="3、AuthenticationInterceptor"></a>3、AuthenticationInterceptor</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthenticationInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CURRENT_USER</span> <span class="operator">=</span> <span class="string">&quot;user&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> &#123;</span><br><span class="line">        <span class="comment">// 如果不是映射到方法直接通过</span></span><br><span class="line">        <span class="keyword">if</span> (!(handler <span class="keyword">instanceof</span> HandlerMethod)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">HandlerMethod</span> <span class="variable">handlerMethod</span> <span class="operator">=</span> (HandlerMethod) handler;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> handlerMethod.getMethod();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断接口是否有@LoginRequired注解, 有则需要登录</span></span><br><span class="line">        <span class="type">LoginRequired</span> <span class="variable">methodAnnotation</span> <span class="operator">=</span> method.getAnnotation(LoginRequired.class);</span><br><span class="line">        <span class="keyword">if</span> (methodAnnotation != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 验证token</span></span><br><span class="line">            <span class="type">Integer</span> <span class="variable">userId</span> <span class="operator">=</span> JwtUtil.verifyToken(request);</span><br><span class="line">            <span class="type">PLUser</span> <span class="variable">plUser</span> <span class="operator">=</span> userService.selectByPrimaryKey(userId);</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">null</span> == plUser) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;用户不存在，请重新登录&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            request.setAttribute(CURRENT_USER, plUser);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、JwtUtil"><a href="#4、JwtUtil" class="headerlink" title="4、JwtUtil"></a>4、JwtUtil</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">EXPIRATION_TIME</span> <span class="operator">=</span> <span class="number">2592_000_000L</span>; <span class="comment">// 有效期30天</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SECRET</span> <span class="operator">=</span> <span class="string">&quot;pl_token_secret&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">HEADER</span> <span class="operator">=</span> <span class="string">&quot;token&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">USER_ID</span> <span class="operator">=</span> <span class="string">&quot;userId&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据userId生成token</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">generateToken</span><span class="params">(String userId)</span> &#123;</span><br><span class="line">    HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(USER_ID, userId);</span><br><span class="line">    <span class="type">String</span> <span class="variable">jwt</span> <span class="operator">=</span> Jwts.builder()</span><br><span class="line">            .setClaims(map)</span><br><span class="line">            .setExpiration(<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis() + EXPIRATION_TIME))</span><br><span class="line">            .signWith(SignatureAlgorithm.HS512, SECRET)</span><br><span class="line">            .compact();</span><br><span class="line">    <span class="keyword">return</span> jwt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 验证token</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 验证通过返回userId</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title function_">verifyToken</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(HEADER);</span><br><span class="line">    <span class="keyword">if</span> (token != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Map&lt;String, Object&gt; body = Jwts.parser()</span><br><span class="line">                    .setSigningKey(SECRET)</span><br><span class="line">                    .parseClaimsJws(token)</span><br><span class="line">                    .getBody();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (Map.Entry entry : body.entrySet()) &#123;</span><br><span class="line">                <span class="type">Object</span> <span class="variable">key</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">                <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">                <span class="keyword">if</span> (key.toString().equals(USER_ID)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> Integer.valueOf(value.toString());<span class="comment">// userId</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(e.getMessage());</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TokenValidationException</span>(<span class="string">&quot;unauthorized&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TokenValidationException</span>(<span class="string">&quot;missing token&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> 使用注解和拦截器实现登录验证 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用poi导出带有数据的模版</title>
      <link href="/posts/46835.html"/>
      <url>/posts/46835.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">downloadLjcjImportTemplate</span><span class="params">(String xianbie, String xingbie, HttpServletResponse response)</span> &#123;</span><br><span class="line">  <span class="comment">// 设置返回头</span></span><br><span class="line">  response.setHeader(</span><br><span class="line">    <span class="string">&quot;Content-disposition&quot;</span>,</span><br><span class="line">    <span class="string">&quot;attachment;filename=&quot;</span></span><br><span class="line">    + <span class="keyword">new</span> <span class="title class_">String</span>((<span class="string">&quot;路基u型槽沉降模版.xlsx&quot;</span>).getBytes(StandardCharsets.UTF_8), StandardCharsets.ISO_8859_1));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 从库里查询数据</span></span><br><span class="line">  QueryWrapper&lt;TTzCjDmjcd&gt; qw = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">  qw.eq(<span class="string">&quot;xianbie&quot;</span>, xianbie);</span><br><span class="line">  qw.eq(<span class="string">&quot;xingbie&quot;</span>, xingbie);</span><br><span class="line">  qw.eq(<span class="string">&quot;jcd_lx&quot;</span>, <span class="string">&quot;6&quot;</span>);</span><br><span class="line">  qw.orderByAsc(<span class="string">&quot;jcd_lc&quot;</span>);</span><br><span class="line">  List&lt;TTzCjDmjcd&gt; exportList = dmjcdService.list(qw);</span><br><span class="line">  <span class="comment">// 利用模版文件的输入流创建Workbook对象</span></span><br><span class="line">  <span class="comment">// 同时获取响应流</span></span><br><span class="line">  <span class="keyword">try</span> (<span class="type">Workbook</span> <span class="variable">wb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XSSFWorkbook</span>(</span><br><span class="line">    Objects.requireNonNull(<span class="built_in">this</span>.getClass().getClassLoader().getResourceAsStream(<span class="string">&quot;template/ljuxccj.xlsx&quot;</span>)));</span><br><span class="line">       <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> response.getOutputStream()) &#123;</span><br><span class="line">    <span class="comment">// 对Workbook进行一些数据的写入</span></span><br><span class="line">    <span class="type">Sheet</span> <span class="variable">sheet</span> <span class="operator">=</span> wb.getSheetAt(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; exportList.size(); i++) &#123;</span><br><span class="line">      <span class="type">TTzCjDmjcd</span> <span class="variable">item</span> <span class="operator">=</span> exportList.get(i);</span><br><span class="line">      <span class="type">Row</span> <span class="variable">row</span> <span class="operator">=</span> sheet.createRow(i + <span class="number">1</span>);</span><br><span class="line">      <span class="type">Cell</span> <span class="variable">cell</span> <span class="operator">=</span> row.createCell(<span class="number">0</span>);</span><br><span class="line">      cell.setCellValue(item.getJcdBh());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将workbook写入到响应流</span></span><br><span class="line">    wb.write(out);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// controller层直接调用这个方法，不需要写额外的代码</span></span><br><span class="line"><span class="comment">// 前台通过window.location.href = controller层的地址的方式实现文件下载</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> 使用poi导出带有数据的模版 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>下载文件</title>
      <link href="/posts/41653.html"/>
      <url>/posts/41653.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/downLoadFile&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">downLoadLineStruImportTemplateFile</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="comment">// 创建缓冲区</span></span><br><span class="line">    <span class="type">byte</span> buffer[] = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];<span class="comment">// 缓冲区大小1k</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 重点就是获取输入流和输出流，还有设置请求头</span></span><br><span class="line">    <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getClassLoader().getResourceAsStream(<span class="string">&quot;template/lineStruImportTemplate.xlsx&quot;</span>);</span><br><span class="line">         <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> response.getOutputStream()) &#123;</span><br><span class="line">        <span class="comment">// 设置头部信息</span></span><br><span class="line">        response.setHeader(</span><br><span class="line">            <span class="string">&quot;Content-disposition&quot;</span>,</span><br><span class="line">            <span class="string">&quot;attachment;filename=&quot;</span></span><br><span class="line">            + <span class="keyword">new</span> <span class="title class_">String</span>((<span class="string">&quot;线路结构导入模板.xlsx&quot;</span>).getBytes(StandardCharsets.UTF_8), StandardCharsets.ISO_8859_1));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//循环将输入流中的内容读取到缓冲区当中</span></span><br><span class="line">        <span class="keyword">while</span> ((len = in.read(buffer)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//输出缓冲区的内容到浏览器，实现文件下载</span></span><br><span class="line">            out.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> 下载文件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态加载服务器上的图片</title>
      <link href="/posts/8682.html"/>
      <url>/posts/8682.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/loadImg?path=&#x27;xxx&#x27;&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * IO流读取存在服务器上的图片</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/loadImg&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">loadImg</span><span class="params">(<span class="meta">@RequestParam(&quot;path&quot;)</span> String path, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//这里省略掉通过id去读取图片的步骤。</span></span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path);<span class="comment">//imgPath为服务器图片地址</span></span><br><span class="line">    <span class="keyword">if</span> (file.exists() &amp;&amp; file.isFile()) &#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            in = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">            out = response.getOutputStream();</span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span> * <span class="number">8</span>];<span class="comment">// 一次读取1k</span></span><br><span class="line">            <span class="keyword">while</span> ((count = in.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                out.write(buffer, <span class="number">0</span>, count);</span><br><span class="line">                out.flush();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (in != <span class="literal">null</span>) &#123;</span><br><span class="line">                in.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (out != <span class="literal">null</span>) &#123;</span><br><span class="line">                out.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> 动态加载服务器上的图片 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>整合druid不支持批量更新的问题</title>
      <link href="/posts/741.html"/>
      <url>/posts/741.html</url>
      
        <content type="html"><![CDATA[<p>轻骑兵的解决方式</p><p>注意 url 后面多了个 allowMultiQueries&#x3D;true</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment">###################  mysql配置  ###################</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://123.123.122.138:3310/dtjc_sbgl_dev?autoReconnect=true&amp;rewriteBatchedStatements=true&amp;useUnicode=true&amp;characterEncoding=utf8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=false&amp;serverTimezone=GMT%2b8&amp;allowMultiQueries=true</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">123456a?</span></span><br><span class="line">    <span class="attr">db-name:</span> <span class="string">dtjc_sbgl_dev</span></span><br><span class="line">    <span class="attr">filters:</span> <span class="string">log4j,mergeStat</span></span><br><span class="line">    <span class="attr">driverClassName:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="comment">#支持批量更新重点就是这里</span></span><br><span class="line">    <span class="attr">filter:</span></span><br><span class="line">      <span class="attr">wall:</span></span><br><span class="line">        <span class="attr">config:</span></span><br><span class="line">          <span class="attr">multi-statement-allow:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><hr><p>网上搜到的解决方式</p><p>spring boot 集成 MyBatis，集成 Druid 批量更新报错，</p><p>原因：Druid 的防火墙配置(WallConfig)中变量 multiStatementAllow 默认为 false 解决方案：</p><p>开启 Druid 的防火墙配置(WallConfig)中变量 multiStatementAllow，把 WallConfig 中的 multiStatementAllow 设置为 true 即可</p><p>集成 Druid 时关于 DruidDataSource 配置如下:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataSourcesConfig</span> &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * druid初始化</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> SQLException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Primary</span> <span class="comment">//默认数据源 在同样的DataSource中，首先使用被标注的DataSource</span></span><br><span class="line"><span class="meta">@Bean(name = &quot;dataSource&quot;, destroyMethod = &quot;close&quot;)</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span></span><br><span class="line"><span class="keyword">public</span> DruidDataSource <span class="title function_">Construction</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">DruidDataSource</span> <span class="variable">datasource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// filter</span></span><br><span class="line">    List`&lt;Filter&gt;` filters = <span class="keyword">new</span> <span class="title class_">ArrayList</span> `&lt;Filter&gt;`();</span><br><span class="line">    <span class="type">WallFilter</span> <span class="variable">wallFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WallFilter</span>();</span><br><span class="line">    filters.add(wallFilter);</span><br><span class="line">    datasource.setProxyFilters(filters);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> datasource;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean(name = &quot;wallFilter&quot;)</span></span><br><span class="line"><span class="meta">@DependsOn(&quot;wallConfig&quot;)</span></span><br><span class="line"><span class="keyword">public</span> WallFilter <span class="title function_">wallFilter</span><span class="params">(WallConfig wallConfig)</span> &#123;</span><br><span class="line">    <span class="type">WallFilter</span> <span class="variable">wallFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WallFilter</span>();</span><br><span class="line">    wallFilter.setConfig(wallConfig);</span><br><span class="line">    <span class="keyword">return</span> wallFilter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean(name = &quot;wallConfig&quot;)</span></span><br><span class="line"><span class="keyword">public</span> WallConfig <span class="title function_">wallConfig</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">WallConfig</span> <span class="variable">wallConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WallConfig</span>();</span><br><span class="line">    wallConfig.setMultiStatementAllow(<span class="literal">true</span>);<span class="comment">//允许一次执行多条语句</span></span><br><span class="line">    wallConfig.setNoneBaseStatementAllow(<span class="literal">true</span>);<span class="comment">//允许一次执行多条语句</span></span><br><span class="line">    <span class="keyword">return</span> wallConfig;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后数据库连接后面需要加上 allowMultiQueries&#x3D;true,上面解决的是 Druid 的拦截， 而在数据库上的配置解决的是数据库服务层面的拦截。 url: jdbc:mysql:&#x2F;&#x2F;192.168.1.9:3306&#x2F;p?useUnicode&#x3D;true&amp;characterEncoding&#x3D;UTF-8&amp;allowMultiQueries&#x3D;true 到此结束。</p><hr><p>另外：</p><p>spring boot 开发环境下启动无异常，批量更新也成功了，但是在 tomcat 下运行启动会报错<br>异常提示如下：Unable to register WallConfig with key wallConfig; nested exception is InstanceAlreadyExistsException:com.alibaba.druid.wall:name&#x3D;wallConfig,type&#x3D;WallConfig</p><p>解决办法：在 SpringBoot 项目中配置文件加上 spring.jmx.enabled&#x3D;false</p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> 整合druid不支持批量更新的问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>检查文件是否存在</title>
      <link href="/posts/1906.html"/>
      <url>/posts/1906.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 下载文件,传入完成路径，先检查文件是否存在，如果存在就下载</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">path</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">downloadFileWithPath = <span class="keyword">function</span> (<span class="params">path</span>) &#123;</span><br><span class="line">  $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="title class_">Hussar</span>.<span class="property">ctxPath</span> + <span class="string">&#x27;/checkFileExist&#x27;</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    <span class="attr">async</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">      path</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">success</span>(<span class="params">res</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (res.<span class="property">code</span> === <span class="number">500</span>) &#123;</span><br><span class="line">        <span class="title class_">Hussar</span>.<span class="title function_">valid</span>(res.<span class="property">msg</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 如果文件存在，那么就下载文件</span></span><br><span class="line">      <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = <span class="string">&#x27;/downLoadFile?path=&#x27;</span> + path</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">error</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title class_">Hussar</span>.<span class="title function_">valid</span>(<span class="string">&#x27;查询文件资源失败&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查文件是否存在</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> path</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/checkFileExist&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">checkFileExist</span><span class="params">(String path)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path);</span><br><span class="line">        <span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (file.isDirectory()) &#123;</span><br><span class="line">                <span class="keyword">return</span> ReturnBodyUtil.returnError(<span class="string">&quot;下载所需的文件不存在&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> ReturnBodyUtil.returnSuccess(<span class="literal">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> ReturnBodyUtil.returnError(<span class="string">&quot;下载所需的文件不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">return</span> ReturnBodyUtil.returnError(<span class="string">&quot;查询文件路径失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> 检查文件是否存在 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>获取resouces下的文件的输入流InputStream</title>
      <link href="/posts/64112.html"/>
      <url>/posts/64112.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;/excel/1_20210709杭州地铁6号线平稳性_2021_08_28_005001_5S.xlsx&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里io流会自动关闭，无需加finally</span></span><br><span class="line"><span class="comment">// try (InputStream is = new FileInputStream(filePath)) &#123;// 读取绝对路径文件</span></span><br><span class="line"><span class="type">ClassPathResource</span> <span class="variable">classPathResource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(filePath);</span><br><span class="line"><span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> classPathResource.getInputStream()) &#123;<span class="comment">// 读取resources下文件方式1（适用于静态)</span></span><br><span class="line"><span class="comment">// try (InputStream is = this.getClass().getResourceAsStream(filePath)) &#123;// 读取相resources下文件方式2(不适用于静态)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ....流对象各种处理代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/zhangyuhannerv/picture-host-1/main/202110111450956.png" alt="图片加载失败，请确认您能连接到github"></p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> 获取resouces下的文件的输入流InputStream </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>获取相对路径下的配置文件信息</title>
      <link href="/posts/7685.html"/>
      <url>/posts/7685.html</url>
      
        <content type="html"><![CDATA[<p><strong>路径位置如下</strong><br><img src="https://raw.githubusercontent.com/zhangyuhannerv/picture-host-1/main/202111091739023.png" alt="github连接失败"></p><p><strong>配置文件信息</strong></p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">ureport.disableFileProvider</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">ureport.debug</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">ureport.disableHttpSessionReportCache</span>=<span class="string">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">ureport.fileStoreDir</span>=<span class="string">D:/hussar/hussar_v8/hussar-web/src/main/resources/ureportfiles/odms</span></span><br><span class="line"><span class="attr">filePath</span> = <span class="string">D:/DevelopKit/FILE</span></span><br><span class="line"><span class="attr">openOfficePath</span> = <span class="string">D:/Program Files (x86)/OpenOffice 4/program/soffice.exe -headless -accept=&quot;socket,host=127.0.0.1,port=8100;urp;&quot;</span></span><br><span class="line"><span class="attr">pdfPath</span> = <span class="string">D:/PDF/</span></span><br><span class="line"><span class="attr">fpPath</span> = <span class="string">D:/fenpian</span></span><br><span class="line"><span class="attr">pythonPath</span> = <span class="string">D:/pythoncode/</span></span><br><span class="line"><span class="attr">dataReaderName</span> = <span class="string">DWDataReaderLib64.dll</span></span><br></pre></td></tr></table></figure><p><strong>代码示例</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jxdinfo.hussar.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> PropertiesUtil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 获取文件的配置项, 返回配置文件对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Zhangyuhan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/11/9</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PropertiesUtil</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> getProperties();</span><br><span class="line">        System.out.println(properties.get(<span class="string">&quot;filePath&quot;</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Properties <span class="title function_">getProperties</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="comment">// 使用ClassLoader加载properties配置文件生成对应的输入流</span></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> PropertiesUtil.class.getClassLoader().getResourceAsStream(<span class="string">&quot;ureport.properties&quot;</span>);) &#123;</span><br><span class="line">            <span class="comment">// 使用properties对象加载输入流</span></span><br><span class="line">            properties.load(in);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> properties;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> 获取相对路径下的配置文件信息 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>openFeign的全方位简单讲解</title>
      <link href="/posts/52837.html"/>
      <url>/posts/52837.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/agonie201218/article/details/121154769">OpenFeign 全方位讲解_Young 丶的博客-CSDN 博客_openfeign</a></p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> SpringCloud </tag>
            
            <tag> openFeign的全方位简单讲解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速搭建v2ray</title>
      <link href="/posts/47358.html"/>
      <url>/posts/47358.html</url>
      
        <content type="html"><![CDATA[<h2 id="v2ray-一键脚本安装"><a href="#v2ray-一键脚本安装" class="headerlink" title="v2ray 一键脚本安装"></a>v2ray 一键脚本安装</h2><p>从下面脚本选择一个能用的</p><p>脚本 1</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash &lt;(curl -sL https://raw.githubusercontent.com/hijkpw/scripts/master/goV2.sh)</span><br></pre></td></tr></table></figure><p>脚本 2</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash &lt;(curl -s -L https://git.io/v2ray.sh)</span><br></pre></td></tr></table></figure><p>记住端口号和 UUID ，客户端配置的时候需要用到，当然，你也可以使用如下命令查看配置：</p><blockquote><p>cat &#x2F;etc&#x2F;v2ray&#x2F;config.json</p></blockquote><h2 id="使用-v2ray"><a href="#使用-v2ray" class="headerlink" title="使用 v2ray"></a>使用 v2ray</h2><h3 id="开启-v2ray"><a href="#开启-v2ray" class="headerlink" title="开启 v2ray"></a>开启 v2ray</h3><p>输入以下命令开启：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl enable v2ray</span><br><span class="line">systemctl start v2ray</span><br></pre></td></tr></table></figure><p>复制好你定义的 port 和 id，等会在客户端中使用。</p><h2 id="解决-v2ray-invalid-user-VMessAEAD-可"><a href="#解决-v2ray-invalid-user-VMessAEAD-可" class="headerlink" title="解决 v2ray invalid user: VMessAEAD 可"></a>解决 v2ray invalid user: VMessAEAD 可</h2><p>修改文件：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/systemd/system/v2ray.service</span><br></pre></td></tr></table></figure><p>将 Execstart 这一行改为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ExecStart=/usr/bin/env v2ray.vmess.aead.forced=false /usr/bin/v2ray/v2ray -config /etc/v2ray/config.json</span><br></pre></td></tr></table></figure><p>按下 <code>Esc</code> 然后输入 <code>:wq</code> 保存退出</p><h2 id="重启-v2ray："><a href="#重启-v2ray：" class="headerlink" title="重启 v2ray："></a>重启 v2ray：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart v2ray</span><br></pre></td></tr></table></figure><h1 id="客户端使用-v2ray"><a href="#客户端使用-v2ray" class="headerlink" title="客户端使用 v2ray"></a>客户端使用 v2ray</h1><h2 id="Windows-使用-v2ray"><a href="#Windows-使用-v2ray" class="headerlink" title="Windows 使用 v2ray"></a>Windows 使用 v2ray</h2><p>搭建好了之后可以在你的系统使用了，到 <a href="https://github.com/v2ray/v2ray-core/releases">v2ray 客户端下载</a> ，安装后填入你刚刚在服务器中得到的 ip、uuid、port 后开启运行即可。</p><h2 id="macos-使用-v2ray"><a href="#macos-使用-v2ray" class="headerlink" title="macos 使用 v2ray"></a>macos 使用 v2ray</h2><p>下载<a href="https://github.com/Cenmrev/V2RayX/releases">v2rayx</a>, 接着打开菜单下的 Config， 将填入你刚刚在服务器中得到的 ip、uuid、port 填入后开启运行即可。</p><h2 id="Linux-用户"><a href="#Linux-用户" class="headerlink" title="Linux 用户"></a>Linux 用户</h2><p>在客户端按照上述方法安装 v2ray ，安装完之后将 config.json 文件更改为上述的内容，将服务器的配置信息更改后运行即可。</p><p>配置如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;log&quot;: &#123;</span><br><span class="line">    &quot;loglevel&quot;: &quot;info&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;inbounds&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;port&quot;: 1080,</span><br><span class="line">      &quot;protocol&quot;: &quot;socks&quot;,</span><br><span class="line">      &quot;sniffing&quot;: &#123;</span><br><span class="line">        &quot;enabled&quot;: true,</span><br><span class="line">        &quot;destOverride&quot;: [</span><br><span class="line">          &quot;http&quot;,</span><br><span class="line">          &quot;tls&quot;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;settings&quot;: &#123;</span><br><span class="line">        &quot;udp&quot;: true</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;port&quot;: 8080,</span><br><span class="line">      &quot;protocol&quot;: &quot;http&quot;,</span><br><span class="line">      &quot;sniffing&quot;: &#123;</span><br><span class="line">        &quot;enabled&quot;: true,</span><br><span class="line">        &quot;destOverride&quot;: [</span><br><span class="line">          &quot;http&quot;,</span><br><span class="line">          &quot;tls&quot;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;outbounds&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;tag&quot;: &quot;proxy-vmess&quot;,</span><br><span class="line">      &quot;protocol&quot;: &quot;vmess&quot;,</span><br><span class="line">      &quot;settings&quot;: &#123;</span><br><span class="line">        &quot;vnext&quot;: [</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;address&quot;: &quot;你的服务器ip地址&quot;,</span><br><span class="line">            &quot;port&quot;: 你的v2ray端口,</span><br><span class="line">            &quot;users&quot;: [</span><br><span class="line">              &#123;</span><br><span class="line">                &quot;id&quot;: &quot;你的uuid&quot;,</span><br><span class="line">                &quot;alterId&quot;: 4</span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;tag&quot;: &quot;direct&quot;,</span><br><span class="line">      &quot;settings&quot;: &#123;&#125;,</span><br><span class="line">      &quot;protocol&quot;: &quot;freedom&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;dns&quot;: &#123;</span><br><span class="line">    &quot;server&quot;: [</span><br><span class="line">      &quot;8.8.8.8&quot;,</span><br><span class="line">      &quot;1.1.1.1&quot;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  &quot;routing&quot;: &#123;</span><br><span class="line">    &quot;domainStrategy&quot;: &quot;IPOnDemand&quot;,</span><br><span class="line">    &quot;rules&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;type&quot;: &quot;field&quot;,</span><br><span class="line">        &quot;outboundTag&quot;: &quot;proxy-vmess&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;type&quot;: &quot;field&quot;,</span><br><span class="line">        &quot;domain&quot;: [</span><br><span class="line">          &quot;geosite:cn&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;outboundTag&quot;: &quot;direct&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;type&quot;: &quot;field&quot;,</span><br><span class="line">        &quot;outboundTag&quot;: &quot;direct&quot;,</span><br><span class="line">        &quot;ip&quot;: [</span><br><span class="line">          &quot;geoip:cn&quot;,</span><br><span class="line">          &quot;geoip:private&quot;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="V2ray-相关"><a href="#V2ray-相关" class="headerlink" title="V2ray 相关"></a>V2ray 相关</h1><p>v2ray 官网</p><ul><li><a href="https://www.v2ray.com/">V2Ray 的使用手册</a></li></ul><p>v2ray GitHub</p><ul><li><a href="https://github.com/v2ray/v2ray-core">v2ray 源码</a></li></ul><p>V2Ray 客户端使用教程:</p><ul><li><a href="https://233v2.com/post/4/">https://233v2.com/post/4/</a></li></ul><p>客户端突然无法访问了</p><ul><li>解决：<a href="https://github.com/v2ray/v2ray-core/issues/1871">https://github.com/v2ray/v2ray-core/issues/1871</a><br>（更换端口）</li></ul><p>v2ray 常用命令</p><p><code>v2ray info</code> 查看 V2Ray 配置信息<br><code>v2ray config</code> 修改 V2Ray 配置<br><code>v2ray link</code> 生成 V2Ray 配置文件链接<br><code>v2ray infolink</code> 生成 V2Ray 配置信息链接<br><code>v2ray qr</code> 生成 V2Ray 配置二维码链接<br><code>v2ray ss</code> 修改 Shadowsocks 配置<br><code>v2ray ssinfo</code> 查看 Shadowsocks 配置信息<br><code>v2ray ssqr</code> 生成 Shadowsocks 配置二维码链接<br><code>v2ray status</code> 查看 V2Ray 运行状态<br><code>v2ray start</code> 启动 V2Ray<br><code>v2ray stop</code> 停止 V2Ray<br><code>v2ray restart</code> 重启 V2Ray<br><code>v2ray log</code> 查看 V2Ray 运行日志<br><code>v2ray update</code> 更新 V2Ray<br><code>v2ray update.sh</code> 更新 V2Ray 管理脚本<br><code>v2ray uninstall</code> 卸载 V2Ray</p><h1 id="我的-v2ray"><a href="#我的-v2ray" class="headerlink" title="我的 v2ray"></a>我的 v2ray</h1><p>hostwinds</p><p>地址 (Address) &#x3D; 104.168.141.120</p><p>端口 (Port) &#x3D; 35711</p><p>用户 ID (User ID &#x2F; UUID) &#x3D; cc20d153-fd09-4a4f-9d57-c3fe312469d6</p><p>额外 ID (Alter Id) &#x3D; 0</p><p>传输协议 (Network) &#x3D; tcp</p><p>伪装类型 (header type) &#x3D; none</p>]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
          <category> v2ray </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Life </tag>
            
            <tag> v2ray </tag>
            
            <tag> 快速搭建v2ray </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>toCost</title>
      <link href="/posts/13278.html"/>
      <url>/posts/13278.html</url>
      
        <content type="html"><![CDATA[<h2 id="每月支出项目"><a href="#每月支出项目" class="headerlink" title="每月支出项目"></a>每月支出项目</h2><ol><li>xgp 28¥</li><li>话费 33¥</li><li>理发 40¥</li><li>房租 1100¥</li></ol><h2 id="每年支出项目"><a href="#每年支出项目" class="headerlink" title="每年支出项目"></a>每年支出项目</h2><ol><li>vpn 55.82$</li></ol>]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
          <category> todo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Life </tag>
            
            <tag> todo </tag>
            
            <tag> toCost </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>toDo</title>
      <link href="/posts/49496.html"/>
      <url>/posts/49496.html</url>
      
        <content type="html"><![CDATA[<h2 id="20221114"><a href="#20221114" class="headerlink" title="20221114"></a>20221114</h2><ul><li><input disabled="" type="checkbox"> 整理 easyExcel 导入导出数据代码</li><li><input disabled="" type="checkbox"> 整理 RabbitTemplate 的 Api</li><li><input disabled="" type="checkbox"> 整理 RestTemplate 的 Api</li><li><input checked="" disabled="" type="checkbox"> 整理 FastJSON 的常用 api</li><li><input disabled="" type="checkbox"> 申请美版 paypal</li></ul><h2 id="20230105"><a href="#20230105" class="headerlink" title="20230105"></a>20230105</h2><ul><li><input checked="" disabled="" type="checkbox"> macbook 上记录大兴服务器密码</li><li><input checked="" disabled="" type="checkbox"> 记录&#x2F;转移广哥的最新 tomcat 项目</li><li><input checked="" disabled="" type="checkbox"> 正式&#x2F;测试城轨重新打安卓包。上传到服务器。重新生成二维码。替换掉旧有的二维码</li><li><input checked="" disabled="" type="checkbox"> 城轨代码替换 123 地址（注意查看视频播放逻辑）。重新打包。部署</li><li><input checked="" disabled="" type="checkbox"> 查看城轨 nginx 配置。看看是否有要改动的</li></ul><h2 id="20230106"><a href="#20230106" class="headerlink" title="20230106"></a>20230106</h2><ul><li><input checked="" disabled="" type="checkbox"> 城轨正式二维码不对</li><li><input checked="" disabled="" type="checkbox"> 研究 nginx 前端部署时访问后端的地址(还是我想的对。轻骑兵 md 有毛病)</li><li><input checked="" disabled="" type="checkbox"> xtsz_rwgl_rwxx，track_trackdata,kafka 消息入库</li></ul><h2 id="20230112"><a href="#20230112" class="headerlink" title="20230112"></a>20230112</h2><ul><li><input checked="" disabled="" type="checkbox"> 测试 windows 通过向日葵访问 mac</li><li><input checked="" disabled="" type="checkbox"> 房补承诺书带着按手印重新上传申请</li></ul><h3 id="20230301"><a href="#20230301" class="headerlink" title="20230301"></a>20230301</h3><ul><li><input checked="" disabled="" type="checkbox"> http 请求检查文件刷新广播</li><li><input checked="" disabled="" type="checkbox"> 读取文件 mile 为空与不为空的情况</li><li><input checked="" disabled="" type="checkbox"> 消息体 pojo</li><li><input checked="" disabled="" type="checkbox"> 在车辆跑之前打开页面，一直没有检测中，需要手动切换一次行别才能刷新的问题</li></ul>]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
          <category> todo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Life </tag>
            
            <tag> todo </tag>
            
            <tag> toDo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>toSee</title>
      <link href="/posts/30134.html"/>
      <url>/posts/30134.html</url>
      
        <content type="html"><![CDATA[<h2 id="20221114"><a href="#20221114" class="headerlink" title="20221114"></a>20221114</h2><ul><li><input disabled="" type="checkbox"> 学生会的一己之见</li><li><input checked="" disabled="" type="checkbox"> 只要长得可爱即使是变态你也喜欢吗</li><li><input disabled="" type="checkbox"> 夏日重现</li><li><input disabled="" type="checkbox"> 来自深渊</li><li><input checked="" disabled="" type="checkbox"> 孤独摇滚</li><li><input checked="" disabled="" type="checkbox"> 电锯人</li><li><input disabled="" type="checkbox"> 致不灭的你</li><li>[ ]</li></ul>]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
          <category> todo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Life </tag>
            
            <tag> todo </tag>
            
            <tag> toSee </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查看端口，查看进程，关闭进程</title>
      <link href="/posts/42434.html"/>
      <url>/posts/42434.html</url>
      
        <content type="html"><![CDATA[<p>以 8088 端口为例：</p><p><code>netstat  -aon|findstr &quot;8088&quot;</code></p><p>最后一列是 pid。假设为 5544</p><p>然后根据 pid 查询相应进程</p><p><code>tasklist|findstr &quot;5544&quot;</code></p><p>第一列是程序名称，假设为 java.exe</p><p>最后关闭进程</p><p><code>taskkill /f /t /im java.exe</code></p><p>直接使用命令关闭进程可能关不了，那么可以在任务管理器中直接找到该进程关闭。</p>]]></content>
      
      
      <categories>
          
          <category> Ops </category>
          
          <category> windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ops </tag>
            
            <tag> windows </tag>
            
            <tag> 查看端口，查看进程，关闭进程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反向代理后端项目并配置跨域</title>
      <link href="/posts/60598.html"/>
      <url>/posts/60598.html</url>
      
        <content type="html"><![CDATA[<p>后台服务占用端口为 9003，用本地的 9004 代理 9003 并且配置跨域</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">    listen 9004; ## nginx监听端口号</span><br><span class="line">    location / &#123;</span><br><span class="line">            proxy_pass http://127.0.0.1:9003;</span><br><span class="line">            # 允许 所有头部 所有域 所有方法</span><br><span class="line">            add_header &#x27;Access-Control-Allow-Origin&#x27; &#x27;*&#x27;;</span><br><span class="line">            add_header &#x27;Access-Control-Allow-Headers&#x27; &#x27;*&#x27;;</span><br><span class="line">            add_header &#x27;Access-Control-Allow-Methods&#x27; &#x27;*&#x27;;</span><br><span class="line">            # OPTIONS 直接返回204</span><br><span class="line">            if ($request_method = &#x27;OPTIONS&#x27;) &#123;</span><br><span class="line">                return 204;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Ops </category>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ops </tag>
            
            <tag> nginx </tag>
            
            <tag> 反向代理后端项目并配置跨域 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>根据端口直接关闭进程</title>
      <link href="/posts/64156.html"/>
      <url>/posts/64156.html</url>
      
        <content type="html"><![CDATA[<p>以 8088 端口为例：</p><p><code>netstat  -aon|findstr &quot;8088&quot;</code></p><p>最后一列是 pid。假设为 5544</p><p><code>taskkill /pid 5544 -t -f</code></p>]]></content>
      
      
      <categories>
          
          <category> Ops </category>
          
          <category> windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ops </tag>
            
            <tag> windows </tag>
            
            <tag> 根据端口直接关闭进程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开启gzip配置</title>
      <link href="/posts/2714.html"/>
      <url>/posts/2714.html</url>
      
        <content type="html"><![CDATA[<p>配置示例</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">        listen 9005; ## nginx监听端口号</span><br><span class="line"></span><br><span class="line">        #开启gzip</span><br><span class="line">        gzip  on;</span><br><span class="line">        #vary header支持，该选项可以让前端的缓存服务器缓存经过gzip压缩的页面</span><br><span class="line">        gzip_vary on;</span><br><span class="line">        #设置允许压缩的页面最小字节数，页面字节数从header头的Content-Length中获取，默认值是0，不管页面是多大都进行压缩，建议设置成大于1K，如果小于1K可能会越压越大</span><br><span class="line">        gzip_min_length 612k;</span><br><span class="line">        #压缩缓冲区大小，表示申请4个单位为16K的内存作为压缩结果的流缓存，默认值是申请与原始数据大小相同的内存空间来存储gzip压缩结果</span><br><span class="line">        gzip_buffers 128 128k;</span><br><span class="line">        #压缩比率，用来指定gzip压缩比， 1：压缩比最小，速度最快；9：压缩比最大，传输速度最快，但处理也最慢，也比较的消耗CPU资源</span><br><span class="line">        gzip_comp_level 9;</span><br><span class="line">        #用来指定压缩的类型，text/html 默认是会被压缩的，所以不指定也可以。</span><br><span class="line">        gzip_types text/plain text/javascript application/javascript application/x-javascript text/css  application/json  application/x-httpd-php image/jpeg image/png image/gif image/x-icon application/xml;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">                alias /usr/local/webserver/nginx/project/crtoms/;</span><br><span class="line">                index index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Ops </category>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ops </tag>
            
            <tag> nginx </tag>
            
            <tag> 开启gzip配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>收藏</title>
      <link href="/posts/13230.html"/>
      <url>/posts/13230.html</url>
      
        <content type="html"><![CDATA[<p>Nginx 一网打尽：动静分离、压缩、缓存、黑白名单、跨域、高可用、性能优化…<br><a href="https://mp.weixin.qq.com/s/YhFaKTg5ZbzM8mkhclUnvQ">https://mp.weixin.qq.com/s/YhFaKTg5ZbzM8mkhclUnvQ</a></p>]]></content>
      
      
      <categories>
          
          <category> Ops </category>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ops </tag>
            
            <tag> nginx </tag>
            
            <tag> 收藏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决单页面应用，刷新后出现404或者404的错误</title>
      <link href="/posts/12146.html"/>
      <url>/posts/12146.html</url>
      
        <content type="html"><![CDATA[<p>在 location 里加上 try_files $uri $uri&#x2F; &#x2F;index.html;</p><p>具体配置如下：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       81;</span><br><span class="line">    server_name  project_mall;</span><br><span class="line"></span><br><span class="line">    #charset koi8-r;</span><br><span class="line"></span><br><span class="line">    #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">    root   study/project_mall;</span><br><span class="line">    index  index.html index.htm;</span><br><span class="line">    # 解决单页面应用刷新出现403或者404错误</span><br><span class="line">    try_files  $uri $uri/ /index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Ops </category>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ops </tag>
            
            <tag> nginx </tag>
            
            <tag> 解决单页面应用，刷新后出现404或者404的错误 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>部署前端项目</title>
      <link href="/posts/1561.html"/>
      <url>/posts/1561.html</url>
      
        <content type="html"><![CDATA[<p>前端项目存储位置<br>&#x2F;usr&#x2F;local&#x2F;webserver&#x2F;nginx&#x2F;project&#x2F;crtoms<br><img src="https://raw.githubusercontent.com/zhangyuhannerv/picture-host-1/main/20230105171729.png"></p><p>配置 1</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">        listen 9005; ## nginx监听端口号</span><br><span class="line">        location / &#123;</span><br><span class="line">                alias /usr/local/webserver/nginx/project/crtoms/;</span><br><span class="line">                index index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设服务器 ip 为 192.168.10.234<br>那么此时访问方式就是 http:192.168.10.234:9095&#x2F;</p><p>配置 2</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">        listen 9005; ## nginx监听端口号</span><br><span class="line">        location /crtoms &#123;</span><br><span class="line">                alias /usr/local/webserver/nginx/project/crtoms/;</span><br><span class="line">                index index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设服务器 ip 为 192.168.10.234<br>那么此时访问方式就是 http:192.168.10.234:9095&#x2F;crtoms</p><p>配置 3</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">        listen 9005; ## nginx监听端口号</span><br><span class="line">        location /crtoms &#123;</span><br><span class="line">                root /usr/local/webserver/nginx/project/;</span><br><span class="line">                index index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设服务器 ip 为 192.168.10.234<br>那么此时访问方式就是 http:192.168.10.234:9095&#x2F;crtoms</p><hr><p>alias 是一个目录别名的定义，root 则是上层目录的定义<br>alias 后面必须要用“&#x2F;”结束，否则会找不到文件的。而 root 则可有可无。</p>]]></content>
      
      
      <categories>
          
          <category> Ops </category>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ops </tag>
            
            <tag> nginx </tag>
            
            <tag> 部署前端项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置文件下载，开启文件浏览列表</title>
      <link href="/posts/47689.html"/>
      <url>/posts/47689.html</url>
      
        <content type="html"><![CDATA[<p>文件存储<br><img src="https://raw.githubusercontent.com/zhangyuhannerv/picture-host-1/main/20230105173803.png" alt="图片示意图"><br>配置文件</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        location /app &#123;</span><br><span class="line">            alias /usr/local/webserver/nginx/app/;</span><br><span class="line">            autoindex on;</span><br><span class="line">            #下面这个配置开不开启效果是一样的</span><br><span class="line">            #我还没发现有什么用</span><br><span class="line">            #建议先不加。</span><br><span class="line">            #猜测的应用场景：在网页上文件浏览时点击图片要求下载而不是预览就要打开下面的配置</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">default_type application/octet-stream;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>alias 指定虚拟目录</strong><br><strong>autoindex on;打开目录浏览功能</strong></p><p>假设服务器 ip 为 192.168.10.234<br>那么访问 192.168.10.234:80&#x2F;app&#x2F;cgjc.apk 就能直接下载文件<br>那么访问 192.168.10.234:80&#x2F;app&#x2F;cgjc-test.apk 就能直接下载文件</p><p>访问 192.168.10.234:80&#x2F;app&#x2F;，出现<br><img src="https://raw.githubusercontent.com/zhangyuhannerv/picture-host-1/main/20230105175652.png" alt="图片示意图"><br>点击文件进行下载</p>]]></content>
      
      
      <categories>
          
          <category> Ops </category>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ops </tag>
            
            <tag> nginx </tag>
            
            <tag> 配置文件下载，开启文件浏览列表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置视频播放</title>
      <link href="/posts/20491.html"/>
      <url>/posts/20491.html</url>
      
        <content type="html"><![CDATA[<p>前提：nginx 需要安装 mp4 模块<br>假设服务器 ip 为 192.168.10.234</p><h2 id="播放-mp4-视频"><a href="#播放-mp4-视频" class="headerlink" title="播放 mp4 视频"></a>播放 mp4 视频</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">       listen       80;</span><br><span class="line">       location /securityMp4 &#123;</span><br><span class="line">           alias /home/DevelopKit/FILE/securityFile/;</span><br><span class="line">           mp4;</span><br><span class="line">           mp4_buffer_size       1m;</span><br><span class="line">           mp4_max_buffer_size   2000m;</span><br><span class="line">           # mp4_limit_rate        on;</span><br><span class="line">           # mp4_limit_rate_after  30s;</span><br><span class="line">           limit_rate 260k;</span><br><span class="line">           limit_rate_after 3m;</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设存在文件&#x2F;home&#x2F;DevelopKit&#x2F;FILE&#x2F;securityFile&#x2F;a.mp4<br>那么访问 192.168.10.234:80&#x2F;securityMp4&#x2F;a.mp4 就能播放视频</p><h2 id="播放-ts-m3u8-视频"><a href="#播放-ts-m3u8-视频" class="headerlink" title="播放 ts-m3u8 视频"></a>播放 ts-m3u8 视频</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">       listen       80;</span><br><span class="line">       location /securityHls &#123;</span><br><span class="line">           alias /home/DevelopKit/FILE/securityFile/;</span><br><span class="line">           types &#123;</span><br><span class="line">               application/vnd.apple.mpegurl m3u8;</span><br><span class="line">               video/mp2t ts;</span><br><span class="line">           &#125;</span><br><span class="line">           add_header Cache-Control no-cache;</span><br><span class="line">           add_header &#x27;Access-Control-Allow-Origin&#x27; &#x27;*&#x27;;</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设存在文件&#x2F;home&#x2F;DevelopKit&#x2F;FILE&#x2F;securityFile&#x2F;test_0.ts<br>假设存在文件&#x2F;home&#x2F;DevelopKit&#x2F;FILE&#x2F;securityFile&#x2F;test_1.ts<br>假设存在文件&#x2F;home&#x2F;DevelopKit&#x2F;FILE&#x2F;securityFile&#x2F;test.m3u8<br>那么访问 192.168.10.234:80&#x2F;securityMp4&#x2F;test.m3u8 就能播放视频</p>]]></content>
      
      
      <categories>
          
          <category> Ops </category>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ops </tag>
            
            <tag> nginx </tag>
            
            <tag> 配置视频播放 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux修改jar包文件</title>
      <link href="/posts/28105.html"/>
      <url>/posts/28105.html</url>
      
        <content type="html"><![CDATA[<ol><li>使用 jar tvf jar 名称 | grep 目标文件名 查询出目标文件在 war 包中的目录</li><li>使用 jar xvf jar 名称 目标文件名(copy 上面查出的全路径) 将目标文件及所在 war 包中的目录解压到当前路径</li><li>修改目标文件的内容，或者将要新的目标文件替换掉提取出来的目标文件</li><li>使用 jar uvf jar 名称 目标文件名（和步骤（2）中的目标文件名相同） 将新目标文件替换到 jar 包中</li></ol><h3 id="1、具体"><a href="#1、具体" class="headerlink" title="1、具体"></a>1、具体</h3><p>这里以 blog.jar 为例进行操作</p><p>1、首先，查找你需要修改的文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jar tvf blog-0.0.1-SNAPSHOT.jar | grep _fragments.html</span><br></pre></td></tr></table></figure><p>2、解压文件到当前目录（会是个文件夹，但是不用管文件夹的其他文件，只找我们要改的文件）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jar -xvf blog-0.0.1-SNAPSHOT.jar BOOT-INF/classes/templates/_fragments.html</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/14d118a7e11c40d9a0b88aff09ffee04.png" alt="在这里插入图片描述"></p><p>3、如果你有替换的文件就直接替换，没有则修改你需要修改的部分</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim _fragments.html</span><br><span class="line">cp 文件 目标文件</span><br></pre></td></tr></table></figure><p>4、将修改的新文件替换到 jar 包中</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jar -uvf blog-0.0.1-SNAPSHOT.jar BOOT-INF/classes/templates/_fragments.html</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/66bc44fe8ddd4799bf0e089af5676142.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> Ops </category>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ops </tag>
            
            <tag> JAVA </tag>
            
            <tag> linux修改jar包文件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>部署java项目</title>
      <link href="/posts/26055.html"/>
      <url>/posts/26055.html</url>
      
        <content type="html"><![CDATA[<p>将运行的 jar 错误日志信息输出到 log.file 文件中，然后（&gt;&amp;1）就是继续输出到标准输出(前面加的&amp;，是为了让系统识别是标准输出)，最后一个&amp;,表示在后台运行。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nohup java -jar 包名.jar  &gt; log.file  2&gt;&amp;1 &amp;</span><br><span class="line">[1] 669 #669表示运行的pid</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Ops </category>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ops </tag>
            
            <tag> JAVA </tag>
            
            <tag> 部署java项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在.gitignore中添加新的规则对已经被git管理了的文件不生效的解决办法</title>
      <link href="/posts/25743.html"/>
      <url>/posts/25743.html</url>
      
        <content type="html"><![CDATA[<p><strong>解决办法：清理下 git 缓存即可</strong><br>执行以下命令</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">删除git缓存</span></span><br><span class="line">git rm -r --cached .</span><br><span class="line">git add .</span><br><span class="line">git commit -m &#x27;update .gitignore&#x27;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Arc </category>
          
          <category> git </category>
          
          <category> general </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Arc </tag>
            
            <tag> git </tag>
            
            <tag> general </tag>
            
            <tag> 在.gitignore中添加新的规则对已经被git管理了的文件不生效的解决办法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github高级搜索</title>
      <link href="/posts/56030.html"/>
      <url>/posts/56030.html</url>
      
        <content type="html"><![CDATA[<h2 id="github-搜索自己想要的项目-并添加更加详细的描述"><a href="#github-搜索自己想要的项目-并添加更加详细的描述" class="headerlink" title="github 搜索自己想要的项目,并添加更加详细的描述"></a>github 搜索自己想要的项目,并添加更加详细的描述</h2><p>github 上搜索的例子</p><p><code>in:name springboot forks:&gt;4000 language:java stars:&gt;4000 pushed:&gt;2020-01-01</code></p><p><code>in:readme springboot mybatis forks:&gt;4000 language:java stars:&gt;4000 pushed:&gt;2020-10-01</code></p><p>关键词</p><p><code>in:name xxx</code></p><p><code>in:description xxx</code></p><p><code>in:readme xxx</code></p><p><code>starts:&gt;2000</code></p><p><code>fork:&gt;3000</code></p><p><code>size:&gt;=5000 注意：单位是k</code></p><p><code>pushed:&gt;2020-01-01</code></p><p><code>language:xxx</code></p><p><code>user:xxx</code></p><p>搜索的方式可以组合,叠加，用空格分开条件</p><p><a href="https://github.com/search/advanced">更多高级搜索</a></p>]]></content>
      
      
      <categories>
          
          <category> Arc </category>
          
          <category> git </category>
          
          <category> github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Arc </tag>
            
            <tag> git </tag>
            
            <tag> github </tag>
            
            <tag> github高级搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gitlab在服务器上的安装</title>
      <link href="/posts/14935.html"/>
      <url>/posts/14935.html</url>
      
        <content type="html"><![CDATA[<h1 id="阅前注意"><a href="#阅前注意" class="headerlink" title="阅前注意"></a>阅前注意</h1><p><strong>本文档对于 gitlab 仓库管理只适用于 http 协议。如需 ssh 协议。请自行百度生成和配置公钥和私钥</strong></p><p><strong>本文档适用于 linux 的发行版为 centos7。其他的发行版 ubuntu、debian 等请自行百度</strong></p><p><strong>本文档所有的图片的图床为 github。在无法连接 github 的情况下。图片将无法加载。但不影响正常的安装和部署</strong></p><p><strong>整理 by:张雨晗</strong> <strong>2020.7.20</strong></p><p><strong><a href="https://www.cnblogs.com/you-men/p/13126530.html">参考博客 1</a></strong></p><p><strong><a href="https://blog.csdn.net/qiushisoftware/article/details/112754180">参考博客 2</a></strong></p><p><strong><a href="https://blog.csdn.net/wangyy130/article/details/85633303">参考博客 3</a></strong></p><hr><h1 id="目录："><a href="#目录：" class="headerlink" title="目录："></a>目录：</h1><p>[TOC]</p><hr><h1 id="1-安装过程"><a href="#1-安装过程" class="headerlink" title="1.安装过程"></a>1.安装过程</h1><h2 id="1-下载-rpm-文件"><a href="#1-下载-rpm-文件" class="headerlink" title="1.下载 rpm 文件"></a>1.下载 rpm 文件</h2><p><a href="https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/">gitlab 的 rpm 包下载地址</a></p><p>ctrl+鼠标左键点击打开链接，下载最新的 rpm 包</p><p><img src="https://raw.githubusercontent.com/zhangyuhannerv/picture-host-1/main/20210719165359.png" alt="图片加载失败。请确认你能访问github"></p><h2 id="2-上传-rpm-文件。注意：linux-的运营规范里明确规定了第三方软件包放在-x2F-opt-x2F-文件夹下"><a href="#2-上传-rpm-文件。注意：linux-的运营规范里明确规定了第三方软件包放在-x2F-opt-x2F-文件夹下" class="headerlink" title="2.上传 rpm 文件。注意：linux 的运营规范里明确规定了第三方软件包放在&#x2F;opt&#x2F;文件夹下"></a>2.上传 rpm 文件。注意：linux 的运营规范里明确规定了第三方软件包放在&#x2F;opt&#x2F;文件夹下</h2><p>可以使用第三方工具。注意：xftp 禁用</p><p>也可以使用 win 下的 cmd 命令</p><p>示例</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp -P 221 D:\download\gitlab-ce-14.0.4-ce.0.el7.x86_64.rpm root@123.123.122.138:/opt/</span><br></pre></td></tr></table></figure><p>之后再输入访问的密码即可。</p><h2 id="3-安装"><a href="#3-安装" class="headerlink" title="3.安装"></a>3.安装</h2><h3 id="1-安装所需要的环境"><a href="#1-安装所需要的环境" class="headerlink" title="1.安装所需要的环境"></a>1.安装所需要的环境</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install policycoreutils-python</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install openssh-server</span><br></pre></td></tr></table></figure><h3 id="2-安装-gitlab"><a href="#2-安装-gitlab" class="headerlink" title="2.安装 gitlab"></a>2.安装 gitlab</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /opt</span><br></pre></td></tr></table></figure><p>安装时间较长。请耐心等待。中途除非报错。否则不要中断</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpm -ivh gitlab-ce-14.0.4-ce.0.el7.x86_64.rpm</span><br></pre></td></tr></table></figure><h3 id="3-修改配置文件"><a href="#3-修改配置文件" class="headerlink" title="3.修改配置文件"></a>3.修改配置文件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/gitlab/gitlab.rb</span><br></pre></td></tr></table></figure><p>按 G 跳到文件末尾</p><p>在文件末尾添加如下配置项</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">external_url</span> <span class="string">&#x27;http://123.123.122.138:8089&#x27;# gitlab服务器的url。同时也是使用git clone时的前缀</span></span><br><span class="line"><span class="attr">nginx[&#x27;listen_port&#x27;]</span> = <span class="string">8089# gitlab服务器监听的端口号。默认是80，但一般不用,因为会和nginx的默认端口冲突</span></span><br><span class="line"><span class="attr">gitlab_rails[&#x27;gitlab_email_enabled&#x27;]</span> = <span class="string">true</span></span><br><span class="line"><span class="attr">gitlab_rails[&#x27;gitlab_email_from&#x27;]</span> = <span class="string">&#x27;you_menz@163.com&#x27;</span></span><br><span class="line"><span class="attr">gitlab_rails[&#x27;gitlab_email_display_name&#x27;]</span> = <span class="string">&#x27;Admin&#x27;    # 待会邮箱收到邮件的发件人就是此处名字</span></span><br><span class="line"><span class="attr">gitlab_rails[&#x27;gitlab_email_reply_to&#x27;]</span> = <span class="string">&#x27;you_menz@163.com&#x27;</span></span><br><span class="line"><span class="attr">gitlab_rails[&#x27;gitlab_email_subject_suffix&#x27;]</span> = <span class="string">&#x27;gitlab[]&#x27;</span></span><br><span class="line"><span class="attr">gitlab_rails[&#x27;smtp_enable&#x27;]</span> = <span class="string">true</span></span><br><span class="line"><span class="attr">gitlab_rails[&#x27;smtp_address&#x27;]</span> = <span class="string">&quot;smtp.163.com&quot;</span></span><br><span class="line"><span class="attr">gitlab_rails[&#x27;smtp_port&#x27;]</span> = <span class="string">25</span></span><br><span class="line"><span class="attr">gitlab_rails[&#x27;smtp_user_name&#x27;]</span> = <span class="string">&quot;you_menz@163.com&quot;</span></span><br><span class="line"><span class="attr">gitlab_rails[&#x27;smtp_password&#x27;]</span> = <span class="string">&quot;zhoujian22&quot;  # 此处密码是邮箱客户端的授权密码</span></span><br><span class="line"><span class="attr">gitlab_rails[&#x27;smtp_domain&#x27;]</span> = <span class="string">&quot;163.com&quot;</span></span><br><span class="line"><span class="attr">gitlab_rails[&#x27;smtp_authentication&#x27;]</span> = <span class="string">&quot;login&quot;</span></span><br><span class="line"><span class="attr">gitlab_rails[&#x27;smtp_enable_starttls_auto&#x27;]</span> = <span class="string">true</span></span><br><span class="line"><span class="attr">gitlab_rails[&#x27;smtp_tls&#x27;]</span> = <span class="string">false</span></span><br></pre></td></tr></table></figure><p>保存退出</p><h3 id="4-运行启动"><a href="#4-运行启动" class="headerlink" title="4.运行启动"></a>4.运行启动</h3><p>确保关闭</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gitlab-ctl stop            #停止全部服务</span><br></pre></td></tr></table></figure><p>更新配置</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gitlab-ctl  reconfigure    #更新配置</span><br></pre></td></tr></table></figure><p>启动</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gitlab-ctl start           #启动全部服务</span><br></pre></td></tr></table></figure><p>每次更新 git-lab 配置。都要先停止全部服务，然后更改配置文件，然后更新配置，最后启动全部服务</p><h3 id="5-初始化-root-密码"><a href="#5-初始化-root-密码" class="headerlink" title="5.初始化 root 密码"></a>5.初始化 root 密码</h3><p>切换到 gitlab 下的 bin 目录</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /opt/gitlab/bin</span><br></pre></td></tr></table></figure><p>执行如下指令进入到 gitlab 的控制台（时间较长，请耐心等待)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gitlab-rails console</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/zhangyuhannerv/picture-host-1/main/20210719172042.png" alt="图片加载失败。请确认你能连接到github"></p><p>出现上述结果证明进入控制台成功</p><p>输入如下指令，查看所有用户</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">u=User.all</span><br></pre></td></tr></table></figure><p>执行如下指令切换到 root 用户</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">u=User.where(id:1).first</span><br></pre></td></tr></table></figure><p>输入如下指令，设置的 root 用户的密码，如“123456cb”</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">u.password=&#x27;123456a?&#x27;</span><br></pre></td></tr></table></figure><p>输入如下指令，确认密码</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">u.password_confirmation=&#x27;123456a?&#x27;</span><br></pre></td></tr></table></figure><p>执行如下指令，保存设置</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">u.save!</span><br></pre></td></tr></table></figure><p>如果返回结果为 true。输入 exit 退出。</p><p>至此。gitlab 初始化 root 密码结束</p><p>此时。即可输入 gitlab 的 ip:port 进行访问。</p><h1 id="2-gitlab-的-web-端的一些操作"><a href="#2-gitlab-的-web-端的一些操作" class="headerlink" title="2.gitlab 的 web 端的一些操作"></a>2.gitlab 的 web 端的一些操作</h1><h2 id="1-建立用户"><a href="#1-建立用户" class="headerlink" title="1.建立用户"></a>1.建立用户</h2><p>在安装的过程中已经重置了 root 的密码。</p><p>在 web 端使用 root 的账号和密码登陆。</p><p>点击左上角的 menu，在展开的下拉菜单中点击 admin。进入到管理者面板</p><p><img src="https://raw.githubusercontent.com/zhangyuhannerv/picture-host-1/main/20210720090423.png" alt="图片加载失败，请确认你能链接到github"></p><p>点击 user 区域的 view lastest users 能够进入到用户管理区</p><p><img src="https://raw.githubusercontent.com/zhangyuhannerv/picture-host-1/main/20210720090624.png" alt="图片加载失败，请确认你能链接到github"></p><p>点击 newUser 能够添加用户。可能新增的用户。无法直接为其设置密码。此时可以先设置姓名，用户名，邮箱等。保存并退出后再点击 edit 按钮即可手动指定新建用户的默认密码。</p><p><img src="https://raw.githubusercontent.com/zhangyuhannerv/picture-host-1/main/20210720090646.png" alt="图片加载失败，请确认你能链接到github"></p><p>注意：</p><ul><li>只有 root 账号才能建立用户。</li></ul><h2 id="2-建立项目"><a href="#2-建立项目" class="headerlink" title="2.建立项目"></a>2.建立项目</h2><p>建议 root 账号不要直接建立空白的项目，而是先建立各个项目的管理者账户（如 dtjc_root)，通过这些项目管理者账户去建立各自的项目。</p><p>建立项目无需特别说明。一切按照 web 端的提示正常一步一步执行。即可。</p><p>注意：</p><ul><li><p>如果是想先在 gitlab 建立空白项目，再把本地以有的项目 push 到空白项目。要保证 push 的用户具有 developer 之上的角色（developer 及之下的角色不行，push 会提示权限不足）</p></li><li><p>关于修改用户在某个项目的角色，请查看项目邀请成员的操作。</p></li></ul><h2 id="3-项目邀请成员"><a href="#3-项目邀请成员" class="headerlink" title="3.项目邀请成员"></a>3.项目邀请成员</h2><p>鼠标悬浮于右上角的 project information，点击弹出的菜单里的 members 选项即可邀请成员</p><p><img src="https://raw.githubusercontent.com/zhangyuhannerv/picture-host-1/main/20210720092603.png" alt="图片加载失败，请确认你能链接到github"></p><p>在 max role 列可以修改用户的角色。因为 Maintainer 相当于该项目的 root。所以建议一个项目最多两到三个 Maintainer 角色。</p><p><img src="https://raw.githubusercontent.com/zhangyuhannerv/picture-host-1/main/20210720093040.png" alt="图片加载失败，请确认你能链接到github"></p><h2 id="4-特别注意：取消-main-branch-protect"><a href="#4-特别注意：取消-main-branch-protect" class="headerlink" title="4.特别注意：取消 main branch protect"></a>4.特别注意：取消 main branch protect</h2><p>gitlab 默认对 main 分支提供保护。只有 Maintainer 才能对 main 分支执行 merge,push,pull 等操作。</p><p>如果希望 developer 也能对 main 执行开发中常见的 push,pull,fetch 等命令，需要手动取消 main 分支的保护</p><p>点击 settings 里的 Repositoy</p><p><img src="https://raw.githubusercontent.com/zhangyuhannerv/picture-host-1/main/20210720094409.png" alt="图片加载失败，请确认你能链接到github"></p><p>点击 protected branches 右侧的 expand 可以在展开的下拉框里看到一条默认的 main 分支保护规则。</p><p>不建议直接点击 Unprotected。直接取消该规则。</p><p>建议在 Allowed to merge 和 Allowed to push 里添加 developer 角色。</p><p><img src="https://raw.githubusercontent.com/zhangyuhannerv/picture-host-1/main/20210720094552.png" alt="图片加载失败，请确认你能链接到github"></p><hr><p><strong>以上就是 gitlab 的部署流程，及 web 端的一些使用说明和操作注意事项。</strong></p><p><strong>文档至此结束</strong></p>]]></content>
      
      
      <categories>
          
          <category> Arc </category>
          
          <category> git </category>
          
          <category> gitlab </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Arc </tag>
            
            <tag> git </tag>
            
            <tag> gitlab </tag>
            
            <tag> Gitlab在服务器上的安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用api总结</title>
      <link href="/posts/50126.html"/>
      <url>/posts/50126.html</url>
      
        <content type="html"><![CDATA[<p>XXXTemplate 是 Spring 的一大设计特色，其中，RedisTemplate 功能是提供对 Redis 的支持。</p><p>RedisTemplate 是 Spring Boot 访问 Redis 的核心组件，是 SpringBoot 集成 Redis 的客户端方式。它的底层通过 RedisConnectionFactory 对多种 Redis 驱动进行集成，上层通过 XXXOperations 提供丰富的 API，并结合 Spring 基于泛型的 bean 注入，未开发提供了极大的便利。</p><p>一、Redis 常用的数据类型<br>String：字符串类型，可以存储多种类型，如：字符串，JSON 串，二进制，序列化对象等；<br>Hash：key-value 结构，就像 Java 里的 Map，特别适合存储对象；<br>List：双端链表的结构，即可以作为栈，又可以作为队列，可以进行集合的头部或者尾部添加删除元素；<br>Set：Set 集合是 String 类型的无序集合，通过 hashtable 实现，可以对集合取交集，并集，差集；<br>Sorted set：是 String 类型的有序集合，并且，每个元素都会关联一个 double 类型的分数，Redis 通过分数可以为集合中的成员进行从小到大的排序。有序集合的成员是唯一的，但分数(score)却可以重复。<br>二、RedisTemplate 常用方法</p><p>String 类型</p><p>1.1 判断是否有 key 所对应的值，有则返回 true，没有则返回 false；</p><p>redisTemplate.hasKey(key);<br>1.2 有则取出 key 值所对应的值；</p><p>redisTemplate.opsForValue().get(key);<br>1.3 删除单个 key 值；</p><p>redisTemplate.delete(key);<br>1.4 批量删除 key；</p><p>redisTemplate.delete(keys); &#x2F;&#x2F;其中 keys:Collection<K> keys<br>1.5 将当前传入的 key 值序列化为 byte[]类型；</p><p>redisTemplate.dump(key);<br>1.6 设置过期时间；</p><p>Boolean redisTemplate.expire(key, timeout, unit); &#x2F;&#x2F; 多久以后过期</p><p>Boolean redisTemplate.expireAt(key, date); &#x2F;&#x2F; Date date 具体过期时间<br>1.7 查找匹配的 key 值，返回一个 Set 集合类型（ * 代表查询所有）；</p><p>Set<String> redisTemplate.keys(pattern); &#x2F;&#x2F; pattern 为正则表达式<br>1.8 修改 redis 中 key 的名称；</p><p>void redisTemplate.rename(oldKey, newKey);</p><p>&#x2F;&#x2F; 如果旧值存在时，将旧值改为新值<br>Boolean redisTemplate.renameIfAbsent(oldKey, newKey);<br>1.9 返回传入 key 所存储的值的类型；</p><p>DataType redisTemplate.type(key);<br>1.10 从 redis 中随机取出一个 key；</p><p>redisTemplate.randomKey();<br>1.11 返回当前 key 所对应的剩余过期时间；</p><p>Long redisTemplate.getExpire(key);</p><p>&#x2F;&#x2F; TimeUnit unit 指定返回的时间的单位<br>Long redisTemplate.getExpire(key, unit);<br>1.12 将 key 持久化保存；</p><p>Boolean redisTemplate.persist(key);<br>1.13 将当前数据库的 key 移动到指定 redis 中数据库当中；</p><p>Boolean redisTemplate.move(key, dbIndex);<br>1.14 设置当前的 key 以及 value 值；</p><p>redisTemplate.opsForValue().set(key, value);</p><p>&#x2F;&#x2F; 带过期时间 timeout，和时间单位 unit<br>redisTemplate.opsForValue().set(key, value, timeout, unit);<br>1.15 返回 key 中字符串 start~end 位置的子字符；</p><p>String redisTemplate.opsForValue().get(key, start, end);<br>1.16 将旧的 key 设置为 value，并且返回旧的 key；</p><p>String redisTemplate.opsForValue().getAndSet(key, value);<br>1.17 批量获取值；</p><p>List<String> redisTemplate.opsForValue().multiGet(keys); &#x2F;&#x2F; Collection<String> keys<br>1.18 在原有的值基础上新增字符串到末尾;</p><p>redisTemplate.opsForValue().append(key, value);<br>1.19 给 key 对应的 value 值进行自增（正值则自增，负值则自减），如果该 key 没有 value 值，则默认为 0；</p><p>Double redisTemplate.opsForValue().increment(key, increment); &#x2F;&#x2F; double increment</p><p>Long redisTemplate.opsForValue().increment(key, increment); &#x2F;&#x2F; long increment<br>1.20 如果对应的 map 集合名称不存在，则添加否则不做修改;</p><p>Map valueMap &#x3D; new HashMap();<br>valueMap.put(“valueMap1”,”map1”);<br>valueMap.put(“valueMap2”,”map2”);<br>valueMap.put(“valueMap3”,”map3”);<br>redisTemplate.opsForValue().multiSetIfAbsent(valueMap);<br>1.21 设置 map 集合到 redis;</p><p>Map valueMap &#x3D; new HashMap();<br>valueMap.put(“valueMap1”,”map1”);<br>valueMap.put(“valueMap2”,”map2”);<br>valueMap.put(“valueMap3”,”map3”);<br>redisTemplate.opsForValue().multiSet(valueMap);<br>1.22 获取字符串的长度；</p><p>redisTemplate.opsForValue().size(key);<br>1.23 用 value 参数覆写给定 key 所储存的字符串值，从偏移量 offset 开始；</p><p>redisTemplate.opsForValue().set(key, value, offset);<br>1.24 重新设置 key 对应的值，如果存在返回 false，否则返回 true;</p><p>redisTemplate.opsForValue().setIfAbsent(key, value);<br>1.25 将值 value 关联到 key，并将 key 的过期时间设为 timeout；</p><p>redisTemplate.opsForValue().set(key, value, timeout, unit);<br>1.26 对 key 所储存的字符串值，获取指定偏移量上的位(bit)；</p><p>redisTemplate.opsForValue().getBit(key, offset);<br>1.27 将二进制第 offset 位值变为 value；</p><p>redisTemplate.opsForValue().setBit(key, offset, value);</p><p>Hash 类型<br>2.1 以 map 集合的形式添加键值对；</p><p>redisTemplate.opsForHash().putAll(key, maps); &#x2F;&#x2F; Map&lt;String, String&gt; maps<br>2.2 获取变量中的键值对;</p><p>Map&lt;Object, Object&gt; redisTemplate.opsForHash().entries(key);<br>2.3 查看 hash 表中指定字段是否存在;</p><p>Boolean redisTemplate.opsForHash().hasKey(key, field);<br>2.4 获取变量中的指定 map 键是否有值,如果存在该 map 键则获取值，没有则返回 null；</p><p>redisTemplate.opsForHash().get(key, field);<br>2.5 新增 hashMap 值;</p><p>redisTemplate.opsForHash().put(key, hashKey, value);<br>2.6 仅当 hashKey 不存在时才设置;</p><p>Boolean redisTemplate.opsForHash().putIfAbsent(key, hashKey, value);<br>2.7 删除一个或者多个 hash 表字段;</p><p>Long redisTemplate.opsForHash().delete(key, fields); &#x2F;&#x2F; Object… fields<br>2.8 给哈希表 key 中的指定字段的整数值加上增量 increment；</p><p>public Double hIncrByDouble(String key, Object field, double delta) {<br>return redisTemplate.opsForHash().increment(key, field, delta);<br>}<br>public Long hashIncrBy(String key, Object field, long increment) {<br>return redisTemplate.opsForHash().increment(key, field, increment);<br>}<br>2.9 获取所有 hash 表中字段;</p><p>redisTemplate.opsForHash().keys(key);<br>2.10 获取 hash 表中字段的数量;</p><p>redisTemplate.opsForHash().size(key);<br>2.11 获取 hash 表中存在的多个值；</p><p>List<Object> redisTemplate.opsForHash().values(key);<br>2.12 匹配获取键值对，ScanOptions.NONE 为获取全部键对；</p><p>public Cursor&lt;Entry&lt;Object, Object&gt;&gt; hashScan(String key, ScanOptions options) {<br>return redisTemplate.opsForHash().scan(key, options);<br>}</p><p>List 类型<br>3.1 通过索引获取列表中的元素；</p><p>redisTemplate.opsForList().index(key, index);<br>3.2 获取列表指定范围内的元素(start 开始位置, 0 是开始位置，end 结束位置, -1 返回所有);</p><p>redisTemplate.opsForList().range(key, start, end);<br>3.3 存储在 list 的头部，即添加一个就把它放在最前面的索引处;</p><p>redisTemplate.opsForList().leftPush(key, value);<br>3.4 把多个值存入 List 中(value 可以是多个值，也可以是一个 Collection value);</p><p>redisTemplate.opsForList().leftPushAll(key, value);<br>3.5 List 存在的时候再加入;</p><p>redisTemplate.opsForList().leftPushIfPresent(key, value);<br>3.6 如果 pivot 处值存在则在 pivot 前面添加;</p><p>redisTemplate.opsForList().leftPush(key, pivot, value);<br>3.7 按照先进先出的顺序来添加(value 可以是多个值，或者是 Collection var2)；</p><p>redisTemplate.opsForList().rightPush(key, value);</p><p>redisTemplate.opsForList().rightPushAll(key, value);<br>3.8 在 pivot 元素的右边添加值;</p><p>redisTemplate.opsForList().rightPush(key, pivot, value);<br>3.9 设置指定索引处元素的值;</p><p>redisTemplate.opsForList().set(key, index, value);<br>3.10 移除并获取列表中第一个元素(如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止)；</p><p>redisTemplate.opsForList().leftPop(key);</p><p>redisTemplate.opsForList().leftPop(key, timeout, unit);<br>3.11 移除并获取列表最后一个元素；</p><p>redisTemplate.opsForList().rightPop(key);</p><p>redisTemplate.opsForList().rightPop(key, timeout, unit);<br>3.12 从一个队列的右边弹出一个元素并将这个元素放入另一个指定队列的最左边；</p><p>redisTemplate.opsForList().rightPopAndLeftPush(sourceKey, destinationKey);</p><p>redisTemplate.opsForList().rightPopAndLeftPush(sourceKey, destinationKey, timeout, unit);<br>3.13 删除集合中值等于 value 的元素(index&#x3D;0, 删除所有值等于 value 的元素; index&gt;0, 从头部开始删除第一个值等于 value 的元素; index&lt;0, 从尾部开始删除第一个值等于 value 的元素)；</p><p>redisTemplate.opsForList().remove(key, index, value);<br>3.14 将 List 列表进行剪裁；</p><p>redisTemplate.opsForList().trim(key, start, end);<br>3.15 获取当前 key 的 List 列表长度；</p><p>redisTemplate.opsForList().size(key);</p><p>Set 类型<br>4.1 添加元素；</p><p>redisTemplate.opsForSet().add(key, values);<br>4.2 移除元素(单个值、多个值)；</p><p>redisTemplate.opsForSet().remove(key, values);<br>4.3 删除并且返回一个随机的元素；</p><p>redisTemplate.opsForSet().pop(key);<br>4.4 获取集合的大小；</p><p>redisTemplate.opsForSet().size(key);<br>4.5 判断集合是否包含 value；</p><p>redisTemplate.opsForSet().isMember(key, value);<br>4.6 获取两个集合的交集(key 对应的无序集合与 otherKey 对应的无序集合求交集)；</p><p>redisTemplate.opsForSet().intersect(key, otherKey);<br>4.7 获取多个集合的交集(Collection var2)；</p><p>redisTemplate.opsForSet().intersect(key, otherKeys);<br>4.8 key 集合与 otherKey 集合的交集存储到 destKey 集合中(其中 otherKey 可以为单个值或者集合);</p><p>redisTemplate.opsForSet().intersectAndStore(key, otherKey, destKey);<br>4.9 key 集合与多个集合的交集存储到 destKey 无序集合中;</p><p>redisTemplate.opsForSet().intersectAndStore(key, otherKeys, destKey);<br>4.10 获取两个或者多个集合的并集(otherKeys 可以为单个值或者是集合);</p><p>redisTemplate.opsForSet().union(key, otherKeys);<br>4.11 key 集合与 otherKey 集合的并集存储到 destKey 中(otherKeys 可以为单个值或者是集合);</p><p>redisTemplate.opsForSet().unionAndStore(key, otherKey, destKey);<br>4.12 获取两个或者多个集合的差集(otherKeys 可以为单个值或者是集合);</p><p>redisTemplate.opsForSet().difference(key, otherKeys);<br>4.13 差集存储到 destKey 中(otherKeys 可以为单个值或者集合);</p><p>redisTemplate.opsForSet().differenceAndStore(key, otherKey, destKey);<br>4.14 随机获取集合中的一个&#x2F;count 个元素;</p><p>redisTemplate.opsForSet().randomMember(key);</p><p>&#x2F;&#x2F; 随机获取集合中 count 个元素<br>redisTemplate.opsForSet().randomMembers(key, count);<br>4.15 获取集合中的所有元素;</p><p>redisTemplate.opsForSet().members(key);<br>4.16 获取多个 key 无序集合中的元素（去重），count 表示个数;</p><p>redisTemplate.opsForSet().distinctRandomMembers(key, count);<br>4.17 遍历 set 类似于 Interator(ScanOptions.NONE 为显示所有的)；</p><p>redisTemplate.opsForSet().scan(key, options);</p><p>ZSet 类型<br>5.1 添加元素(有序集合是按照元素的 score 值由小到大进行排列)；</p><p>redisTemplate.opsForZSet().add(key, value, score);<br>5.2 删除对应的 value,value 可以为多个值；</p><p>redisTemplate.opsForZSet().remove(key, values);<br>5.3 增加元素的 score 值，并返回增加后的值；</p><p>redisTemplate.opsForZSet().incrementScore(key, value, delta);<br>5.4 返回元素在集合的排名,有序集合是按照元素的 score 值由小到大排列；</p><p>redisTemplate.opsForZSet().rank(key, value);<br>5.5 返回元素在集合的排名,按元素的 score 值由大到小排列；</p><p>redisTemplate.opsForZSet().reverseRank(key, value);<br>5.6 获取集合中给定区间的元素(start 开始位置，end 结束位置, -1 查询所有)；</p><p>redisTemplate.opsForZSet().reverseRangeWithScores(key, start,end);<br>5.7 按照分数范围升序输出名称；</p><p>rangebyscore key min max [withscores]<br>5.8 根据分数范围删除元素；</p><p>zremrangebyscore key min max [withscores]<br>5.9 按照分数范围降序输出名称；</p><p>redisTemplate.opsForZSet().reverseRangeByScore(key, min, max);</p><p>&#x2F;&#x2F;返回值为:Set&lt;ZSetOperations.TypedTuple<V>&gt;<br>redisTemplate.opsForZSet().reverseRangeByScoreWithScores(key, min, max);<br>5.10 从高到低的排序集中获取分数在最小和最大值之间的元素;</p><p>redisTemplate.opsForZSet().reverseRangeByScore(key, min, max, start, end);<br>5.11 根据 score 值获取集合元素数量;</p><p>redisTemplate.opsForZSet().count(key, min, max);<br>5.12 获取集合的大小;</p><p>redisTemplate.opsForZSet().size(key);</p><p>redisTemplate.opsForZSet().zCard(key);<br>5.13 获取集合中 key、value 元素对应的 score 值;</p><p>redisTemplate.opsForZSet().score(key, value);<br>5.14 移除指定索引位置处的成员;</p><p>redisTemplate.opsForZSet().removeRange(key, start, end);<br>5.15 移除指定 score 范围的集合成员;</p><p>redisTemplate.opsForZSet().removeRangeByScore(key, min, max);<br>5.16 获取 key 和 otherKey 的并集并存储在 destKey 中（其中 otherKeys 可以为单个字符串或者字符串集合）;</p><p>redisTemplate.opsForZSet().unionAndStore(key, otherKey, destKey);<br>5.17 获取 key 和 otherKey 的交集并存储在 destKey 中（其中 otherKeys 可以为单个字符串或者字符串集合）;</p><p>redisTemplate.opsForZSet().intersectAndStore(key, otherKey, destKey); 5.遍历集合（和 iterator 一模一样）</p><p>Cursor&lt;TypedTuple<Object>&gt; scan &#x3D; opsForZSet.scan(“test3”, ScanOptions.NONE);<br>while (scan.hasNext()){<br>ZSetOperations.TypedTuple<Object> item &#x3D; scan.next();<br>System.out.println(item.getValue() + “:” + item.getScore());<br>}</p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> redis </category>
          
          <category> ResidTemplate </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> redis </tag>
            
            <tag> ResidTemplate </tag>
            
            <tag> 常用api总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>批量删除特定前缀key</title>
      <link href="/posts/11739.html"/>
      <url>/posts/11739.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis-cli --scan --pattern &quot;ops-coffee-*&quot; | xargs -L 2000 redis-cli del</span><br></pre></td></tr></table></figure><p>其中 xargs -L 指令表示 xargs 一次读取的行数，也就是每次删除的 key 数量，一次读取太多 xargs 会报错</p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> redis </category>
          
          <category> redis-cli </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> redis </tag>
            
            <tag> redis-cli </tag>
            
            <tag> 批量删除特定前缀key </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>存储zset的写法</title>
      <link href="/posts/59400.html"/>
      <url>/posts/59400.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ZSetOperations</span> <span class="variable">zSetOperations</span> <span class="operator">=</span> redisTemplate.opsForZSet();</span><br><span class="line">Set&lt;ZSetOperations.TypedTuple&lt;Map&lt;String, Double&gt;&gt;&gt; tuples = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">cycleNum</span> <span class="operator">=</span> dataShowMapper.getTrackDynamicGeometryDataNum(csrwId, xb) / <span class="number">10000</span> + <span class="number">1</span>;<span class="comment">// 循环次数</span></span><br><span class="line"></span><br><span class="line"><span class="type">CountDownLatch</span> <span class="variable">countDownLanch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(cycleNum);</span><br><span class="line"></span><br><span class="line"><span class="type">ExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newFixedThreadPool(cycleNum &gt; <span class="number">4</span> ? <span class="number">4</span> : cycleNum);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; cycleNum; i++) &#123;</span><br><span class="line">  <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> i * <span class="number">10000</span>;</span><br><span class="line">  <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">10000</span>;</span><br><span class="line">  executor.execute(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        List&lt;Map&lt;String, Double&gt;&gt; dataListTemp = dataShowMapper.getWaveEchartsCorrectDataNoSparse(csrwId, xb, <span class="string">&quot;0&quot;</span>, <span class="string">&quot;0&quot;</span>, start, num);</span><br><span class="line">        <span class="keyword">for</span> (Map&lt;String, Double&gt; dataMap : dataListTemp) &#123;</span><br><span class="line">          ZSetOperations.TypedTuple&lt;Map&lt;String, Double&gt;&gt; typedTuple = <span class="keyword">new</span> <span class="title class_">DefaultTypedTuple</span>&lt;&gt;(dataMap, dataMap.get(<span class="string">&quot;kms&quot;</span>));</span><br><span class="line">          tuples.add(typedTuple);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        countDownLanch.countDown();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  countDownLanch.await();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">  e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">executor.shutdown();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (tuples.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">  zSetOperations.add(key, tuples);</span><br><span class="line">  redisTemplate.expire(key, <span class="number">3</span>, TimeUnit.HOURS);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> redis </category>
          
          <category> ResidTemplate </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> redis </tag>
            
            <tag> ResidTemplate </tag>
            
            <tag> 存储zset的写法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kafka生产者、消费者的消息可靠性方案实现</title>
      <link href="/posts/60348.html"/>
      <url>/posts/60348.html</url>
      
        <content type="html"><![CDATA[<p>以下代码基于 SpringKafka 2.3.13.RELEASE + Boot 2.2.9.RELEASE 实现</p><h1 id="Producer-消息的可靠性"><a href="#Producer-消息的可靠性" class="headerlink" title="Producer 消息的可靠性"></a>Producer 消息的可靠性</h1><p>实现方案：ack 模式调整 + 重试机制 + 规避重试机制下带来的问题</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.kafka:</span></span><br><span class="line"><span class="attr">producer:</span></span><br><span class="line">      <span class="comment">#这个参数可以是任意字符串，它是broker用来识别消息是来自哪个客户端的。在broker进行打印日志、衡量指标或者配额限制时会用到。</span></span><br><span class="line">      <span class="attr">clientId:</span> <span class="string">$&#123;spring.application.name&#125;</span> <span class="comment">#方便kafkaserver打印日志定位请求来源</span></span><br><span class="line">      <span class="attr">bootstrap-servers:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8080</span> <span class="comment">#kafka服务器地址，多个以逗号隔开</span></span><br><span class="line">      <span class="comment">#acks=0：生产者把消息发送到broker即认为成功，不等待broker的处理结果。这种方式的吞吐最高，但也是最容易丢失消息的。</span></span><br><span class="line">      <span class="comment">#acks=1：生产者会在该分区的leader写入消息并返回成功后，认为消息发送成功。如果群首写入消息失败，生产者会收到错误响应并进行重试。这种方式能够一定程度避免消息丢失，但如果leader宕机时该消息没有复制到其他副本，那么该消息还是会丢失。另外，如果我们使用同步方式来发送，延迟会比前一种方式大大增加（至少增加一个网络往返时间）；如果使用异步方式，应用感知不到延迟，吞吐量则会受异步正在发送中的数量限制。</span></span><br><span class="line">      <span class="comment">#acks=all：生产者会等待所有副本成功写入该消息，这种方式是最安全的，能够保证消息不丢失，但是延迟也是最大的。</span></span><br><span class="line">      <span class="attr">acks:</span> <span class="string">all</span> <span class="comment">#默认值：1</span></span><br><span class="line">      <span class="comment">#当生产者发送消息收到一个可恢复异常时，会进行重试，这个参数指定了重试的次数。在实际情况中，这个参数需要结合retry.backoff.ms来使用，建议总的重试时间比集群重新选举leader的时间长，这样可以避免生产者过早结束重试导致失败。</span></span><br><span class="line">      <span class="comment">#另外需注意，当开启重试时，若未设置max.in.flight.requests.per.connection=1，则可能出现发往同一个分区的两批消息的顺序出错，比如，第一批发送失败了，第二批成功了，然后第一批重试成功了，此时两者的顺序就颠倒了。</span></span><br><span class="line">      <span class="attr">retries:</span> <span class="number">2</span>  <span class="comment">#发送失败时重试多少次，0=禁用重试（默认值）</span></span><br><span class="line">      <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">retry-backoff-ms:</span> <span class="number">1000</span> <span class="comment">#重试等待间隔</span></span><br><span class="line">      <span class="comment">#默认情况下消息是不压缩的，此参数可指定采用何种算法压缩消息，可取值：none,snappy,gzip,lz4。snappy压缩算法由Google研发，这种算法在性能和压缩比取得比较好的平衡；相比之下，gzip消耗更多的CPU资源，但是压缩效果也是最好的。通过使用压缩，我们可以节省网络带宽和Kafka存储成本。</span></span><br><span class="line">      <span class="attr">compressionType:</span> <span class="string">&quot;none&quot;</span> <span class="comment">#如果不开启压缩，可设置为none（默认值），比较大的消息可开启。</span></span><br><span class="line">      <span class="comment">#当多条消息发送到一个分区时，Producer会进行批量发送，这个参数指定了批量消息大小的上限（以字节为单位）。当批量消息达到这个大小时，Producer会一起发送到broker；但即使没有达到这个大小，生产者也会有定时机制来发送消息，避免消息延迟过大。</span></span><br><span class="line">      <span class="attr">batch-size:</span> <span class="number">16384</span> <span class="comment">#默认16K，值越小延迟越低，但是吞吐量和性能会降低。0=禁用批量发送</span></span><br><span class="line">      <span class="comment">#这个参数设置Producer暂存待发送消息的缓冲区内存的大小，如果应用调用send方法的速度大于Producer发送的速度，那么调用会阻塞一定（max.block.ms）时间后抛出异常。</span></span><br><span class="line">      <span class="attr">buffer-memory:</span> <span class="number">33554432</span> <span class="comment">#缓冲区默认大小32M</span></span><br></pre></td></tr></table></figure><p>生产者：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">//该类需要为多列类型</span></span><br><span class="line"><span class="meta">@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProducerFuture</span> <span class="keyword">implements</span> <span class="title class_">FailureCallback</span>, SuccessCallback&lt;SendResult&lt;String, Object&gt;&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(ProducerFuture.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> KafkaTemplate&lt;String, Object&gt; kafkaTemplate;</span><br><span class="line">    <span class="keyword">private</span> String uniqueId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异步发送消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> topicLcs</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">async</span><span class="params">(String topicLcs, String value)</span> &#123;</span><br><span class="line">        uniqueId = MDC.get(<span class="string">&quot;UNIQUE_ID&quot;</span>);</span><br><span class="line">        logger.info(<span class="string">&quot;send &#123;&#125; data:&#123;&#125;&quot;</span>, topicLcs, value);</span><br><span class="line">        ListenableFuture&lt;SendResult&lt;String, Object&gt;&gt; listenableFuture = kafkaTemplate.send(topicLcs, value);</span><br><span class="line">        listenableFuture.addCallback(<span class="built_in">this</span>, <span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onFailure</span><span class="params">(Throwable ex)</span> &#123;</span><br><span class="line">        MDC.put(UNIQUE_ID, uniqueId);</span><br><span class="line">        <span class="comment">//重试策略失败后，将进入该方法。在该重试方法中，可以做其他响应的业务逻辑，如告警、投放其他队列或落地失败的消息内容等</span></span><br><span class="line">        logger.error(<span class="string">&quot;sendFailure:&quot;</span>, ex);</span><br><span class="line">        MDC.remove(UNIQUE_ID);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onSuccess</span><span class="params">(SendResult&lt;String, Object&gt; result)</span> &#123;</span><br><span class="line">        MDC.put(UNIQUE_ID, uniqueId);</span><br><span class="line">        logger.info(<span class="string">&quot;sendSuccess &#123;&#125; &quot;</span>, result.getRecordMetadata().topic() + result.getRecordMetadata().offset());</span><br><span class="line">        MDC.remove(UNIQUE_ID);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="启用重试机制后带来的问题"><a href="#启用重试机制后带来的问题" class="headerlink" title="启用重试机制后带来的问题"></a>启用重试机制后带来的问题</h2><ol><li>重试过程中，<strong>一条消息只会向同一个分区进行重试发送</strong>，所以在重试的机制下，也能保证消息的全局幂等性</li><li>由于重试，可能导致消息在 Node 中的顺序和 Producer 发送时的顺序不一致。可以对 max.in.flight.requests.per.connectio（限制每个连接（指客户端与 Node 之间的 per.connection 连接）最多缓存  <strong>已发送但未收到响应的请求数</strong>，默认为 5）设置为 1，即可保证在重试机制下的消息顺序。</li></ol><h1 id="Consumer-消息的可靠性"><a href="#Consumer-消息的可靠性" class="headerlink" title="Consumer 消息的可靠性"></a>Consumer 消息的可靠性</h1><p>实现方案：手动提交 offset + 重试机制 + 死信队列（告警） + 死信队列消息采用其他策略去处理消息</p><p><a href="https://so.csdn.net/so/search?q=kafka&spm=1001.2101.3001.7020">kafka</a>配置：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#kafka配置，更多配置请参考：KafkaProperties</span></span><br><span class="line"><span class="attr">spring.kafka:</span></span><br><span class="line">  <span class="comment">#消费者的配置，可参考：org.apache.kafka.clients.consumer.ConsumerConfig</span></span><br><span class="line">  <span class="attr">consumer:</span></span><br><span class="line">    <span class="comment">#暂不用提供clientId，2.x版本可放出来，1.x有多个topic且concurrency&gt;1会出现JMX注册时异常</span></span><br><span class="line">    <span class="comment">#clientId: $&#123;spring.application.name&#125; #方便kafkaserver打印日志定位请求来源</span></span><br><span class="line">    <span class="comment"># kafka集群</span></span><br><span class="line">    <span class="attr">bootstrap-servers:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8080</span> <span class="comment">#kafka服务器地址，多个以逗号隔开</span></span><br><span class="line">    <span class="comment">#指定了当消费者第一次读取分区或者无offset时拉取那个位置的消息，可以取值为latest（从最新的消息开始消费）,earliest（从最早的消息开始消费）,none（如果无offset就抛出异常）</span></span><br><span class="line">    <span class="attr">autoOffsetReset:</span> <span class="string">latest</span> <span class="comment">#默认值：latest</span></span><br><span class="line">    <span class="comment">#指定了消费者是否自动提交消费位移，默认为true。如果为true，你可能需要关注自动提交的时间间隔，该间隔由auto.commit.interval.ms设置。</span></span><br><span class="line">    <span class="attr">enable-auto-commit:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment">#周期性自动提交的间隔，单位毫秒</span></span><br><span class="line">    <span class="attr">auto-commit-interval:</span> <span class="number">2000</span> <span class="comment">#默认值：5000</span></span><br><span class="line">    <span class="comment">#参数允许消费者指定从broker读取消息时最小的Payload的字节数。当消费者从broker读取消息时，如果数据字节数小于这个阈值，broker会等待直到有足够的数据，然后才返回给消费者。对于写入量不高的主题来说，这个参数可以减少broker和消费者的压力，因为减少了往返的时间。而对于有大量消费者的主题来说，则可以明显减轻broker压力。</span></span><br><span class="line">    <span class="attr">fetchMinSize:</span> <span class="number">1</span> <span class="comment">#默认值： 1</span></span><br><span class="line">    <span class="comment">#上面的fetch.min.bytes参数指定了消费者读取的最小数据量，而这个参数则指定了消费者读取时最长等待时间，从而避免长时间阻塞。这个参数默认为500ms。</span></span><br><span class="line">    <span class="attr">fetchMaxWait:</span> <span class="number">500</span> <span class="comment">#默认值：500毫秒</span></span><br><span class="line">    <span class="comment">#这个参数控制一个poll()调用返回的记录数，即consumer每次批量拉多少条数据。</span></span><br><span class="line">    <span class="attr">maxPollRecords:</span> <span class="number">500</span> <span class="comment">#默认值：500</span></span><br></pre></td></tr></table></figure><p>配置类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Config</span> &#123;</span><br><span class="line">    <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(Config.class);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String error_topic=<span class="string">&quot;error_topic&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ConcurrentKafkaListenerContainerFactory <span class="title function_">listenerContainerFactory</span><span class="params">(ConsumerFactory consumerFactory, KafkaTemplate&lt;String,Object&gt; template)</span> &#123;</span><br><span class="line">        <span class="type">ConcurrentKafkaListenerContainerFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcurrentKafkaListenerContainerFactory</span>();</span><br><span class="line">        factory.setConsumerFactory(consumerFactory);</span><br><span class="line">        <span class="comment">// 最大重试次数5次，每次间隔5s(该配置需要参考 Broker.leader 切换的平均时间去设置)</span></span><br><span class="line">        <span class="type">SeekToCurrentErrorHandler</span> <span class="variable">seekToCurrentErrorHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SeekToCurrentErrorHandler</span>((consumerRecord, e) -&gt; &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;重试机制后异常，consumerRecord：&#123;&#125;&quot;</span>, consumerRecord.toString(), e);</span><br><span class="line">            <span class="comment">//做其他业务操作，如记录异常信息到表，发送信息到其他的队列人工核对处理等</span></span><br><span class="line">            template.send(error_topic,consumerRecord.toString());</span><br><span class="line">        &#125;, <span class="keyword">new</span> <span class="title class_">FixedBackOff</span>(<span class="number">5000</span>, <span class="number">5</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//       批量获取消息的时候，使用该方式</span></span><br><span class="line"><span class="comment">//        SeekToCurrentBatchErrorHandler batchErrorHandler = new SeekToCurrentBatchErrorHandler();</span></span><br><span class="line"></span><br><span class="line">        factory.setErrorHandler(seekToCurrentErrorHandler);</span><br><span class="line">        <span class="comment">//设置提交偏移量的方式 ,否则出现异常的时候, 会报错No Acknowledgment available as an argument, the listener container must have a MANUAL AckMode to populate the Acknowledgment.</span></span><br><span class="line">        factory.getContainerProperties().setAckMode(ContainerProperties.AckMode.MANUAL_IMMEDIATE);</span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消费者：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConsumerKafka</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(getClass());</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CONSUMER_GROUP_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;MOCK-A-GROUP&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@KafkaListener(topics = &#123;&quot;$&#123;kafka.topic.topic4Test&#125;&quot;&#125;, groupId = CONSUMER_GROUP_PREFIX, containerFactory = &quot;listenerContainerFactory&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onMessage</span><span class="params">(ConsumerRecord&lt;String,Object&gt; consumerRecord, Acknowledgment acknowledgeMode)</span> &#123;</span><br><span class="line"><span class="comment">//处理业务逻辑......</span></span><br><span class="line">        acknowledgeMode.acknowledge();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> kafka </category>
          
          <category> 与springboot的整合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> kafka </tag>
            
            <tag> 与springboot的整合 </tag>
            
            <tag> Kafka生产者、消费者的消息可靠性方案实现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于消费的同步异步问题，以及多个方法监听同一个topic</title>
      <link href="/posts/38173.html"/>
      <url>/posts/38173.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@KafkaListener(topics = &quot;test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">consumerTest1</span><span class="params">(String msg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    log.info(<span class="string">&quot;收到消息1：&quot;</span> + msg);</span><br><span class="line">    TimeUnit.MILLISECONDS.sleep(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@KafkaListener(topics = &quot;test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">consumerTest2</span><span class="params">(String msg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    log.info(<span class="string">&quot;收到消息2：&quot;</span> + msg);</span><br><span class="line">    TimeUnit.MILLISECONDS.sleep(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上所示<br>多个方法消费同一个 topic<br>那么，只会在一个方法中消费，不会两个方法都消费消息，即不会重复消费</p><p>同时当只有<code>consumerTest1()</code>方法时，如果手动阻塞线程，那么消息的消费也会变慢<br>即如果向 test 发送 500 条消息。执行过程是第一条消息，等 10ms，第二条消息，等 10ms…<br>结论：针对同一个 topic 消息的消费是同步的</p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> kafka </category>
          
          <category> 与springboot的整合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> kafka </tag>
            
            <tag> 与springboot的整合 </tag>
            
            <tag> 关于消费的同步异步问题，以及多个方法监听同一个topic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot中使用Quartz执行任务对象（job）中无法注入bean的问题</title>
      <link href="/posts/17422.html"/>
      <url>/posts/17422.html</url>
      
        <content type="html"><![CDATA[<p><strong>一、问题描述</strong><br>SpringBoot 整合  <a href="https://so.csdn.net/so/search?q=Quartz&spm=1001.2101.3001.7020">Quartz</a>  进行定时任务开发时，job 中注入业务 Service，使用 @Autowired 注解获取对象为 null ，执行时报空指针异常</p><p><strong>二、分析</strong><br>Spring 容器可以管理 Bean，但是 Quartz 的 job 是自己管理的，job 无法被容器识别，即使在自定义的 job 上面加上@Component 注解，依然无效，原因是  <strong>job 对象在 spring 容器加载的时候，能够注入 bean，但是在调度时，job 对象会重新创建，此时就导致了已经注入的对象丢失，因此报空指针异常</strong>。</p><p><strong>三、解决办法</strong></p><p>3.1 采用自定义静态工具类的方式，创建 AppContextUtil 类，实现 ApplicationContextAware 接口，此工具类会在 spring 容器启动后，自动加载，使用其提供的 Bean 方法获取想要的 bean 即可，代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContextAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 自定义静态工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppContextUtil</span> <span class="keyword">implements</span> <span class="title class_">ApplicationContextAware</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义静态ApplicationContext</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重写接口方法，该方法的参数为框架自动加载的IOC容器对象</span></span><br><span class="line"><span class="comment">     * 该方法在启动项目的时候会自动执行，前提是该类上有IOC相关注解，例如<span class="doctag">@Component</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> applicationContext IOC容器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> BeansException e</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="comment">//将框架加载的IOC赋值给全局静态IOC</span></span><br><span class="line">        AppContextUtil.applicationContext = applicationContext;</span><br><span class="line">        log.info(<span class="string">&quot;==================ApplicationContext加载-----------------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取 applicationContext</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ApplicationContext <span class="title function_">getApplicationContext</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过name获取Bean</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getBean</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  applicationContext.getBean(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过class获取Bean</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">getBean</span><span class="params">(Class&lt;T&gt; clazz)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  applicationContext.getBean(clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过name、Clazz返回指定Bean</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">getBean</span><span class="params">(String name,Class&lt;T&gt; clazz)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  applicationContext.getBean(name,clazz);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用方式如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ReminderConfigService</span> <span class="variable">reminderConfigService</span> <span class="operator">=</span> AppContextUtil.getBean(ReminderConfigService.class);</span><br></pre></td></tr></table></figure><p>3.2 使用<strong>ContextLoader</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExampleJob</span> <span class="keyword">extends</span> <span class="title class_">QuartzJobBean</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">executeInternal</span><span class="params">(JobExecutionContext context)</span> <span class="keyword">throws</span> JobExecutionException &#123;</span><br><span class="line">        <span class="type">WebApplicationContext</span> <span class="variable">a</span> <span class="operator">=</span> ContextLoader.getCurrentWebApplicationContext();</span><br><span class="line">        System.out.println(a.getBean(APIController.class));</span><br><span class="line">        System.out.println(a.containsBean(<span class="string">&quot;APIController&quot;</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.3 使用 SpringContextHolder（我在项目中使用的）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Log4j2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestJob</span> <span class="keyword">implements</span> <span class="title class_">BaseJob</span> &#123;</span><br><span class="line">    <span class="type">DtjhEndPoint</span> <span class="variable">dtjhEndPoint</span> <span class="operator">=</span> SpringContextHolder.getBean(DtjhEndPoint.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(JobExecutionContext jobExecutionContext)</span> <span class="keyword">throws</span> JobExecutionException &#123;</span><br><span class="line">        log.info(<span class="string">&quot;spring组件注入是否成功,&#123;&#125;&quot;</span>, dtjhEndPoint.getFilePath());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> quartz </category>
          
          <category> 常见问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> quartz </tag>
            
            <tag> 常见问题 </tag>
            
            <tag> SpringBoot中使用Quartz执行任务对象（job）中无法注入bean的问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>word转pdf</title>
      <link href="/posts/27144.html"/>
      <url>/posts/27144.html</url>
      
        <content type="html"><![CDATA[<ol><li>poi(慢，格式回出问题)</li><li>openOffice（单线程，不支持并发)</li><li>jacob(效果好，但是不支持 linux）</li><li>docx4j（没试过)</li><li>asposeword(效果好，块，但是付费)</li></ol>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
          <category> studyEveryday </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> Java </tag>
            
            <tag> studyEveryday </tag>
            
            <tag> word转pdf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>业务开发时，接口不能对外暴露的解决办法</title>
      <link href="/posts/24216.html"/>
      <url>/posts/24216.html</url>
      
        <content type="html"><![CDATA[<h1 id="业务开发时，接口不能对外暴露怎么办？"><a href="#业务开发时，接口不能对外暴露怎么办？" class="headerlink" title="业务开发时，接口不能对外暴露怎么办？"></a>业务开发时，接口不能对外暴露怎么办？</h1><p>内外网接口微服务隔离</p><ul><li>网关 + redis 实现白名单机制</li><li>方案三 网关 + AOP</li><li>具体实操</li></ul><hr><p>在业务开发的时候，经常会遇到某一个接口不能对外暴露，只能内网服务间调用的实际需求。面对这样的情况，我们该如何实现呢？今天，我们就来理一理这个问题，从几个可行的方案中，挑选一个来实现。</p><h2 id="1-内外网接口微服务隔离"><a href="#1-内外网接口微服务隔离" class="headerlink" title="1. 内外网接口微服务隔离"></a><strong><em>1. 内外网接口微服务隔离</em></strong></h2><p>将对外暴露的接口和对内暴露的接口分别放到两个微服务上，一个服务里所有的接口均对外暴露，另一个服务的接口只能内网服务间调用。</p><p>该方案需要额外编写一个只对内部暴露接口的微服务，将所有只能对内暴露的业务接口聚合到这个微服务里，通过这个聚合的微服务，分别去各个业务侧获取资源。</p><p>该方案，新增一个微服务做请求转发，增加了系统的复杂性，增大了调用耗时以及后期的维护成本。</p><h2 id="2-网关-redis-实现白名单机制"><a href="#2-网关-redis-实现白名单机制" class="headerlink" title="2. 网关 + redis 实现白名单机制"></a><strong><em>2. 网关 + redis 实现白名单机制</em></strong></h2><p>在 redis 里维护一套接口白名单列表，外部请求到达网关时，从 redis 获取接口白名单，在白名单内的接口放行，反之拒绝掉。</p><p>该方案的好处是，对业务代码零侵入，只需要维护好白名单列表即可；</p><p>不足之处在于，白名单的维护是一个持续性投入的工作，在很多公司，业务开发无法直接触及到 redis，只能提工单申请，增加了开发成本；另外，每次请求进来，都需要判断白名单，增加了系统响应耗时，考虑到正常情况下外部进来的请求大部分都是在白名单内的，只有极少数恶意请求才会被白名单机制所拦截，所以该方案的性价比很低。</p><h2 id="3-方案三-网关-AOP"><a href="#3-方案三-网关-AOP" class="headerlink" title="3. 方案三 网关 + AOP"></a><strong><em>3. 方案三 网关 + AOP</em></strong></h2><p>相比于方案二对接口进行白名单判断而言，方案三是对请求来源进行判断，并将该判断下沉到业务侧。避免了网关侧的逻辑判断，从而提升系统响应速度。</p><p>我们知道，外部进来的请求一定会经过网关再被分发到具体的业务侧，内部服务间的调用是不用走外部网关的（走 k8s 的 service）。</p><p><strong>根据这个特点，我们可以对所有经过网关的请求的 header 里添加一个字段，业务侧接口收到请求后，判断 header 里是否有该字段，如果有，则说明该请求来自外部，没有，则属于内部服务的调用，再根据该接口是否属于内部接口来决定是否放行该请求。</strong></p><p>该方案将内外网访问权限的处理分布到各个业务侧进行，消除了由网关来处理的系统性瓶颈；同时，开发者可以在业务侧直接确定接口的内外网访问权限，提升开发效率的同时，增加了代码的可读性。</p><p>当然该方案会对业务代码有一定的侵入性，不过可以通过注解的形式，最大限度的降低这种侵入性。</p><p><img src="https://mmbiz.qpic.cn/sz_mmbiz_jpg/knmrNHnmCLHeNQic2c4tQ3pwHOk9XgEmNiaUfUZC7EJnb0CIic4J6HqJSaL9D6tOoN4efzdZiaA07Tiasyl3yAtnPZw/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1" alt="Image"></p><h2 id="具体实操"><a href="#具体实操" class="headerlink" title="具体实操"></a><strong><em>具体实操</em></strong></h2><p>下面就方案三，进行具体的代码演示。</p><p>首先在网关侧，需要对进来的请求 header 添加外网标识符: from&#x3D;public</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthFilter</span> <span class="keyword">implements</span> <span class="title class_">GlobalFilter</span>, Ordered &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> Mono &lt; Void &gt; filter ( ServerWebExchange exchange, GatewayFilterChain chain ) &#123;</span><br><span class="line">    <span class="keyword">return</span> chain.filter(</span><br><span class="line">      exchange.mutate().request(</span><br><span class="line">        exchange.getRequest().mutate().header(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;&quot;</span>).header(<span class="string">&quot;from&quot;</span>, <span class="string">&quot;public&quot;</span>).build())</span><br><span class="line">      .build()</span><br><span class="line">    )；</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getOrder</span> <span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着，编写内外网访问权限判断的 AOP 和注解</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OnlyIntranetAccessAspect</span> &#123;</span><br><span class="line">  <span class="meta">@Pointcut</span> ( <span class="string">&quot;@within(org.openmmlab.platform.common.annotation.OnlyIntranetAccess)&quot;</span> )</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onlyIntranetAccessOnClass</span> <span class="params">()</span> &#123;&#125;</span><br><span class="line">  <span class="meta">@Pointcut</span> ( <span class="string">&quot;@annotation(org.openmmlab.platform.common.annotation.OnlyIntranetAccess)&quot;</span> )</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onlyIntranetAccessOnMethed</span> <span class="params">()</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Before</span> ( value = <span class="string">&quot;onlyIntranetAccessOnMethed() || onlyIntranetAccessOnClass()&quot;</span> )</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span> <span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">HttpServletRequest</span> <span class="variable">hsr</span> <span class="operator">=</span> (( ServletRequestAttributes ) RequestContextHolder.getRequestAttributes()) .getRequest ();</span><br><span class="line">    <span class="type">String</span> <span class="variable">from</span> <span class="operator">=</span> hsr.getHeader ( <span class="string">&quot;from&quot;</span> );</span><br><span class="line">    <span class="keyword">if</span> ( !StringUtils.isEmpty( from ) &amp;&amp; <span class="string">&quot;public&quot;</span>.equals ( from )) &#123;</span><br><span class="line">      log.error ( <span class="string">&quot;This api is only allowed invoked by intranet source&quot;</span> );</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MMException</span> ( ReturnEnum.C_NETWORK_INTERNET_ACCESS_NOT_ALLOWED_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> OnlyIntranetAccess &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，在只能内网访问的接口上加上@OnlyIntranetAccess 注解即可</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span> ( <span class="string">&quot;/role/add&quot;</span> )</span><br><span class="line"><span class="meta">@OnlyIntranetAccess</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">onlyIntranetAccess</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;该接口只允许内部服务调用&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
          <category> studyEveryday </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> Java </tag>
            
            <tag> studyEveryday </tag>
            
            <tag> 业务开发时，接口不能对外暴露的解决办法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>以特定的编码读取文件，以特定的编码写入文件</title>
      <link href="/posts/9998.html"/>
      <url>/posts/9998.html</url>
      
        <content type="html"><![CDATA[<p>以下代码是针对 BufferedReader 和 BufferedWriter 的</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(inF),<span class="string">&quot;GB2312&quot;</span>));<span class="comment">// 以GB2312的编码读文件</span></span><br><span class="line"></span><br><span class="line"><span class="type">BufferedWriter</span> <span class="variable">bufferedWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(outFile), StandardCharsets.UTF_8));<span class="comment">// 以utf-8写文件</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
          <category> studyEveryday </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> Java </tag>
            
            <tag> studyEveryday </tag>
            
            <tag> 以特定的编码读取文件，以特定的编码写入文件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>判断访问设备的方法</title>
      <link href="/posts/27719.html"/>
      <url>/posts/27719.html</url>
      
        <content type="html"><![CDATA[<h2 id="java-版"><a href="#java-版" class="headerlink" title="java 版"></a>java 版</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// \b 是单词边界(连着的两个(字母字符 与 非字母字符) 之间的逻辑上的间隔),</span></span><br><span class="line"><span class="comment">// 字符串在编译时会被转码一次,所以是 &quot;\\b&quot;</span></span><br><span class="line"><span class="comment">// \B 是单词内部逻辑间隔(连着的两个字母字符之间的逻辑上的间隔)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PHONE_REG</span> <span class="operator">=</span> <span class="string">&quot;\\b(ip(hone|od)|android|opera m(ob|in)i&quot;</span></span><br><span class="line">    + <span class="string">&quot;|windows (phone|ce)|blackberry&quot;</span></span><br><span class="line">    + <span class="string">&quot;|s(ymbian|eries60|amsung)|p(laybook|alm|rofile/midp&quot;</span></span><br><span class="line">    + <span class="string">&quot;|laystation portable)|nokia|fennec|htc[-_]&quot;</span></span><br><span class="line">    + <span class="string">&quot;|mobile|up.browser|[1-4][0-9]&#123;2&#125;x[1-4][0-9]&#123;2&#125;)\\b&quot;</span>;<span class="comment">// 手记的正则表达式</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TABLE_REG</span> <span class="operator">=</span> <span class="string">&quot;\\b(ipad|tablet|(Nexus 7)|up.browser&quot;</span></span><br><span class="line">    + <span class="string">&quot;|[1-4][0-9]&#123;2&#125;x[1-4][0-9]&#123;2&#125;)\\b&quot;</span>;<span class="comment">// 拼版的正则表达式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 移动设备正则匹配：手机端、平板</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Pattern</span> <span class="variable">PHONE_PAT</span> <span class="operator">=</span> Pattern.compile(PHONE_REG, Pattern.CASE_INSENSITIVE);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Pattern</span> <span class="variable">TABLE_PAT</span> <span class="operator">=</span> Pattern.compile(TABLE_REG, Pattern.CASE_INSENSITIVE);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登陆设备认证。判断前台请求的设备是pc，pad还是phone</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userAgent 用户代理信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">checkLoginDeviceType</span><span class="params">(String userAgent)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">null</span> == userAgent) &#123;</span><br><span class="line">        userAgent = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 匹配</span></span><br><span class="line">    <span class="type">Matcher</span> <span class="variable">matcherPhone</span> <span class="operator">=</span> PHONE_PAT.matcher(userAgent);</span><br><span class="line">    <span class="type">Matcher</span> <span class="variable">matcherTable</span> <span class="operator">=</span> TABLE_PAT.matcher(userAgent);</span><br><span class="line">    <span class="keyword">if</span> (matcherPhone.find()) &#123;</span><br><span class="line">        <span class="keyword">return</span> PHONE_TYPE;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (matcherTable.find()) &#123;</span><br><span class="line">        <span class="keyword">return</span> PAD_TYPE;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> PC_TYPE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="js-版"><a href="#js-版" class="headerlink" title="js 版"></a>js 版</h2><p><em>没经过项目测试，只是记录别人写的代码,而且好像只能区分移动端和桌面，不能区分移动端是 pad 还是 phone</em></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//智能检测登陆设备类型</span></span><br><span class="line"><span class="keyword">var</span> browser = &#123;</span><br><span class="line">  <span class="attr">versions</span>: (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> u = navigator.<span class="property">userAgent</span>,</span><br><span class="line">      app = navigator.<span class="property">appVersion</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="comment">//移动终端浏览器版本信息</span></span><br><span class="line">      <span class="attr">trident</span>: u.<span class="title function_">indexOf</span>(<span class="string">&#x27;Trident&#x27;</span>) &gt; -<span class="number">1</span>, <span class="comment">//IE内核</span></span><br><span class="line">      <span class="attr">presto</span>: u.<span class="title function_">indexOf</span>(<span class="string">&#x27;Presto&#x27;</span>) &gt; -<span class="number">1</span>, <span class="comment">//opera内核</span></span><br><span class="line">      <span class="attr">webKit</span>: u.<span class="title function_">indexOf</span>(<span class="string">&#x27;AppleWebKit&#x27;</span>) &gt; -<span class="number">1</span>, <span class="comment">//苹果、谷歌内核</span></span><br><span class="line">      <span class="attr">gecko</span>: u.<span class="title function_">indexOf</span>(<span class="string">&#x27;Gecko&#x27;</span>) &gt; -<span class="number">1</span> &amp;&amp; u.<span class="title function_">indexOf</span>(<span class="string">&#x27;KHTML&#x27;</span>) == -<span class="number">1</span>, <span class="comment">//火狐内核</span></span><br><span class="line">      <span class="attr">mobile</span>: !!u.<span class="title function_">match</span>(<span class="regexp">/AppleWebKit.*Mobile.*/</span>) || u.<span class="title function_">indexOf</span>(<span class="string">&#x27;iPad&#x27;</span>) &gt; -<span class="number">1</span>, <span class="comment">//是否为移动终端</span></span><br><span class="line">      <span class="attr">ios</span>: !!u.<span class="title function_">match</span>(<span class="regexp">/\(i[^;]+;( U;)? CPU.+Mac OS X/</span>), <span class="comment">//ios终端</span></span><br><span class="line">      <span class="attr">android</span>: u.<span class="title function_">indexOf</span>(<span class="string">&#x27;Android&#x27;</span>) &gt; -<span class="number">1</span> || u.<span class="title function_">indexOf</span>(<span class="string">&#x27;Linux&#x27;</span>) &gt; -<span class="number">1</span>, <span class="comment">//android终端或者uc浏览器</span></span><br><span class="line">      <span class="attr">iPhone</span>: u.<span class="title function_">indexOf</span>(<span class="string">&#x27;iPhone&#x27;</span>) &gt; -<span class="number">1</span>, <span class="comment">//是否为iPhone或者QQHD浏览器</span></span><br><span class="line">      <span class="attr">iPad</span>: u.<span class="title function_">indexOf</span>(<span class="string">&#x27;iPad&#x27;</span>) &gt; -<span class="number">1</span>, <span class="comment">//是否iPad</span></span><br><span class="line">      <span class="attr">webApp</span>: u.<span class="title function_">indexOf</span>(<span class="string">&#x27;Safari&#x27;</span>) == -<span class="number">1</span> <span class="comment">//是否web应该程序，没有头部与底部</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)(),</span><br><span class="line">  <span class="attr">language</span>: (navigator.<span class="property">browserLanguage</span> || navigator.<span class="property">language</span>).<span class="title function_">toLowerCase</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (browser.<span class="property">versions</span>.<span class="property">mobile</span>) &#123;</span><br><span class="line">  <span class="comment">//移动端</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">//pc端</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
          <category> studyEveryday </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> Java </tag>
            
            <tag> studyEveryday </tag>
            
            <tag> 判断访问设备的方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>告别非空判断</title>
      <link href="/posts/29009.html"/>
      <url>/posts/29009.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-Objects-工具类"><a href="#1-Objects-工具类" class="headerlink" title="1 Objects 工具类"></a>1 Objects 工具类</h2><p>既然要解决空指针，自然就是提前对对象进行判空校验；通常情况下，会使用<code>if( null != obj )</code>进行对象校验；在 Java 7 中，专门提供工具类<code>java.util.Objects</code>，让对象的判空校验更加简单；</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>Java 7 自带，不需要额外的依赖</li><li>静态方法，使用简单</li><li>仅支持对象判空</li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ul><li><p>Objects.isNull</p><p>判断对象是否为空，为<code>null</code>返回<code>true</code>，否则返回<code>false</code></p><p><code>Object obj = null;   System.out.println(Objects.isNull(obj)); // true      obj = new Object();   System.out.println(Objects.isNull(obj)); // false   </code></p></li><li><p>Objects.nonNull</p><p>和<code>Objects.isNull</code>相反；判断对象不为空，为<code>null</code>返回<code>false</code>，否则返回<code>true</code></p><p><code>Object obj = null;   System.out.println(Objects.nonNull(obj)); // false      obj = new Object();   System.out.println(Objects.nonNull(obj)); // true   </code></p></li><li><p>Objects.requireNonNull</p><p>校验非空，一旦对象为空，就会抛出空指针异常（NullPointerException），改方法可以自定义异常描述，方便异常之后能快速定位问题所在：</p><p><code>Object obj = null;   Objects.requireNonNull(obj);   // 自定义错误描述   Objects.requireNonNull(obj,&quot;obj 对象为空&quot;);   </code></p><p>执行输出：</p><p><code>Exception in thread &quot;main&quot; java.lang.NullPointerException: obj 对象为空    at java.util.Objects.requireNonNull(Objects.java:228)    at com.ehang.helloworld.controller.NullTest.t5(NullTest.java:97)    at com.ehang.helloworld.controller.NullTest.main(NullTest.java:23)   </code></p></li></ul><h2 id="2-字符串判空"><a href="#2-字符串判空" class="headerlink" title="2 字符串判空"></a>2 字符串判空</h2><p>字符串是开发过程中使用最多一种数据类型，因此对字符串的判断、校验也就必不可少了，原生的方式都是通过空对象，长度进行判断：</p><p><code>String str = &quot;一行Java&quot;   if ( null != str &amp;&amp; s1.length() &gt; 0 )&#123;    // 对str字符串进行使用   &#125;   </code></p><p>但是，对字符串的校验，除了判空之外，还有很多其他的场景，比如判断是不是空串（String str &#x3D; <code>&quot;&quot;</code>），是不是只有空格（String str &#x3D; <code>&quot; &quot;</code>）等等，那这些校验，就会麻烦一些了；不过木有关系，现成的工具类已经足够满足了；</p><h3 id="Spring-StringUtil-工具类"><a href="#Spring-StringUtil-工具类" class="headerlink" title="Spring StringUtil 工具类"></a>Spring StringUtil 工具类</h3><p><code>org.springframework.util.StringUtils</code>  是 String 框架自带的字符串工具类，功能比较单一，在教新的版本中，这个工具类的字符串判空方法已经被弃用了，所以不太建议使用了；</p><ul><li><p>StringUtils.isEmpty</p><p>空对象以及空串的校验；</p><p><code>String s1 = null;   String s2 = &quot;&quot;;   String s3 = &quot; &quot;;   System.out.println(StringUtils.isEmpty(s1)); // true   System.out.println(StringUtils.isEmpty(s2)); // true   System.out.println(StringUtils.isEmpty(s3)); // false   </code></p></li></ul><h3 id="apache-lang3-StringUtil-工具类"><a href="#apache-lang3-StringUtil-工具类" class="headerlink" title="apache lang3 StringUtil 工具类"></a>apache lang3 StringUtil 工具类</h3><p>apache lang3 StringUtil 工具类（<code>org.apache.commons.lang3.StringUtils</code>） 相比于 Spring 框架带的工具类，要强大太对了，涵盖了对 String 操作的所有封装；</p><p>判空校验的话主要有 4 个<code>StringUtils.isEmpty</code>、<code>StringUtils.isNotEmpty</code>、<code>StringUtils.isBlank</code>、<code>StringUtils.isNotBlank</code></p><ul><li><p>依赖</p><p><code>&lt;dependency&gt;       &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;       &lt;artifactId&gt;commons-lang3&lt;/artifactId&gt;   &lt;/dependency&gt;   </code></p></li><li><p><code>StringUtils.isEmpty</code>和<code>StringUtils.isNotEmpty</code></p><p>判断字符串对象是否为空，以及字符串长度是否为 0；isEmpty 和 isNotEmpty 校验结果相反；</p><p><code>String s1 = null;   String s2 = &quot;&quot;;   String s3 = &quot; &quot;;   System.out.println(StringUtils.isEmpty(s1)); // true   System.out.println(StringUtils.isEmpty(s2)); // true   System.out.println(StringUtils.isEmpty(s3)); // false   System.out.println();   System.out.println(StringUtils.isNotEmpty(s1)); // false   System.out.println(StringUtils.isNotEmpty(s2)); // false   System.out.println(StringUtils.isNotEmpty(s3)); // true   </code></p></li><li><p><code>StringUtils.isBlank</code>、<code>StringUtils.isNotBlank</code></p><p>在  <code>StringUtils.isEmpty</code>和<code>StringUtils.isNotEmpty</code>  判断的基础上，还会将字符串开头，结尾的空格去掉之后，判断长度是否大于 0</p><p><code>String s1 = null;   String s2 = &quot;&quot;;   String s3 = &quot; &quot;;   String s4 = &quot; 1  2    &quot;;   System.out.println(StringUtils.isBlank(s1)); // true  空对象   System.out.println(StringUtils.isBlank(s2)); // true  长度等于0   System.out.println(StringUtils.isBlank(s3)); // true  去掉前后空格之后，长度也等于0   System.out.println(StringUtils.isBlank(s4)); // false 去掉前后空格（1  2），长度大于0   System.out.println();   System.out.println(StringUtils.isNotBlank(s1)); // false   System.out.println(StringUtils.isNotBlank(s2)); // false   System.out.println(StringUtils.isNotBlank(s3)); // false   System.out.println(StringUtils.isNotBlank(s4)); // true   </code></p></li><li><p>其他功能</p><p>本文主要是探讨判空校验，lang3 的 StringUtil 工具类几乎涵盖了所有关于 String 操作的封装，大大降低了我们处理 String 的复杂度，更多功能可参考官方文档</p><blockquote><p><a href="https://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/StringUtils.html">https://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/StringUtils.html</a></p></blockquote></li></ul><h2 id="3-字符串比较"><a href="#3-字符串比较" class="headerlink" title="3 字符串比较"></a>3 字符串比较</h2><p>在对字符串进行比较的时候，也需要特别注意 NPE 异常；</p><p>如下示例：</p><p><code>public Boolean isEhang(String name) &#123;       if (name.equals(&quot;ehang&quot;)) &#123;           return true;       &#125;       return false;   &#125;   </code></p><p>当如果 name 为 null 的时候，就会出现 NPE 异常；</p><p>可以做如下调整：</p><p><code>if (&quot;ehang&quot;.equals(name))   ...   </code></p><p>这样就算 name 为 null，即不会出现 NPE 异常，也能正常的判断；</p><h2 id="4Map、List、Set-判空"><a href="#4Map、List、Set-判空" class="headerlink" title="4Map、List、Set 判空"></a>4Map、List、Set 判空</h2><p>Map、List、Set 是经常会用到的数据结构，虽然他们都包含有<code>isEmpty()</code>方法，能判断容器中是否包含了元素，但是无法判断自生对象是否为空，一旦对象没有实例化时，调用 isEmpty()就会报空指针异常；Spring 为我们提供了一个<code>org.springframework.util.CollectionUtils</code>工具类，其中的<code>isEmpty</code>就会优先判断对象是否为空，然后再通过 isEmpty()判断是否存在元素，能大大减少因为对象为空带来的空指针异常；</p><p><code>Map map = null;   System.out.println(map.isEmpty()); // 空指针异常   System.out.println(CollectionUtils.isEmpty(map)); // true   map = new HashMap();   System.out.println(map.isEmpty()); // true   System.out.println(CollectionUtils.isEmpty(map)); // true   map.put(&quot;1&quot;, &quot;2&quot;);   System.out.println(CollectionUtils.isEmpty(map)); // false   System.out.println(map.isEmpty()); // false      List list = null;   System.out.println(list.isEmpty()); // 空指针异常   System.out.println(CollectionUtils.isEmpty(list)); // true   list = new ArrayList();   System.out.println(list.isEmpty()); // true   System.out.println(CollectionUtils.isEmpty(list)); // true   list.add(&quot;1&quot;);   System.out.println(CollectionUtils.isEmpty(list)); // false   System.out.println(list.isEmpty()); // false      Set set = null;   System.out.println(set.isEmpty()); // 空指针异常   System.out.println(CollectionUtils.isEmpty(set)); // true   set = new TreeSet();   System.out.println(set.isEmpty()); // true   System.out.println(CollectionUtils.isEmpty(set)); // true   set.add(&quot;1&quot;);   System.out.println(CollectionUtils.isEmpty(set)); // false   System.out.println(set.isEmpty()); // false   </code></p><p>除了判空之外，该工具类还包含了很多很实用的方法，比如获取第一个元素：firstElement() 、最后一个元素：lastElement()、是否包含某个元素：contains() 等等</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/GjuWRiaNxhnS2MndYxlDMJwWcbNzLciacPicRjupzVmsDX3kqN4lOCWuOrKAiaabNaicR6sh8BMv6KFoONQyBNK0UBg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="Image"></p><h3 id="hutool-的-CollectionUtil"><a href="#hutool-的-CollectionUtil" class="headerlink" title="hutool 的 CollectionUtil"></a>hutool 的 CollectionUtil</h3><p>单纯判空，前面 Spring 的 CollectionUtils 已经足够，其他的功能也够满足绝大部分的使用场景；<code>hutool的CollectionUtil</code>提供了更加完善的功能，如果需要，也可以选用；</p><p>依赖：</p><p><code>&lt;dependency&gt;       &lt;groupId&gt;cn.hutool&lt;/groupId&gt;       &lt;artifactId&gt;hutool-all&lt;/artifactId&gt;       &lt;version&gt;5.7.22&lt;/version&gt;   &lt;/dependency&gt;   </code></p><p>方法列表：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/GjuWRiaNxhnS2MndYxlDMJwWcbNzLciacP1FBDEA231NOPu0NxDpLNs9JricgiagoXb1jdDv8f8DTepn1SibrHfeXmw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="Image"></p><h2 id="5-赋初始值、尽量不要返回-null-对象"><a href="#5-赋初始值、尽量不要返回-null-对象" class="headerlink" title="5 赋初始值、尽量不要返回 null 对象"></a>5 赋初始值、尽量不要返回 null 对象</h2><p>当定于局部变量，定义对象的属性时，能赋初始值的就尽量带上初始值；</p><p><code>Map map = new HashMap();      private Integer age = 0;   </code></p><p>当方法有返回值的时候，非必要的情况下，尽量不要返回 null；</p><p>比如一个方法的执行最终返回的是 List，当 List 没有值的时候，可以不返回 null 对象，而是可以返回一个空的 List</p><p><code>public List select()&#123;       // 这里处理其他逻辑       // 一旦返回的是null是，返回一个空List对象       return Collections.emptyList();   &#125;   </code></p><h2 id="6Optional"><a href="#6Optional" class="headerlink" title="6Optional"></a>6Optional</h2><p>Optional 是 Java 8 提供的一个对象容器，目的就是为了能有效的解决这个烦人的空指针异常，我们可以将 Optional 看成一个对象给包装类；</p><ul><li><p>实例化 Optional 对象</p><p><code>Object o1 = null;   Optional&lt;Object&gt; op1 = Optional.of(o1);   Optional&lt;Object&gt; op2 = Optional.ofNullable(o1);   </code></p><p><strong>Optional.of()</strong></p><p>当对象为 null 时，创建过程就会抛出 NPE 异常</p><p><strong>Optional.ofNullable()</strong></p><p>当对象为 null 时，也能正常返回 Optional 对象</p></li><li><p>判空 isPresent()</p><p><code>Integer i1 = null;   Optional&lt;Integer&gt; op1 = Optional.of(i1);   System.out.println(op1.isPresent()); // false      Integer i2 = 123;   Optional&lt;Integer&gt; op2 = Optional.ofNullable(i2);   System.out.println(op2.isPresent()); // true   op2.ifPresent(i-&gt;&#123;       System.out.println(i);   &#125;);   </code></p><p>isPresent() 当对象为 null 返回 true，不为空时返回 false</p><p>lambda 表示式的链式处理：</p><p><code>op2.ifPresent(obj-&gt;&#123;       System.out.println(obj);   &#125;);   </code></p></li><li><p>取值</p><p><code>// 取出原值，如果原对象为null会报NoSuchElementException异常   Integer integer = op2.get();   // 取出原值，如果原值为空，则返回指点的默认值   Integer integer1 = op1.orElse(456);   // 取出原值，如果原值为空，返回默认值，不过在返回之前还需要做一些其他的事情   Integer integer2 = op2.orElseGet(() -&gt; &#123;       // 在这里做一些其他的操作       return 456;   &#125;);      // 取出原值，如果原值为空，就抛出指定的异常   op2.orElseThrow(RuntimeException::new);   op2.orElseThrow(() -&gt; new RuntimeException(&quot;不好，我的值是空的！&quot;));   </code></p></li><li><p>map() 和 flatMap()</p><p>编码过程中，经常会出现：a.xxx().yyy().zzz().mmm() 这样链式调用，这个过程，一旦中间有任意一环出现问题，就会 NPE 异常，因此，我们就可以借助 map() 和 flatMap()来避免这个问题；</p><p>测试对象：</p><p><code>@Data   @NoArgsConstructor   @AllArgsConstructor   static class User &#123;       private String name;          private Integer age;          private Optional&lt;String&gt; addr;   &#125;   </code></p><p>测试：</p><p><code>// 得到姓名的长度，如果没有姓名就返回0   Integer nameLen = Optional.of(new User(null, 10, null))           .map(User::getName)           .map(String::length)           .orElse(0);   System.out.println(nameLen);      // 得到地址的长度，如果没有姓名就返回0   Integer addr = Optional.of(new User(null, 10, Optional.of(&quot;北京&quot;)))           .flatMap(User::getAddr)           .map(String::length)           .orElse(0);   System.out.println(addr);   </code></p><p>map 会将返回的对象封装成 Optional 对象，如果返回的对象本身就是一个 Optional 对象了，那就使用 flatMap()</p></li></ul><h2 id="7-断言"><a href="#7-断言" class="headerlink" title="7 断言"></a>7 断言</h2><p>Spring 中的  <code>org.springframework.util.Assert</code>  翻译为中文为”<strong>断言</strong>“，它用来断定某一个实际的运行值和预期项是否一致，不一致就抛出异常。借助这个类，同样也可以做判空检验；</p><p>Assert 类提供了以下的静态方法：</p><p>方法名</p><p>描述</p><p>失败时抛出异常</p><p>isNull(Object object, String message)</p><p>object 不为空，抛出异常</p><p>IllegalArgumentException</p><p>notNull(Object object, String message)</p><p>object 为空，抛出异常</p><p>IllegalArgumentException</p><p>hasLength(String text, String message)</p><p>text 是空字符串，抛出异常</p><p>IllegalArgumentException</p><p>hasText(String text, String message)</p><p>不包含空白字符串，抛出异常</p><p>IllegalArgumentException</p><p>doesNotContain(String textToSearch, String substring, String message)</p><p>textToSearch 中包含 substring，抛出异常</p><p>IllegalArgumentException</p><p>notEmpty(Object[] array, String message)</p><p>array 为空或长度为 1，抛出异常</p><p>IllegalArgumentException</p><p>noNullElements(Object[] array, String message)</p><p>array 中包含 null 元系，抛异常</p><p>IllegalArgumentException</p><p>notEmpty(Collection collection, String message)</p><p>collection 不包含元素，抛出异常</p><p>IllegalArgumentException</p><p>notEmpty(Map map, String message)</p><p>map 中包含 null，抛出异常</p><p>IllegalArgumentException</p><p>isInstanceOf(Class type, Object obj, String message)</p><p>如果 obj 不是 type 类型，抛出异常</p><p>IllegalArgumentException</p><p>isAssignable(Class superType, Class subType, String message)</p><p>subType 不是 superType 子类，抛出异常</p><p>IllegalArgumentException</p><p>state(boolean expression, String message)</p><p>expression 不为 true 抛出异常</p><p>IllegalStateException</p><p>isTrue(boolean expression, String message)</p><p>expression 不为 true 抛出异常</p><p>IllegalArgumentException</p><p><code>Integer i1 = null;   Assert.notNull(i1,&quot;i1 不为空&quot;);      Map map = null;   Assert.notEmpty(map,&quot;map 不为空&quot;);   </code></p><p>异常：</p><p><code>Exception in thread &quot;main&quot; java.lang.IllegalArgumentException: map 不为空    at org.springframework.util.Assert.notEmpty(Assert.java:555)    at com.ehang.helloworld.controller.NullTest.t6(NullTest.java:119)    at com.ehang.helloworld.controller.NullTest.main(NullTest.java:23)   </code></p><p>特别注意：</p><p>Assert 用来断定某一个实际的运行值和预期项是否一致，所以他和其他工具类的校验方式是反着在；比如<code>isNull</code>方法是期望对象为 null，如果不为空的时候，就会报错；<code>notNull</code>表示期望对象不为空，当对象为空时，就会报错；</p><h2 id="8-局部变量使用基本数据类型"><a href="#8-局部变量使用基本数据类型" class="headerlink" title="8 局部变量使用基本数据类型"></a>8 局部变量使用基本数据类型</h2><p>在之前的文章《<a href="http://mp.weixin.qq.com/s?__biz=MzU5MDgyMzc2OA==&mid=2247529733&idx=1&sn=e7224db5ad19b40cb89ba55c4b28a04e&chksm=fe3a5d32c94dd42419215a658f45dfaff0de4bb31d79c6d0721efdfaf9eb61ae5597e0f8f59b&scene=21#wechat_redirect"><strong>阿里为何禁止在对象中使用基本数据类型</strong></a>》中，从性能的角度，推荐局部变量的定义尽量使用基本数据类型，能不用包装类就不用；那么从今天文章的角度来说，使用基本数据类型也能有效的避免空指针异常；</p><p>如下实例：</p><p><code>int x;   Integer y;   System.out.println( x + 1 );  // 编译失败   System.out.println( y + 1 );  // 编译失败      int i = 1;   Integer j = null;   System.out.println( i + 1 );  // 正常   System.out.println( j + 1 );  // 空指针异常   int m = i; // 正常   int n = j; // 空指针异常   </code></p><p>当变量 x、y 只定义、不赋值的时候，x + 1 和 y + 1 是没办法通过编译的；而包装类 j 是可以指定<code>null</code>对象，当包装类参与运算的时候，首先会做拆箱操作，也就是调用 intValue() 方法，由于对象是空的，调用方法自然就会报空指针；同时，将一个包装类赋值给一个基本数据类型时，同样也会做拆箱操作，自然也就空指针异常了；</p><p>但是，基本数据类型就必须指定一个具体值，后续不管运算、还是赋值操作，都不会出现空指针异常；</p><h2 id="9-提前校验参数"><a href="#9-提前校验参数" class="headerlink" title="9 提前校验参数"></a>9 提前校验参数</h2><p>后台数据，绝大部分都是通过终端请求传递上来的，所以需要在最接近用户的地方，把该校验的参数都校验了；比如 StringBoot 项目，就需要在 Controller 层将客户端请求的参数做校验，一旦必传的参数没有传值，就应该直接给客户端报错并提醒用户，而不是将这些不符合要求的 null 值传到 Service 甚至保存到数据库，尽早的校验并拦截，就能大大降低出问题的概率</p><p>之前介绍的<code>hibernate-validator</code>就能完美解决参数校验问题，详见：<a href="http://mp.weixin.qq.com/s?__biz=MzU5MDgyMzc2OA==&mid=2247485242&idx=1&sn=ef7d40542e8b2f0cf566d416147244d3&chksm=fe392f0dc94ea61b9bf6b4bff1aefb15282bc61189f0a8429121f800102c23c08e2b3e6f0d77&scene=21#wechat_redirect"><strong>SpringBoot！你的请求、响应、异常规范了吗？</strong></a></p><h2 id="10IDEA-提醒"><a href="#10IDEA-提醒" class="headerlink" title="10IDEA 提醒"></a>10IDEA 提醒</h2><p>IDEA 对空对象或者可能会出现 null 值的对象会有提醒，可以根据提醒来提前感知并预防</p><p><code>public static String t1(int i)&#123;       String name1 = null;       String name2 = null;       if(i&gt;0)&#123;           name2 = &quot;ehang&quot;;       &#125;       t2(name1);       t2(name2);       return name2;   &#125;   </code></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/GjuWRiaNxhnS2MndYxlDMJwWcbNzLciacPRDMTrT2Zl7jJ2O4WQKmRXu10KC1eDIMgBD0keSyMGl4bGesrCzTSvQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="Image"></p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
          <category> studyEveryday </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> Java </tag>
            
            <tag> studyEveryday </tag>
            
            <tag> 告别非空判断 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用的工具包</title>
      <link href="/posts/36582.html"/>
      <url>/posts/36582.html</url>
      
        <content type="html"><![CDATA[<ul><li>预览 word 或者 pdf 的内容：TiKa</li><li>数学运算：joinery</li></ul>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
          <category> studyEveryday </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> Java </tag>
            
            <tag> studyEveryday </tag>
            
            <tag> 常用的工具包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用的返回体封装工具类</title>
      <link href="/posts/23520.html"/>
      <url>/posts/23520.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回体工具</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DtoResult</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">STATUS_CODE_SUCCESS</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">STATUS_CODE_ERROR</span> <span class="operator">=</span> <span class="number">500</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DtoResult</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setCode(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DtoResult</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>();</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DtoResult</span><span class="params">(Integer code, String message, T data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setCode(code);</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DtoResult</span><span class="params">(Integer code, String message)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setCode(code);</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCode</span><span class="params">(<span class="type">int</span> code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; DtoResult&lt;T&gt; <span class="title function_">ok</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DtoResult</span>&lt;T&gt;(<span class="number">0</span>, <span class="string">&quot;操作成功&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; DtoResult&lt;T&gt; <span class="title function_">ok</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DtoResult</span>&lt;T&gt;(<span class="number">0</span>, <span class="string">&quot;操作成功&quot;</span>, data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; DtoResult&lt;T&gt; <span class="title function_">ok</span><span class="params">(String message, T data)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DtoResult</span>&lt;T&gt;(<span class="number">0</span>, message, data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; DtoResult&lt;T&gt; <span class="title function_">error</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DtoResult</span>&lt;T&gt;(<span class="number">500</span>, <span class="string">&quot;数据异常&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; DtoResult&lt;T&gt; <span class="title function_">error</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DtoResult</span>&lt;T&gt;(<span class="number">500</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; DtoResult&lt;T&gt; <span class="title function_">error</span><span class="params">(Integer code, String message)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DtoResult</span>&lt;T&gt;(code, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setData</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMessage</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
          <category> studyEveryday </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> Java </tag>
            
            <tag> studyEveryday </tag>
            
            <tag> 常用的返回体封装工具类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>执行简单的定时任务之ScheduledExecutorService</title>
      <link href="/posts/55320.html"/>
      <url>/posts/55320.html</url>
      
        <content type="html"><![CDATA[<p><code>ScheduledExecutorService</code>有线程池的特性，也可以实现任务循环执行，可以看作是一个简单地定时任务组件，因为有线程池特性，所以任务之间可以多线程并发执行，互不影响，当任务来的时候，才会真正创建线程去执行<br>我们在做一些普通定时循环任务时可以用它，比如定时刷新字典常量，只需要不断重复执行即可，这篇文章讲解一下它的用法以及注意事项，不涉及底层原理</p><p>注意：我们都知道，在使用线程池的时候，如果我们的任务出现异常没有捕获，那么线程会销毁被回收，不会影响其他任务继续提交并执行，但是在这里，如果你的任务出现异常没有捕获，会导致后续的任务不再执行，所以一定要<code>try...catch</code></p><h3 id="1-延迟不循环任务schedule方法"><a href="#1-延迟不循环任务schedule方法" class="headerlink" title="1. 延迟不循环任务schedule方法"></a>1. 延迟不循环任务<code>schedule</code>方法</h3><p><code>schedule(Runnable command, long delay, TimeUnit unit)</code><br>参数 1：任务<br>参数 2：方法第一次执行的延迟时间<br>参数 3：延迟单位<br>说明：延迟任务，只执行一次(不会再次执行)，参数 2 为延迟时间</p><p><strong>案例说明：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MineExecutors</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">ScheduledExecutorService</span> <span class="variable">scheduler</span> <span class="operator">=</span> Executors.newScheduledThreadPool(<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">SimpleDateFormat</span> <span class="variable">format</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:sss&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        scheduler.schedule(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                log.info(<span class="string">&quot;开始执行...time &#123;&#125;&quot;</span>, format.format(<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                log.info(<span class="string">&quot;执行结束...time &#123;&#125;&quot;</span>, format.format(<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                log.error(<span class="string">&quot;定时任务执行出错&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">5</span>, TimeUnit.SECONDS);</span><br><span class="line">log.info(<span class="string">&quot;初始化成功 &#123;&#125;&quot;</span>, format.format(<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>可以看到任务执行时间为初始化完成后 5s 才开始执行，且只执行一次</strong><br><img src="https://img-blog.csdnimg.cn/b712abc87287474b9d24d3639b05d161.png" alt="在这里插入图片描述"></p><h3 id="2-延迟且循环cheduleAtFixedRate方法"><a href="#2-延迟且循环cheduleAtFixedRate方法" class="headerlink" title="2. 延迟且循环cheduleAtFixedRate方法"></a>2. 延迟且循环<code>cheduleAtFixedRate</code>方法</h3><p><code>cheduleAtFixedRate(Runnable command, long initialDelay, long period, TimeUnit unit)</code><br>参数 1：任务<br>参数 2：初始化完成后延迟多长时间执行第一次任务<br>参数 3：任务时间间隔<br>参数 4：单位<br>方法解释：是以上一个任务开始的时间计时，比如<code>period</code>为 5，那 5 秒后，检测上一个任务是否执行完毕，如果上一个任务执行完毕，则当前任务立即执行，如果上一个任务没有执行完毕，则需要等上一个任务执行完毕后立即执行，如果你的任务执行时间超过 5 秒，那么任务时间间隔参数将无效，任务会不停地循环执行，由此可得出该方法不能严格保证任务按一定时间间隔执行</p><p><strong>错误：任务连续执行案例：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MineExecutors</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">ScheduledExecutorService</span> <span class="variable">scheduler</span> <span class="operator">=</span> Executors.newScheduledThreadPool(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">SimpleDateFormat</span> <span class="variable">format</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        scheduler.scheduleAtFixedRate(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                log.info(<span class="string">&quot;开始执行...time &#123;&#125;&quot;</span>, format.format(<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">                Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">                log.info(<span class="string">&quot;执行结束...time &#123;&#125;&quot;</span>, format.format(<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                log.error(<span class="string">&quot;定时任务执行出错&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">0</span>, <span class="number">2</span>, TimeUnit.SECONDS);</span><br><span class="line">        log.info(<span class="string">&quot;初始化成功 &#123;&#125;&quot;</span>, format.format(<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由上面代码可以看出，任务执行需要 3 秒，而我们设定的任务时间间隔为 2 秒，如此就会导致任务连续执行，该方法不能严格保证任务按照规定的时间间隔执行，如果你的任务执行时间可以保证忽略不计，则可以使用该方法，我们可以看到下面日志，上一个任务的执行结束时间与下一个任务的开始时间一致，所以任务连续循环执行了<br><img src="https://img-blog.csdnimg.cn/342f374f94ef437ebbdd0701a77ea511.png" alt="在这里插入图片描述"><br><strong>正确案例：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MineExecutors</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">ScheduledExecutorService</span> <span class="variable">scheduler</span> <span class="operator">=</span> Executors.newScheduledThreadPool(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">SimpleDateFormat</span> <span class="variable">format</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        scheduler.scheduleAtFixedRate(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                log.info(<span class="string">&quot;开始执行...time &#123;&#125;&quot;</span>, format.format(<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                log.info(<span class="string">&quot;执行结束...time &#123;&#125;&quot;</span>, format.format(<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                log.error(<span class="string">&quot;定时任务执行出错&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">0</span>, <span class="number">3</span>, TimeUnit.SECONDS);</span><br><span class="line">        log.info(<span class="string">&quot;初始化成功 &#123;&#125;&quot;</span>, format.format(<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到任务以上一次任务的开始时间，按 3 秒一次的方式执行<br><img src="https://img-blog.csdnimg.cn/1d9a4328e296470da79d9623009b1765.png" alt="在这里插入图片描述"></p><h3 id="3-严格按照一定时间间隔执行-96-96"><a href="#3-严格按照一定时间间隔执行-96-96" class="headerlink" title="3. 严格按照一定时间间隔执行&#96;&#96;"></a>3. 严格按照一定时间间隔执行&#96;&#96;</h3><p><code>scheduleWithFixedDelay(Runnable command, long initialDelay, long delay, TimeUnit unit);</code><br>参数 1：任务<br>参数 2：初始化完成后延迟多长时间执行第一次任务<br>参数 3：任务执行时间间隔<br>参数 4：单位<br>解释：以上一次任务执行结束时间为准，加上任务时间间隔作为下一次任务开始时间，由此可以得出，任务可以严格按照时间间隔执行</p><p><strong>案例：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MineExecutors</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">ScheduledExecutorService</span> <span class="variable">scheduler</span> <span class="operator">=</span> Executors.newScheduledThreadPool(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">SimpleDateFormat</span> <span class="variable">format</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        scheduler.scheduleWithFixedDelay(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                log.info(<span class="string">&quot;开始执行...time &#123;&#125;&quot;</span>, format.format(<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">                Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">                log.info(<span class="string">&quot;执行结束...time &#123;&#125;&quot;</span>, format.format(<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                log.error(<span class="string">&quot;定时任务执行出错&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">0</span>, <span class="number">3</span>, TimeUnit.SECONDS);</span><br><span class="line">        log.info(<span class="string">&quot;初始化成功 &#123;&#125;&quot;</span>, format.format(<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由下图日志可以看出，下次任务的开始时间是在上一次任务结束时间+任务时间间隔为准的，严格按照任务时间间隔，规律执行，如果你的任务需要保证严格的时间间隔，可以用该方法启动任务<br><img src="https://img-blog.csdnimg.cn/fb439ae9f2f4441ca611a83d24dc1a6a.png" alt="在这里插入图片描述"></p><p>其他用法与线程池没有差异了，例如<code>ThreadFactory</code>作为参数传入，<a href="https://so.csdn.net/so/search?q=%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BA%BF%E7%A8%8B%E6%B1%A0&spm=1001.2101.3001.7020">自定义线程池</a>内线程名称之类的，不多解释了。</p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
          <category> studyEveryday </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> Java </tag>
            
            <tag> studyEveryday </tag>
            
            <tag> 执行简单的定时任务之ScheduledExecutorService </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数字处理</title>
      <link href="/posts/6824.html"/>
      <url>/posts/6824.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-double-的向上，向下，四舍五入，以及转为-int"><a href="#1-double-的向上，向下，四舍五入，以及转为-int" class="headerlink" title="1.double 的向上，向下，四舍五入，以及转为 int"></a>1.double 的向上，向下，四舍五入，以及转为 int</h2><h3 id="1-向输出上取整"><a href="#1-向输出上取整" class="headerlink" title="1.向输出上取整"></a>1.向输出上取整</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">mathCeil</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Double</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">5.3</span>;</span><br><span class="line">    <span class="comment">// Double 向上取整</span></span><br><span class="line">    <span class="type">double</span> <span class="variable">ceil</span> <span class="operator">=</span> Math.ceil(number);</span><br><span class="line">    System.out.println(<span class="string">&quot;number:&quot;</span> + number);</span><br><span class="line">    System.out.println(<span class="string">&quot;ceil:&quot;</span> + ceil);</span><br><span class="line">    <span class="type">int</span> <span class="variable">ceilRes</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Double</span>(ceil).intValue();</span><br><span class="line">    System.out.println(<span class="string">&quot;ceilRes:&quot;</span> + ceilRes);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">number:<span class="number">5.3</span></span><br><span class="line">ceil:<span class="number">6.0</span></span><br><span class="line">ceilRes:<span class="number">6</span></span><br></pre></td></tr></table></figure><h3 id="2-向下取整"><a href="#2-向下取整" class="headerlink" title="2.向下取整"></a>2.向下取整</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">mathFloor</span> <span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Double</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">5.9</span>;</span><br><span class="line">    <span class="comment">// Double 向下取整</span></span><br><span class="line">    <span class="type">double</span> <span class="variable">floor</span> <span class="operator">=</span> Math.floor(number);</span><br><span class="line">    System.out.println(<span class="string">&quot;number:&quot;</span> + number);</span><br><span class="line">    System.out.println(<span class="string">&quot;floor:&quot;</span> + floor);</span><br><span class="line">    <span class="type">int</span> <span class="variable">floorRes</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Double</span>(floor).intValue();</span><br><span class="line">    System.out.println(<span class="string">&quot;floorRes:&quot;</span> + floorRes);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">number:<span class="number">5.9</span></span><br><span class="line">floor:<span class="number">5.0</span></span><br><span class="line">floorRes:<span class="number">5</span></span><br></pre></td></tr></table></figure><h3 id="3-四舍五入"><a href="#3-四舍五入" class="headerlink" title="3.四舍五入"></a>3.四舍五入</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">mathRound</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Double</span> <span class="variable">number1</span> <span class="operator">=</span> <span class="number">5.9</span>;</span><br><span class="line">    <span class="type">Double</span> <span class="variable">number2</span> <span class="operator">=</span> <span class="number">5.3</span>;</span><br><span class="line">    <span class="comment">// Double number1 四舍五入</span></span><br><span class="line">    <span class="type">double</span> <span class="variable">round1</span> <span class="operator">=</span> Math.round(number1);</span><br><span class="line">    System.out.println(<span class="string">&quot;number1:&quot;</span> + number1);</span><br><span class="line">    System.out.println(<span class="string">&quot;round1:&quot;</span> + round1);</span><br><span class="line">    <span class="type">int</span> <span class="variable">round1Res</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Double</span>(round1).intValue();</span><br><span class="line">    System.out.println(<span class="string">&quot;round1Res:&quot;</span> + round1Res);</span><br><span class="line">    <span class="comment">// Double number2 四舍五入</span></span><br><span class="line">    <span class="type">double</span> <span class="variable">round2</span> <span class="operator">=</span> Math.round(number2);</span><br><span class="line">    System.out.println(<span class="string">&quot;number1:&quot;</span> + number2);</span><br><span class="line">    System.out.println(<span class="string">&quot;round2:&quot;</span> + round2);</span><br><span class="line">    <span class="type">int</span> <span class="variable">round2Res</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Double</span>(round2).intValue();</span><br><span class="line">    System.out.println(<span class="string">&quot;round2Res:&quot;</span> + round2Res);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">number1:<span class="number">5.9</span></span><br><span class="line">round1:<span class="number">6.0</span></span><br><span class="line">round1Res:<span class="number">6</span></span><br><span class="line"></span><br><span class="line">number1:<span class="number">5.3</span></span><br><span class="line">round2:<span class="number">5.0</span></span><br><span class="line">round2Res:<span class="number">5</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
          <category> studyEveryday </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> Java </tag>
            
            <tag> studyEveryday </tag>
            
            <tag> 数字处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>获得文件路径三种方法以及区别</title>
      <link href="/posts/44339.html"/>
      <url>/posts/44339.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;.\\test.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回构造File对象时的路径</span></span><br><span class="line"><span class="comment">// 因此，如果File对象是使用相对路径创建的，则返回的值也将是相对路径。如果是绝对路径就返回绝对路径。</span></span><br><span class="line">System.out.println(file.getPath());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 该方法返回文件的绝对路径。请注意！这里是有大坑的。如果你的文件在Java工程内，路径是按照编译后的路径计算的。</span></span><br><span class="line"><span class="comment">// 该方法只解析当前目录（代码所在的目录）的相对路径，如果初始化中的路径包含了速记符，速记符将不会被解析。</span></span><br><span class="line">System.out.println(file.getAbsolutePath());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 速记符不被解析有时候是很痛苦的事，我们可能需要知道具体的路径。getCanonicalPath()方法解决了这个问题。由于getCanonicalPath()读取的是文件系统，因此会降低性能。</span></span><br><span class="line"><span class="comment">// 如果我们确定没有使用速记符，并且驱动器号大小写已标准化（如果使用Windows OS），我们应该首选使用getAbsoultePath(),除非你的项目中必须使用getCanonicalPath()。</span></span><br><span class="line">System.out.println(file.getCanonicalPath());</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">.\test.txt</span><br><span class="line">E:\workspace\Test\.\test.txt</span><br><span class="line">E:\workspace\Test\test.txt</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
          <category> studyEveryday </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> Java </tag>
            
            <tag> studyEveryday </tag>
            
            <tag> 获得文件路径三种方法以及区别 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>时间日期整理</title>
      <link href="/posts/57711.html"/>
      <url>/posts/57711.html</url>
      
        <content type="html"><![CDATA[<h2 id="Java-中的-Timestamp-对应-mysql-中的-dateTime-类型"><a href="#Java-中的-Timestamp-对应-mysql-中的-dateTime-类型" class="headerlink" title="Java 中的 Timestamp 对应 mysql 中的 dateTime 类型"></a>Java 中的 Timestamp 对应 mysql 中的 dateTime 类型</h2><p>比如：java 的 bean 类型是 Timestamp<br>插入的时候这么写,这样插入完成后。mysql 数据库里就是 datatime 类型的数据了。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">setUpdateTime(<span class="keyword">new</span> <span class="title class_">Timestamp</span>(<span class="keyword">new</span> <span class="title class_">Date</span>().getTime()));</span><br></pre></td></tr></table></figure><p>也可以分开写如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.util.<span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.util.Date();   <span class="comment">// 获取一个Date对象</span></span><br><span class="line"><span class="type">Timestamp</span> <span class="variable">timeStamp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Timestamp</span>(date.getTime());  <span class="comment">// 给对象赋值该值插入就行了</span></span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/mybloging/p/8067698.html"><strong>Java：String 和 Date、Timestamp 之间的转换</strong></a></p><h2 id="String-与-Date（java-util-Date）互转"><a href="#String-与-Date（java-util-Date）互转" class="headerlink" title="String 与 Date（java.util.Date）互转"></a>String 与 Date（java.util.Date）互转</h2><p>String -&gt; Date</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">dateStr</span> <span class="operator">=</span> <span class="string">&quot;2010/05/04 12:34:23&quot;</span>;</span><br><span class="line"><span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="comment">//注意format的格式要与日期String的格式相匹配</span></span><br><span class="line"><span class="type">DateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy/MM/dd HH:mm:ss&quot;</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    date = sdf.parse(dateStr);</span><br><span class="line">    System.out.println(date.toString());</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Date -&gt; String</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">dateStr</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"> <span class="comment">//format的格式可以任意</span></span><br><span class="line"> <span class="type">DateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy/MM/dd HH:mm:ss&quot;</span>);</span><br><span class="line"> <span class="type">DateFormat</span> <span class="variable">sdf2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH/mm/ss&quot;</span>);</span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line"> dateStr = sdf.format(date);</span><br><span class="line"> System.out.println(dateStr);</span><br><span class="line"> dateStr = sdf2.format(date);</span><br><span class="line"> System.out.println(dateStr);</span><br><span class="line"> &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"> e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="String-与-Timestamp-互转"><a href="#String-与-Timestamp-互转" class="headerlink" title="String 与 Timestamp 互转"></a>String 与 Timestamp 互转</h2><p>String -&gt;Timestamp:使用 Timestamp 的 valueOf()方法<br>注：String 的类型必须形如： yyyy-mm-dd hh:mm:ss[.f…] 这样的格式，中括号表示可选，否则报错！！！<br>如果 String 为其他格式，可考虑重新解析下字符串，再重组~~</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Timestamp</span> <span class="variable">ts</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Timestamp</span>(System.currentTimeMillis());</span><br><span class="line">       <span class="type">String</span> <span class="variable">tsStr</span> <span class="operator">=</span> <span class="string">&quot;2011-05-09 11:49:45&quot;</span>;</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">             ts = Timestamp.valueOf(tsStr);</span><br><span class="line">             System.out.println(ts);</span><br><span class="line">         &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>Timestamp -&gt; String:使用 Timestamp 的 toString()方法或者借用 DateFormat</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Timestamp</span> <span class="variable">ts</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Timestamp</span>(System.currentTimeMillis());</span><br><span class="line">       <span class="type">String</span> <span class="variable">tsStr</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">         <span class="type">DateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy/MM/dd HH:mm:ss&quot;</span>);</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">             <span class="comment">//方法一</span></span><br><span class="line">             tsStr = sdf.format(ts);</span><br><span class="line">             System.out.println(tsStr);</span><br><span class="line">             <span class="comment">//方法二</span></span><br><span class="line">             tsStr = ts.toString();</span><br><span class="line">             System.out.println(tsStr);</span><br><span class="line">         &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">             e.printStackTrace();</span><br><span class="line">               &#125;</span><br></pre></td></tr></table></figure><h2 id="Date（-java-util-Date-）和-Timestamp-互转"><a href="#Date（-java-util-Date-）和-Timestamp-互转" class="headerlink" title="Date（ java.util.Date ）和 Timestamp 互转"></a>Date（ java.util.Date ）和 Timestamp 互转</h2><p>声明：查 API 可知，Date 和 Timestamp 是父子类关系,Date 是 Timestamp 的父类</p><p>Timestamp -&gt; Date<br>ate 对象指向的实体是一个 Timestamp，即 date 拥有 Date 类的方法，但被覆盖的方法的执行实体在 Timestamp 中。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Timestamp</span> <span class="variable">ts</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Timestamp</span>(System.currentTimeMillis());</span><br><span class="line">         <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">             date = ts;</span><br><span class="line">             System.out.println(date);</span><br><span class="line">         &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">             e.printStackTrace();</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure><p>Date -&gt; Timestamp（父类不能直接向子类转化）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Timestamp</span> <span class="variable">ts</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Timestamp</span>(date.getTime());</span><br></pre></td></tr></table></figure><hr><p>以上都是旧的。过期的，因为 Date 类是非线程安全的<br>在 java8 里<br>mysql 的 date 对应 java 的 LoacalDate<br>mysql 的 dateTime 对应 java 的 LocalDateTime</p><h2 id="获取-LoacalDateTime-或-LocalDate"><a href="#获取-LoacalDateTime-或-LocalDate" class="headerlink" title="获取 LoacalDateTime 或 LocalDate"></a>获取 LoacalDateTime 或 LocalDate</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">LocalDateTime</span> <span class="variable">localDateTime</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">System.out.println(localDateTime);<span class="comment">// 2021-06-15T18:29:23.215(返回给前台展示时T会自动变成空格)</span></span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">localDate</span> <span class="operator">=</span> LocalDate.now();</span><br><span class="line">System.out.println(localDate);<span class="comment">// 2021-06-16</span></span><br></pre></td></tr></table></figure><h2 id="LocalDateTime-与-LocalDate-获取时间戳-如果要比较大小的话可以用计算出的时间戳来比较"><a href="#LocalDateTime-与-LocalDate-获取时间戳-如果要比较大小的话可以用计算出的时间戳来比较" class="headerlink" title="LocalDateTime 与 LocalDate 获取时间戳(如果要比较大小的话可以用计算出的时间戳来比较)"></a>LocalDateTime 与 LocalDate 获取时间戳(如果要比较大小的话可以用计算出的时间戳来比较)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 默认时区是</span></span><br><span class="line">ZoneId.systemDefault()</span><br><span class="line"><span class="comment">//北京时区</span></span><br><span class="line"><span class="type">ZoneId</span> <span class="variable">bjZone</span> <span class="operator">=</span> ZoneId.of(<span class="string">&quot;GMT+08:00&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// LocalDate获取时间戳</span></span><br><span class="line"><span class="comment">//创建localDate：2021-06-16</span></span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">localDate</span> <span class="operator">=</span> LocalDate.now();</span><br><span class="line"><span class="comment">//localDate 转 LocalDateTime ：2021-06-16T00:00</span></span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">localDateTime</span> <span class="operator">=</span> localDate.atStartOfDay();</span><br><span class="line"><span class="comment">//LocalDateTime  epoch-second 值，它是从 1970-01-01T00:00:00Z 开始经过的秒数。</span></span><br><span class="line"><span class="type">long</span> <span class="variable">l1</span> <span class="operator">=</span> localDateTime.atZone(ZoneId.systemDefault()).toEpochSecond();</span><br><span class="line"><span class="comment">//toEpochMilli: 自 1970-01-01T00:00:00Z 纪元以来的毫秒数</span></span><br><span class="line"><span class="type">long</span> <span class="variable">l2</span> <span class="operator">=</span> localDateTime.atZone(ZoneId.systemDefault()).toInstant().toEpochMilli();</span><br><span class="line">System.out.println(<span class="string">&quot;秒 : &quot;</span>+l1);</span><br><span class="line">System.out.println(<span class="string">&quot;毫秒 : &quot;</span>+l2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// LocalDateTime获取时间戳</span></span><br><span class="line"><span class="comment">// 获取秒</span></span><br><span class="line"><span class="type">long</span> <span class="variable">l</span> <span class="operator">=</span> LocalDateTime.now().atZone(ZoneId.systemDefault()).toEpochSecond();</span><br><span class="line"><span class="comment">//获取毫秒</span></span><br><span class="line"><span class="type">long</span> <span class="variable">l1</span> <span class="operator">=</span> LocalDateTime.now().atZone(ZoneId.systemDefault()).toInstant().toEpochMilli();</span><br><span class="line">System.out.println(<span class="string">&quot;秒： &quot;</span>+l);</span><br><span class="line">System.out.println(<span class="string">&quot;毫秒： &quot;</span>+l1);</span><br></pre></td></tr></table></figure><h2 id="LocalDateTime-与-LocalDate-的相互转化"><a href="#LocalDateTime-与-LocalDate-的相互转化" class="headerlink" title="LocalDateTime 与 LocalDate 的相互转化"></a>LocalDateTime 与 LocalDate 的相互转化</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// LocalDateTime-&gt;LocalDate</span></span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">localDate</span> <span class="operator">=</span> now.toLocalDate();</span><br><span class="line"></span><br><span class="line"><span class="comment">// LocalDate-&gt;LocalDateTime</span></span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">localDate</span> <span class="operator">=</span> LocalDate.now();</span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">localDateTime1</span> <span class="operator">=</span> localDate.atStartOfDay();</span><br><span class="line"><span class="comment">//23时1分2秒</span></span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">localDateTime2</span> <span class="operator">=</span> localDate.atTime(<span class="number">23</span>,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"><span class="comment">//localTime ：时、分、秒、毫秒 ： 10:18:43.639</span></span><br><span class="line"><span class="type">LocalTime</span> <span class="variable">localTime</span> <span class="operator">=</span> LocalTime.now();</span><br><span class="line"><span class="comment">//拼接当前时间</span></span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">localDateTime3</span> <span class="operator">=</span> localDate.atTime(localTime);</span><br><span class="line">System.out.println(<span class="string">&quot;atStartOfDay:日期后面拼接 00点00分 ： &quot;</span>+localDateTime</span><br><span class="line">System.out.println(<span class="string">&quot;atTime：参数分别代表 时、分、秒： &quot;</span>+localDateTime2);</span><br><span class="line">System.out.println(<span class="string">&quot;atTime:拼接当前localTime : &quot;</span>+localDateTime3);</span><br></pre></td></tr></table></figure><h2 id="LocalDateTime-与-String-的相互转化"><a href="#LocalDateTime-与-String-的相互转化" class="headerlink" title="LocalDateTime 与 String 的相互转化"></a>LocalDateTime 与 String 的相互转化</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.具有转换功能的对象`</span></span><br><span class="line"></span><br><span class="line"><span class="type">DateTimeFormatter</span> <span class="variable">df</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(``<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>``);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.要转换的对象`    </span></span><br><span class="line"></span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">time</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.发动功能`</span></span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">localTime</span> <span class="operator">=</span> df.format(time);`</span><br><span class="line"></span><br><span class="line">System.out.println(``<span class="string">&quot;LocalDateTime转成String类型的时间：&quot;</span>``+localTime);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.LocalDate发动，将字符串转换成  df格式的LocalDateTime对象，的功能`</span></span><br><span class="line"></span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">LocalTime</span> <span class="operator">=</span> LocalDateTime.parse(localTime,df)</span><br><span class="line"></span><br><span class="line">System.out.println(``<span class="string">&quot;String类型的时间转成LocalDateTime：&quot;</span>``+LocalTime);</span><br></pre></td></tr></table></figure><h2 id="LocalDate-与-String-的相互转化"><a href="#LocalDate-与-String-的相互转化" class="headerlink" title="LocalDate 与 String 的相互转化"></a>LocalDate 与 String 的相互转化</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">DateTimeFormatter</span> <span class="variable">struct</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(``<span class="string">&quot;yyyy-MM-dd&quot;</span>``)</span><br><span class="line"></span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">localDate</span> <span class="operator">=</span> LocalDate.now();</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">format</span> <span class="operator">=</span> struct.format(localDate)</span><br><span class="line"></span><br><span class="line">System.out.println(``<span class="string">&quot;LocalDate转成String类型的时间：&quot;</span>``+format)</span><br><span class="line"></span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">parse</span> <span class="operator">=</span> LocalDate.parse(format,struct)</span><br><span class="line"></span><br><span class="line">System.out.println(``<span class="string">&quot;String类型的时间转成LocalDateTime：&quot;</span>``+parse);</span><br></pre></td></tr></table></figure><h2 id="LocalDateTime-与-Date-的相互转化"><a href="#LocalDateTime-与-Date-的相互转化" class="headerlink" title="LocalDateTime 与 Date 的相互转化"></a>LocalDateTime 与 Date 的相互转化</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Date-&gt;LocalDateTime</span></span><br><span class="line">java.util.<span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span>` `<span class="keyword">new</span>` `java.util.Date();</span><br><span class="line"></span><br><span class="line"><span class="type">Instant</span> <span class="variable">instant</span> <span class="operator">=</span> date.toInstant();</span><br><span class="line"></span><br><span class="line"><span class="type">ZoneId</span> <span class="variable">zone</span> <span class="operator">=</span> ZoneId.systemDefault();</span><br><span class="line"></span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">localDateTime</span> <span class="operator">=</span> LocalDateTime.ofInstant(instant, zone);</span><br><span class="line"></span><br><span class="line"><span class="comment">// LocalDateTime-&gt;Date</span></span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">localDateTime</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line"></span><br><span class="line"><span class="type">ZoneId</span> <span class="variable">zone</span> <span class="operator">=</span> ZoneId.systemDefault();</span><br><span class="line"></span><br><span class="line"><span class="type">Instant</span> <span class="variable">instant</span> <span class="operator">=</span> localDateTime.atZone(zone).toInstant();</span><br><span class="line"></span><br><span class="line">java.util.<span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> Date.from(instant);</span><br></pre></td></tr></table></figure><h2 id="LocalDate-与-Date-的相互转化"><a href="#LocalDate-与-Date-的相互转化" class="headerlink" title="LocalDate 与 Date 的相互转化"></a>LocalDate 与 Date 的相互转化</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// LocalDate-&gt;Date</span></span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">localDate</span> <span class="operator">=</span> LocalDate.now();</span><br><span class="line"></span><br><span class="line"><span class="type">ZoneId</span> <span class="variable">zone</span> <span class="operator">=</span> ZoneId.systemDefault();</span><br><span class="line"></span><br><span class="line"><span class="type">Instant</span> <span class="variable">instant</span> <span class="operator">=</span> localDate.atStartOfDay().atZone(zone).toInstant();</span><br><span class="line"></span><br><span class="line">java.util.<span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> Date.from(instant);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Date-&gt;LocalDate</span></span><br><span class="line"><span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="type">Instant</span> <span class="variable">instant</span> <span class="operator">=</span> date.toInstant();</span><br><span class="line"><span class="type">ZoneId</span> <span class="variable">zoneId</span> <span class="operator">=</span> ZoneId.systemDefault();</span><br><span class="line"><span class="comment">// atZone()方法返回在指定时区从此Instant生成的ZonedDateTime。</span></span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">localDate</span> <span class="operator">=</span> instant.atZone(zoneId).toLocalDate();</span><br></pre></td></tr></table></figure><h2 id="调整时间"><a href="#调整时间" class="headerlink" title="调整时间"></a>调整时间</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">LocalDateTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line"><span class="comment">//明天</span></span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">plusDays</span> <span class="operator">=</span> now.plusDays(<span class="number">1</span>);</span><br><span class="line"><span class="comment">//昨天</span></span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">plusDays2</span> <span class="operator">=</span> now.plusDays(-<span class="number">1</span>);</span><br><span class="line"><span class="comment">//还有时分等同理</span></span><br></pre></td></tr></table></figure><h2 id="间隔计算"><a href="#间隔计算" class="headerlink" title="间隔计算"></a>间隔计算</h2><p>使用 Duration 进行 day,hour,minute,second 等的计算<br>使用 Period 进行 Year,Month 的计算</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Duration</span> <span class="variable">duration</span> <span class="operator">=</span> Duration.between(localDateTime,localDateTime4);</span><br><span class="line">duration.toDays();</span><br><span class="line">duration.toHours();</span><br><span class="line">duration.toMinutes();</span><br><span class="line"></span><br><span class="line"><span class="type">Period</span> <span class="variable">period2</span> <span class="operator">=</span> Period.between(localDateTime.toLocalDate(),localDateTime4.toLocalDate());</span><br><span class="line">period2.getYears();</span><br><span class="line">period2.getMonths();</span><br><span class="line">period2.toTotalMonths();</span><br></pre></td></tr></table></figure><h2 id="判断是否是今天或昨天"><a href="#判断是否是今天或昨天" class="headerlink" title="判断是否是今天或昨天"></a>判断是否是今天或昨天</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">time</span> <span class="operator">=</span> <span class="string">&quot;2018-08-09 11:20:45&quot;</span>;</span><br><span class="line">  <span class="type">DateTimeFormatter</span> <span class="variable">dtf</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(<span class="string">&quot;uuuu-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">  <span class="type">LocalDateTime</span> <span class="variable">localTime</span> <span class="operator">=</span> LocalDateTime.parse(time, dtf);</span><br><span class="line">  <span class="type">LocalDateTime</span> <span class="variable">startTime</span> <span class="operator">=</span> LocalDate.now().atTime(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="type">LocalDateTime</span> <span class="variable">endTime</span> <span class="operator">=</span> LocalDate.now().atTime(<span class="number">23</span>, <span class="number">59</span>, <span class="number">59</span>);</span><br><span class="line">  <span class="type">LocalDateTime</span> <span class="variable">startYesterday</span> <span class="operator">=</span> LocalDate.now().plusDays(-<span class="number">1</span>).atTime(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="type">LocalDateTime</span> <span class="variable">endYesterday</span> <span class="operator">=</span> LocalDate.now().plusDays(-<span class="number">1</span>).atTime(<span class="number">23</span>, <span class="number">59</span>, <span class="number">59</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//如果小于昨天的开始日期</span></span><br><span class="line">  <span class="keyword">if</span> (localTime.isBefore(startYesterday)) &#123;</span><br><span class="line">   System.out.println(<span class="string">&quot;时间是过去&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//时间是昨天</span></span><br><span class="line">  <span class="keyword">if</span> (localTime.isAfter(startYesterday) &amp;&amp; localTime.isBefore(endYesterday)) &#123;</span><br><span class="line">   System.out.println(<span class="string">&quot;时间是昨天&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//如果大于今天的开始日期，小于今天的结束日期</span></span><br><span class="line">  <span class="keyword">if</span> (localTime.isAfter(startTime) &amp;&amp; localTime.isBefore(endTime)) &#123;</span><br><span class="line">   System.out.println(<span class="string">&quot;时间是今天&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//如果大于今天的结束日期</span></span><br><span class="line">  <span class="keyword">if</span> (localTime.isAfter(endTime)) &#123;</span><br><span class="line">   System.out.println(<span class="string">&quot;时间是未来&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="循环某段时间"><a href="#循环某段时间" class="headerlink" title="循环某段时间"></a>循环某段时间</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">LocalDate</span> <span class="variable">start</span> <span class="operator">=</span> LocalDate.of(<span class="number">2019</span>, <span class="number">4</span>, <span class="number">29</span>);</span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">end</span> <span class="operator">=</span> LocalDate.of(<span class="number">2019</span>, <span class="number">7</span>, <span class="number">29</span>);</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">System.out.println(start);</span><br><span class="line">start = start.plusDays(<span class="number">1</span>);</span><br><span class="line">&#125; <span class="keyword">while</span> (start.toEpochDay() &lt;= end.toEpochDay());</span><br></pre></td></tr></table></figure><h2 id="获取最近-7-天每天开始和结束时间戳"><a href="#获取最近-7-天每天开始和结束时间戳" class="headerlink" title="获取最近 7 天每天开始和结束时间戳"></a>获取最近 7 天每天开始和结束时间戳</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">LocalDate</span> <span class="variable">start</span> <span class="operator">=</span> LocalDate.now().plusDays(-<span class="number">7</span>);</span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">end</span> <span class="operator">=</span> LocalDate.now();</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">start.atStartOfDay().atZone(ZoneId.systemDefault()).toInstant().toEpochMilli();</span><br><span class="line">start.atTime(LocalTime.MAX).atZone(ZoneId.systemDefault())</span><br><span class="line">.toInstant().toEpochMilli();</span><br><span class="line">start = start.plusDays(<span class="number">1</span>);</span><br><span class="line">&#125; <span class="keyword">while</span> (start.toEpochDay() &lt;= end.toEpochDay());</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
          <category> studyEveryday </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> Java </tag>
            
            <tag> studyEveryday </tag>
            
            <tag> 时间日期整理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>获取当前系统的文件分隔符</title>
      <link href="/posts/26054.html"/>
      <url>/posts/26054.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">outPath</span> <span class="operator">=</span> parentFile.getCanonicalPath() + File.separator + <span class="string">&quot;temp-&quot;</span> + fileName;<span class="comment">// File.separator会根据当前的系统自动获得&#x27;/&#x27;或者&#x27;\\&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
          <category> studyEveryday </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> Java </tag>
            
            <tag> studyEveryday </tag>
            
            <tag> 获取当前系统的文件分隔符 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决cookie跨域问题</title>
      <link href="/posts/40883.html"/>
      <url>/posts/40883.html</url>
      
        <content type="html"><![CDATA[<p>业务需求：当前网站想要访问第三方网站的页面，第三方网站的页面接口都需要使用 cookie 认证授权<br>遇到的问题：当前网站和第三方网站不同域。在当前网站使用 iframe。跳转到第三方时。后台通过接口得到的 cookie 无法传递</p><p>解决方式 1:<br>nginx 反向代理，用当前网站的域代理第三方网站,然后用当前网站的域+第三方网站的接口 url 就能获取第三方网站的页面或数据<br>示例：<br>nginx.conf</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen  19100;</span><br><span class="line">        #server_name  localhost;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://47.95.34.252:8084;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>js</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> url = <span class="string">&#x27;http://127.0.0.1:19100/JcjcGl/Dcztjctky/Dcztbx&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">initPage</span>(<span class="params"></span>) &#123;</span><br><span class="line">  $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="title class_">Hussar</span>.<span class="property">ctxPath</span> + <span class="string">&#x27;/tTzJzdcDmjcd/jiuzhouAuth&#x27;</span>,</span><br><span class="line">    <span class="attr">async</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="title function_">success</span>(<span class="params">res</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (res.<span class="property">code</span> == <span class="number">200</span>) &#123;</span><br><span class="line">        $(<span class="string">&#x27;#page&#x27;</span>).<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>, url)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title class_">Hussar</span>.<span class="title function_">error</span>(<span class="string">&#x27;九州系统认证失败,请刷新重试&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">error</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title class_">Hussar</span>.<span class="title function_">error</span>(<span class="string">&#x27;九州系统认证失败，请刷新重试&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/jiuzhouAuth&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">jiuzhouAuth</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    Map&lt;String, Object&gt; res = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cookieStr</span> <span class="operator">=</span> dmjcdService.callRemoteInterfaceGetCookie();</span><br><span class="line">        response.setHeader(<span class="string">&quot;Set-Cookie&quot;</span>, cookieStr);</span><br><span class="line">        res.put(<span class="string">&quot;code&quot;</span>, HttpCode.OK);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        res.put(<span class="string">&quot;code&quot;</span>, HttpCode.INTERNAL_SERVER_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
          <category> studyEveryday </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> Java </tag>
            
            <tag> studyEveryday </tag>
            
            <tag> 解决cookie跨域问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>过滤枚举</title>
      <link href="/posts/59869.html"/>
      <url>/posts/59869.html</url>
      
        <content type="html"><![CDATA[<p>枚举类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户角色的枚举类</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">RoleEnum</span> &#123;</span><br><span class="line">    <span class="comment">// 仓储角色</span></span><br><span class="line">    LABORATORY_PERSON(<span class="string">&quot;LABORATORY_PERSON&quot;</span>,</span><br><span class="line">                      <span class="string">&quot;实验室人员&quot;</span>,</span><br><span class="line">                      <span class="string">&quot;365ef7b96870d8acdd4a016866193278&quot;</span>,</span><br><span class="line">                      <span class="string">&quot;laboratoryPersonIndex.html&quot;</span>,</span><br><span class="line">                      <span class="string">&quot;goods&quot;</span>),</span><br><span class="line">    EQUIPMENT_MANAGEMENT_PERSON(<span class="string">&quot;EQUIPMENT_MANAGEMENT_PERSON&quot;</span>,</span><br><span class="line">                                <span class="string">&quot;设备管理员&quot;</span>,</span><br><span class="line">                                <span class="string">&quot;34ea46330ea7757982a1bde76d6f33bd&quot;</span>,</span><br><span class="line">                                <span class="string">&quot;equipmentManagePersonIndex.html&quot;</span>,</span><br><span class="line">                                <span class="string">&quot;goods&quot;</span>),</span><br><span class="line">    NORMAL_PERSON(<span class="string">&quot;NORMAL_PERSON&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;普通用户&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;7d9414e9a89692843acde8870de586d0&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;normalPersonIndex.html&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;goods&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 业务角色</span></span><br><span class="line">    BUY_PERSON(</span><br><span class="line">        <span class="string">&quot;BUY_PERSON&quot;</span>,</span><br><span class="line">        <span class="string">&quot;采购人员&quot;</span>,</span><br><span class="line">        <span class="string">&quot;9cec100a371ab680b1c26284d423a416&quot;</span>,</span><br><span class="line">        <span class="string">&quot;buyPersonIndex.html&quot;</span>,</span><br><span class="line">        <span class="string">&quot;biz&quot;</span>),</span><br><span class="line">    GOODS_MANAGEMENT_PERSON(<span class="string">&quot;GOODS_MANAGEMENT_PERSON&quot;</span>,</span><br><span class="line">                            <span class="string">&quot;物资管理员&quot;</span>,</span><br><span class="line">                            <span class="string">&quot;d21575130f577013a307a1e5aa8ca1fe&quot;</span>,</span><br><span class="line">                            <span class="string">&quot;goodsManagementPersonIndex.html&quot;</span>,</span><br><span class="line">                            <span class="string">&quot;biz&quot;</span>),</span><br><span class="line">    SELL_PERSON(<span class="string">&quot;SELL_PERSON&quot;</span>,</span><br><span class="line">                <span class="string">&quot;出库人员&quot;</span>,</span><br><span class="line">                <span class="string">&quot;b65766942f5ec940476c93530ad2eea3&quot;</span>,</span><br><span class="line">                <span class="string">&quot;sellPerson.html&quot;</span>,</span><br><span class="line">                <span class="string">&quot;biz&quot;</span>),</span><br><span class="line">    SELL_PERSON_LEADER(<span class="string">&quot;SELL_PERSON_LEADER&quot;</span>,</span><br><span class="line">                       <span class="string">&quot;出库人员领导&quot;</span>,</span><br><span class="line">                       <span class="string">&quot;8ac454ce1338c811d7d83b4006a77bc1&quot;</span>,</span><br><span class="line">                       <span class="string">&quot;sellPerson.html&quot;</span>,</span><br><span class="line">                       <span class="string">&quot;biz&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 管理员</span></span><br><span class="line">    SUPER_ADMIN(<span class="string">&quot;SUPER_ADMIN&quot;</span>,</span><br><span class="line">                <span class="string">&quot;超级管理员&quot;</span>,</span><br><span class="line">                <span class="string">&quot;superadmin_role&quot;</span>,</span><br><span class="line">                <span class="string">&quot;superAdmin.html&quot;</span>,</span><br><span class="line">                <span class="string">&quot;sys&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String role;</span><br><span class="line">    <span class="keyword">private</span> String roleName;</span><br><span class="line">    <span class="keyword">private</span> String roleId;</span><br><span class="line">    <span class="keyword">private</span> String welcomePage;</span><br><span class="line">    <span class="keyword">private</span> String <span class="keyword">module</span>;</span><br><span class="line"></span><br><span class="line">    RoleEnum() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    RoleEnum(String role, String roleName, String roleId, String welcomePage, String <span class="keyword">module</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.role = role;</span><br><span class="line">        <span class="built_in">this</span>.roleName = roleName;</span><br><span class="line">        <span class="built_in">this</span>.roleId = roleId;</span><br><span class="line">        <span class="built_in">this</span>.welcomePage = welcomePage;</span><br><span class="line">        <span class="built_in">this</span>.<span class="keyword">module</span> = <span class="keyword">module</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得用户的角色枚举</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> roleId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> RoleEnum <span class="title function_">getUserRole</span><span class="params">(String roleId)</span> &#123;</span><br><span class="line">    <span class="type">RoleEnum</span> <span class="variable">roleEnum</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    Optional&lt;RoleEnum&gt; optional = Arrays.stream(RoleEnum.values()).filter(e -&gt; roleId.equals(e.getRoleId())).findFirst();</span><br><span class="line">    <span class="keyword">if</span> (optional.isPresent()) &#123;</span><br><span class="line">        roleEnum = optional.get();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 这里应该用orElse优化</span></span><br><span class="line">    <span class="keyword">return</span> roleEnum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
          <category> stream </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> Java </tag>
            
            <tag> stream </tag>
            
            <tag> 过滤枚举 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lambda用法整理</title>
      <link href="/posts/53080.html"/>
      <url>/posts/53080.html</url>
      
        <content type="html"><![CDATA[<h2 id="使用-lambda-表达式建立子线程任务并阻塞主线程"><a href="#使用-lambda-表达式建立子线程任务并阻塞主线程" class="headerlink" title="使用 lambda 表达式建立子线程任务并阻塞主线程"></a>使用 lambda 表达式建立子线程任务并阻塞主线程</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 阻塞主线程的计数器</span></span><br><span class="line">        <span class="type">CountDownLatch</span> <span class="variable">countDownLanch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(cycleNum);</span><br><span class="line">       <span class="comment">// 局部的线程池</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newFixedThreadPool(cycleNum &gt; <span class="number">4</span> ? <span class="number">4</span> : cycleNum);</span><br><span class="line">      <span class="comment">// cycleNum是要执行子线程的次数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; cycleNum; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> i * <span class="number">10000</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">10000</span>;</span><br><span class="line">            executor.execute(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        List&lt;Map&lt;String, Double&gt;&gt; dataListTemp = dataShowMapper.getWaveEchartsCorrectDataNoSparse(csrwId, xb, <span class="string">&quot;0&quot;</span>, <span class="string">&quot;0&quot;</span>, start, num);</span><br><span class="line">                        <span class="keyword">for</span> (Map&lt;String, Double&gt; dataMap : dataListTemp) &#123;</span><br><span class="line">                            ZSetOperations.TypedTuple&lt;Map&lt;String, Double&gt;&gt; typedTuple = <span class="keyword">new</span> <span class="title class_">DefaultTypedTuple</span>&lt;&gt;(dataMap, dataMap.get(<span class="string">&quot;kms&quot;</span>));</span><br><span class="line">                            tuples.add(typedTuple);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">// 每执行一次子线程（计数器减一）</span></span><br><span class="line">                   countDownLanch.countDown();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 阻塞主线程</span></span><br><span class="line">            countDownLanch.await();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">// 子线程都执行完后，关闭局部线程池</span></span><br><span class="line">        executor.shutdown();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
          <category> lambda </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> Java </tag>
            
            <tag> lambda </tag>
            
            <tag> lambda用法整理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Date类型</title>
      <link href="/posts/39843.html"/>
      <url>/posts/39843.html</url>
      
        <content type="html"><![CDATA[<h2 id="两个日期之间相差的天数，日期为单位（比如相差两秒，可能就相差一天，12-23-59：59-和-13-01-00：00-就相差一天）"><a href="#两个日期之间相差的天数，日期为单位（比如相差两秒，可能就相差一天，12-23-59：59-和-13-01-00：00-就相差一天）" class="headerlink" title="两个日期之间相差的天数，日期为单位（比如相差两秒，可能就相差一天，12:23:59：59 和 13:01:00：00 就相差一天）"></a>两个日期之间相差的天数，日期为单位（比如相差两秒，可能就相差一天，12:23:59：59 和 13:01:00：00 就相差一天）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * date2比date1多的天数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> date1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> date2</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">differentDays</span><span class="params">(Date date1,Date date2)</span> &#123;</span><br><span class="line">  <span class="type">Calendar</span> <span class="variable">cal1</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">  cal1.setTime(date1);</span><br><span class="line"></span><br><span class="line">  <span class="type">Calendar</span> <span class="variable">cal2</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">  cal2.setTime(date2);</span><br><span class="line">  <span class="type">int</span> day1= cal1.get(Calendar.DAY_OF_YEAR);</span><br><span class="line">  <span class="type">int</span> <span class="variable">day2</span> <span class="operator">=</span> cal2.get(Calendar.DAY_OF_YEAR);</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> <span class="variable">year1</span> <span class="operator">=</span> cal1.get(Calendar.YEAR);</span><br><span class="line">  <span class="type">int</span> <span class="variable">year2</span> <span class="operator">=</span> cal2.get(Calendar.YEAR);</span><br><span class="line">  <span class="keyword">if</span>(year1 != year2) &#123;<span class="comment">//同一年</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">timeDistance</span> <span class="operator">=</span> <span class="number">0</span> ;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> year1 ; i &lt; year2 ; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span>(i%<span class="number">4</span>==<span class="number">0</span> &amp;&amp; i%<span class="number">100</span>!=<span class="number">0</span> || i%<span class="number">400</span>==<span class="number">0</span>)    <span class="comment">//闰年</span></span><br><span class="line">      &#123;</span><br><span class="line">        timeDistance += <span class="number">366</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span>    <span class="comment">//不是闰年</span></span><br><span class="line">      &#123;</span><br><span class="line">        timeDistance += <span class="number">365</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> timeDistance + (day2-day1) ;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;<span class="comment">// 不同年</span></span><br><span class="line">    System.out.println(<span class="string">&quot;判断day2 - day1 : &quot;</span> + (day2-day1));</span><br><span class="line">    <span class="keyword">return</span> day2-day1;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="两个日期之间相差的天数，以毫秒数精确计算（比如相差-22-小时可能是同一天）"><a href="#两个日期之间相差的天数，以毫秒数精确计算（比如相差-22-小时可能是同一天）" class="headerlink" title="两个日期之间相差的天数，以毫秒数精确计算（比如相差 22 小时可能是同一天）"></a>两个日期之间相差的天数，以毫秒数精确计算（比如相差 22 小时可能是同一天）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过秒毫秒数判断两个时间的间隔的天数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> date1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> date2</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">differentDaysByMillisecond</span><span class="params">(Date date1,Date date2)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> <span class="variable">days</span> <span class="operator">=</span> (<span class="type">int</span>) ((date2.getTime() - date1.getTime()) / (<span class="number">1000</span>*<span class="number">3600</span>*<span class="number">24</span>));</span><br><span class="line">  <span class="keyword">return</span> days;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="两个日期是否是同一天"><a href="#两个日期是否是同一天" class="headerlink" title="两个日期是否是同一天"></a>两个日期是否是同一天</h2><p><a href="https://blog.csdn.net/w605283073/article/details/103335373">判断同一天的博客</a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isSameDay</span><span class="params">(Date date1, Date date2)</span> &#123;</span><br><span class="line">  <span class="type">LocalDate</span> <span class="variable">localDate1</span> <span class="operator">=</span> date1.toInstant()</span><br><span class="line">    .atZone(ZoneId.systemDefault())</span><br><span class="line">    .toLocalDate();</span><br><span class="line">  <span class="type">LocalDate</span> <span class="variable">localDate2</span> <span class="operator">=</span> date2.toInstant()</span><br><span class="line">    .atZone(ZoneId.systemDefault())</span><br><span class="line">    .toLocalDate();</span><br><span class="line">  <span class="keyword">return</span> localDate1.isEqual(localDate2);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另一种方式</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isSameDay</span><span class="params">(Date date1, Date date2)</span> &#123;</span><br><span class="line">    <span class="type">SimpleDateFormat</span> <span class="variable">fmt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyyMMdd&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> fmt.format(date1).equals(fmt.format(date2));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
          <category> util </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> Java </tag>
            
            <tag> util </tag>
            
            <tag> Date类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>unzip解压</title>
      <link href="/posts/9281.html"/>
      <url>/posts/9281.html</url>
      
        <content type="html"><![CDATA[<h2 id="无论压缩文件下有多少层级，所有解压后的文件都统一放在-outFileDir-文件夹下，且只保留压缩的文件，压缩的文件夹不保留"><a href="#无论压缩文件下有多少层级，所有解压后的文件都统一放在-outFileDir-文件夹下，且只保留压缩的文件，压缩的文件夹不保留" class="headerlink" title="无论压缩文件下有多少层级，所有解压后的文件都统一放在 outFileDir 文件夹下，且只保留压缩的文件，压缩的文件夹不保留"></a>无论压缩文件下有多少层级，所有解压后的文件都统一放在 outFileDir 文件夹下，且只保留压缩的文件，压缩的文件夹不保留</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"><span class="keyword">import</span> java.util.zip.ZipEntry;</span><br><span class="line"><span class="keyword">import</span> java.util.zip.ZipFile;</span><br><span class="line"><span class="keyword">import</span> java.util.zip.ZipInputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(unzip(<span class="string">&quot;C:\\Users\\13551\\Desktop\\a\\a.zip&quot;</span>, <span class="string">&quot;C:\\Users\\13551\\Desktop\\a&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">unzip</span><span class="params">(String inFilePath, String outDirPath)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 先对目标文件夹做一些判定</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">destFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(outDirPath);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (destFile.isFile()) &#123;<span class="comment">// 目标是文件错过</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!destFile.exists()) &#123;<span class="comment">// 目标文件夹不存在，先创建</span></span><br><span class="line">            destFile.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 再对源文件做一些判定</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">sourceFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(inFilePath);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (sourceFile.isDirectory() || !sourceFile.exists()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> sourceFile.getName();</span><br><span class="line">        <span class="type">String</span> <span class="variable">fileType</span> <span class="operator">=</span> fileName.substring(fileName.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="string">&quot;.zip&quot;</span>.equals(fileType)) &#123;<span class="comment">// 源文件不是zip格式的</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 一次读取1k</span></span><br><span class="line">        <span class="type">byte</span>[] buff = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">readLen</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">ZipInputStream</span> <span class="variable">zin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZipInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(inFilePath), Charset.forName(<span class="string">&quot;GBK&quot;</span>));</span><br><span class="line">                <span class="type">ZipFile</span> <span class="variable">zipFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZipFile</span>(sourceFile, Charset.forName(<span class="string">&quot;GBK&quot;</span>))) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">ZipEntry</span> <span class="variable">entry</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">while</span> (((entry = zin.getNextEntry()) != <span class="literal">null</span>)) &#123;<span class="comment">// 如果entry不为空，并不在同一个目录下</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (entry.isDirectory()) &#123;<span class="comment">// 如果是文件夹不考虑，直接跳过</span></span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="type">String</span> <span class="variable">entryName</span> <span class="operator">=</span> entry.getName().substring(entry.getName().lastIndexOf(<span class="string">&quot;/&quot;</span>) + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">                <span class="type">File</span> <span class="variable">tmp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(outDirPath + <span class="string">&quot;/&quot;</span> + entryName);<span class="comment">// 解压出的文件路径</span></span><br><span class="line">                <span class="keyword">if</span> (!tmp.exists()) &#123;<span class="comment">// 如果文件不存在</span></span><br><span class="line">                    <span class="type">File</span> <span class="variable">parentDir</span> <span class="operator">=</span> tmp.getParentFile();</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (!parentDir.exists()) &#123;</span><br><span class="line">                        parentDir.mkdirs();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> (<span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(tmp); <span class="comment">// 将文件目录中的文件放入输出流</span></span><br><span class="line">                            <span class="comment">// 用输入流读取压缩文件中制定目录中的文件</span></span><br><span class="line">                            <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> zipFile.getInputStream(entry)) &#123;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">while</span> ((readLen = in.read(buff)) != -<span class="number">1</span>) &#123;<span class="comment">// 如有输入流可以读取到数值</span></span><br><span class="line">                            os.write(buff, <span class="number">0</span>, readLen);<span class="comment">// 输出流写入</span></span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                zin.closeEntry();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
          <category> util </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> Java </tag>
            
            <tag> util </tag>
            
            <tag> unzip解压 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>stream用法整理</title>
      <link href="/posts/31338.html"/>
      <url>/posts/31338.html</url>
      
        <content type="html"><![CDATA[<h2 id="stream-流处理将用-拼接的字符串转为-Double-集合"><a href="#stream-流处理将用-拼接的字符串转为-Double-集合" class="headerlink" title="stream 流处理将用,拼接的字符串转为 Double 集合"></a>stream 流处理将用<code>,</code>拼接的字符串转为 Double 集合</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将用&#x27;,&#x27;拼接的字符串转为Double集合</span></span><br><span class="line">List&lt;Double&gt; singlePoint = Arrays.asList(pointStr.split(<span class="string">&quot;,&quot;</span>))</span><br><span class="line">                                .stream()</span><br><span class="line">                                .map(str -&gt; Double.parseDouble(str.trim()))</span><br><span class="line">                                .collect(Collectors.toList());</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
          <category> stream </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> Java </tag>
            
            <tag> stream </tag>
            
            <tag> stream用法整理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>删除文件</title>
      <link href="/posts/21569.html"/>
      <url>/posts/21569.html</url>
      
        <content type="html"><![CDATA[<h2 id="删除单个文件"><a href="#删除单个文件" class="headerlink" title="删除单个文件"></a>删除单个文件</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 删除单个文件</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> fileName 被删除文件的文件名</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> 单个文件删除成功返回true, 否则返回false</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">deleteFile</span><span class="params">(String fileName)</span> &#123;</span><br><span class="line">     <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(fileName);</span><br><span class="line">     <span class="keyword">if</span> (file.isFile() &amp;&amp; file.exists()) &#123;</span><br><span class="line">         file.delete();</span><br><span class="line">         System.out.println(<span class="string">&quot;删除单个文件&quot;</span> + fileName + <span class="string">&quot;成功！&quot;</span>);</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;删除单个文件&quot;</span> + fileName + <span class="string">&quot;失败！&quot;</span>);</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="删除某个文件夹及其之内的所有文件-需要和上面删除单个文件的方法配合使用"><a href="#删除某个文件夹及其之内的所有文件-需要和上面删除单个文件的方法配合使用" class="headerlink" title="删除某个文件夹及其之内的所有文件(需要和上面删除单个文件的方法配合使用)"></a>删除某个文件夹及其之内的所有文件(需要和上面删除单个文件的方法配合使用)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除文件夹及之下的所有文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dir</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">deleteDirectory</span><span class="params">(String dir)</span> &#123;</span><br><span class="line">        <span class="comment">// 如果dir不以文件分隔符结尾，自动添加文件分隔符</span></span><br><span class="line">        <span class="keyword">if</span> (!dir.endsWith(File.separator)) &#123;</span><br><span class="line">            dir = dir + File.separator;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">File</span> <span class="variable">dirFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(dir);</span><br><span class="line">        <span class="comment">// 如果dir对应的文件不存在，或者不是一个目录，则退出</span></span><br><span class="line">        <span class="keyword">if</span> (!dirFile.exists() || !dirFile.isDirectory()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;删除目录失败&quot;</span> + dir + <span class="string">&quot;目录不存在！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 删除文件夹下的所有文件(包括子目录)</span></span><br><span class="line">        File[] files = dirFile.listFiles();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; files.length; i++) &#123;</span><br><span class="line">            <span class="comment">// 删除子文件</span></span><br><span class="line">            <span class="keyword">if</span> (files[i].isFile()) &#123;</span><br><span class="line">                flag = deleteFile(files[i].getAbsolutePath());</span><br><span class="line">                <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 删除子目录</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                flag = deleteDirectory(files[i].getAbsolutePath());</span><br><span class="line">                <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;删除目录失败&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除当前目录</span></span><br><span class="line">        <span class="keyword">if</span> (dirFile.delete()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;删除目录&quot;</span> + dir + <span class="string">&quot;成功！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;删除目录&quot;</span> + dir + <span class="string">&quot;失败！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
          <category> util </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> Java </tag>
            
            <tag> util </tag>
            
            <tag> 删除文件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>后台运行jar包与停止运行</title>
      <link href="/posts/5084.html"/>
      <url>/posts/5084.html</url>
      
        <content type="html"><![CDATA[<p>将运行的 jar 错误日志信息输出到 log.file 文件中，然后（&gt;&amp;1）就是继续输出到标准输出(前面加的&amp;，是为了让系统识别是标准输出)，最后一个&amp;,表示在后台运行。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nohup java -jar 包名.jar  &gt; log.file  2&gt;&amp;1 &amp;</span><br><span class="line">[1] 669 #669表示运行的pid</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
          <category> command </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> Java </tag>
            
            <tag> command </tag>
            
            <tag> 后台运行jar包与停止运行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java.lang.UnsupportedOperationException：null 使用List.Add()或List.addALL() 报错</title>
      <link href="/posts/60898.html"/>
      <url>/posts/60898.html</url>
      
        <content type="html"><![CDATA[<p>还原现场：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; agentTeamIdsList =Arrays.asList(agentIdArray);</span><br><span class="line">agentTeamIdsList.add(<span class="number">123011</span>);</span><br></pre></td></tr></table></figure><p>将一个 Integer 类型数组转成 List， 上面的 Arrays.asList 是可以转成功的；</p><p>然后往转成功的 list 里面继续添加 值；</p><p>IDEA 里面并没有检测出错误，实则报错：</p><p>java.lang.UnsupportedOperationException: null</p><p>原因：</p><p>Arrays.asList 转成的 ArrayList 实际上跟往常我们创建的 new ArrayList 是不同的。</p><p>这个是 Arrays 的内部类 ArrayList：</p><p><img src="https://www.freesion.com/images/372/12fde77461883b51add3859c5bfdc23c.png" alt="img"></p><p>而我们往常使用的</p><p><img src="https://www.freesion.com/images/810/64f6f88277254496994cc617bb46e4f2.png" alt="img"></p><p>解决方案：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; agentTeamIdsList =<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(Arrays.asList(agentIdArray));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
          <category> exception </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> Java </tag>
            
            <tag> exception </tag>
            
            <tag> java.lang.UnsupportedOperationException：null 使用List.Add()或List.addALL() 报错 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>区段合并算法</title>
      <link href="/posts/45970.html"/>
      <url>/posts/45970.html</url>
      
        <content type="html"><![CDATA[<p>需求：将不连续的一维数组整合为多个连续的二维数组<br>示例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    Integer[] arr = &#123;<span class="number">1</span>&#125;;</span><br><span class="line">    <span class="comment">// Integer[] arr = &#123;1, 2&#125;;</span></span><br><span class="line">    <span class="comment">// Integer[] arr = &#123;1, 3&#125;;    // Integer[] arr = &#123;1, 2, 4&#125;;    // Integer[] arr = &#123;1, 3, 4&#125;;    // Integer[] arr = &#123;1, 2, 3&#125;;    // Integer[] arr = &#123;1, 2, 4, 5&#125;;    // Integer[] arr = &#123;1, 2, 4, 6, 7&#125;;    // Integer[] arr = &#123;1, 4, 6, 7&#125;;    // Integer[] arr = &#123;1, 2, 4, 5, 7&#125;;    List&lt;Integer&gt; mileRepeatArr = Arrays.asList(arr);</span></span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; markArr = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 筛选出各个区段</span></span><br><span class="line">    List&lt;Integer&gt; tempArr = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; mileRepeatArr.size(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">            tempArr.add(mileRepeatArr.get(i));</span><br><span class="line">            <span class="keyword">if</span> (i == mileRepeatArr.size() - <span class="number">1</span>) &#123;</span><br><span class="line">                markArr.add(tempArr);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mileRepeatArr.get(i) - mileRepeatArr.get(i - <span class="number">1</span>) != <span class="number">1</span>) &#123;</span><br><span class="line">            markArr.add(tempArr);</span><br><span class="line">            tempArr = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        tempArr.add(mileRepeatArr.get(i));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i == mileRepeatArr.size() - <span class="number">1</span>) &#123;</span><br><span class="line">            markArr.add(tempArr);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println(markArr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
          <category> algorithmCollection </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> Java </tag>
            
            <tag> algorithmCollection </tag>
            
            <tag> 区段合并算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>区段过滤算法</title>
      <link href="/posts/44147.html"/>
      <url>/posts/44147.html</url>
      
        <content type="html"><![CDATA[<p>需求：<br>一个大的区段<br>有小半径曲线段，复合曲线，平曲线和竖曲线各个不同数量不同长度的多个区段<br>这些区段可能覆盖，交叉或完全不重叠</p><p>求：不与任意特殊区段有关联的多个直线段</p><p>公共方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;ImportSectionVO&gt; <span class="title function_">filterQd</span><span class="params">(List&lt;ImportSectionVO&gt; filterList, List&lt;ImportSectionVO&gt; zxdList, String name)</span> &#123;</span><br><span class="line">    ImportSectionVO zxd;</span><br><span class="line">    ImportSectionVO filter;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; filterList.size(); i++) &#123;</span><br><span class="line">        filter = filterList.get(i);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> zxdList.size() - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">            zxd = zxdList.get(j);</span><br><span class="line">            <span class="keyword">if</span> (filter.getEndMile() &lt;= zxd.getStartMile() || filter.getStartMile() &gt;= zxd.getEndMile()) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (filter.getStartMile() &lt;= zxd.getStartMile() &amp;&amp; filter.getEndMile() &gt;= zxd.getEndMile()) &#123;</span><br><span class="line">                zxdList.remove(j);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (filter.getStartMile() &gt;= zxd.getStartMile() &amp;&amp; filter.getEndMile() &lt;= zxd.getEndMile()) &#123;</span><br><span class="line">                zxdList.remove(j);</span><br><span class="line">                zxdList.add(j, <span class="keyword">new</span> <span class="title class_">ImportSectionVO</span>(name, zxd.getStartMile(), filter.getStartMile()));</span><br><span class="line">                zxdList.add(j + <span class="number">1</span>, <span class="keyword">new</span> <span class="title class_">ImportSectionVO</span>(name, filter.getEndMile(), zxd.getEndMile()));</span><br><span class="line">                j += <span class="number">2</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (filter.getStartMile() &gt; zxd.getStartMile() &amp;&amp; filter.getStartMile() &lt; zxd.getEndMile()) &#123;</span><br><span class="line">                zxdList.remove(j);</span><br><span class="line">                zxdList.add(<span class="keyword">new</span> <span class="title class_">ImportSectionVO</span>(name, zxd.getStartMile(), filter.getStartMile()));</span><br><span class="line">                j += <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (filter.getEndMile() &gt; zxd.getStartMile() &amp;&amp; filter.getEndMile() &lt; zxd.getEndMile()) &#123;</span><br><span class="line">                zxdList.remove(j);</span><br><span class="line">                zxdList.add(<span class="keyword">new</span> <span class="title class_">ImportSectionVO</span>(name, filter.getEndMile(), zxd.getEndMile()));</span><br><span class="line">                j += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> zxdList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>公共方法的应用：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;ImportSectionVO&gt;&gt; <span class="title function_">selectXlxx</span><span class="params">(String xianbie, String xingbie, Double startMile, Double endMile)</span> &#123;</span><br><span class="line">    List&lt;List&lt;ImportSectionVO&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 顺序依次是竖曲线，平曲线，复合曲线，小半径曲线</span></span><br><span class="line">    List&lt;ImportSectionVO&gt; sqx = baseMapper.selectSqx(xianbie,</span><br><span class="line">            xingbie,</span><br><span class="line">            startMile,</span><br><span class="line">            endMile);</span><br><span class="line">    List&lt;ImportSectionVO&gt; pqx = baseMapper.selectPqx(xianbie,</span><br><span class="line">            xingbie,</span><br><span class="line">            startMile,</span><br><span class="line">            endMile);</span><br><span class="line">    List&lt;ImportSectionVO&gt; fhqx = baseMapper.selectFhqx(xianbie,</span><br><span class="line">            xingbie,</span><br><span class="line">            startMile,</span><br><span class="line">            endMile);</span><br><span class="line">    List&lt;ImportSectionVO&gt; xbjqx = baseMapper.selectSmallRadiusSection(xianbie,</span><br><span class="line">            xingbie,</span><br><span class="line">            startMile,</span><br><span class="line">            endMile);</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;复合曲线&quot;</span>;</span><br><span class="line">    fhqx = filterQd(xbjqx, fhqx, name);</span><br><span class="line"></span><br><span class="line">    name = <span class="string">&quot;平曲线&quot;</span>;</span><br><span class="line">    pqx = filterQd(xbjqx, pqx, name);</span><br><span class="line">    pqx = filterQd(fhqx, pqx, name);</span><br><span class="line"></span><br><span class="line">    name = <span class="string">&quot;竖曲线&quot;</span>;</span><br><span class="line">    sqx = filterQd(xbjqx, sqx, name);</span><br><span class="line">    sqx = filterQd(fhqx, sqx, name);</span><br><span class="line">    sqx = filterQd(pqx, sqx, name);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 直线段：筛选出所有不是任何特殊区段的区段就是直线段</span></span><br><span class="line">    List&lt;ImportSectionVO&gt; zxd = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    name = <span class="string">&quot;直线段&quot;</span>;</span><br><span class="line">    zxd.add(<span class="keyword">new</span> <span class="title class_">ImportSectionVO</span>(name, startMile, endMile));</span><br><span class="line">    filterQd(xbjqx, zxd, name);</span><br><span class="line">    filterQd(fhqx, zxd, name);</span><br><span class="line">    filterQd(pqx, zxd, name);</span><br><span class="line">    filterQd(sqx, zxd, name);</span><br><span class="line"></span><br><span class="line">    res.add(sqx);</span><br><span class="line">    res.add(pqx);</span><br><span class="line">    res.add(fhqx);</span><br><span class="line">    res.add(xbjqx);</span><br><span class="line">    res.add(zxd);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
          <category> algorithmCollection </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> Java </tag>
            
            <tag> algorithmCollection </tag>
            
            <tag> 区段过滤算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>相同数据整合示例</title>
      <link href="/posts/49919.html"/>
      <url>/posts/49919.html</url>
      
        <content type="html"><![CDATA[<p>需求：多个对象，这些对象中的部分某个特定的属性相同。把所有的对象根据这个特定的属性整合成多个分组（或统计其他）</p><p>方法示例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">demo1</span><span class="params">(List&lt;Integer&gt; ids)</span> &#123;</span><br><span class="line">    List&lt;TYwglYsXlfinfo&gt; tYwglYsXlfinfos = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    List&lt;WlHzVO&gt; exportList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (tYwglYsXlfinfos.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">WlHzVO</span> <span class="variable">wlHzVO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WlHzVO</span>();</span><br><span class="line">        BeanUtils.copyProperties(tYwglYsXlfinfos.get(<span class="number">0</span>), wlHzVO);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; tYwglYsXlfinfos.size(); i++) &#123;</span><br><span class="line">            <span class="type">TYwglYsXlfinfo</span> <span class="variable">tYwglYsXlfinfo</span> <span class="operator">=</span> tYwglYsXlfinfos.get(i);</span><br><span class="line">            <span class="keyword">if</span> (!tYwglYsXlfinfo.getWlbm().equals(wlHzVO.getWlbm())) &#123;</span><br><span class="line">                exportList.add(wlHzVO);</span><br><span class="line">                wlHzVO = <span class="keyword">new</span> <span class="title class_">WlHzVO</span>();</span><br><span class="line">                BeanUtils.copyProperties(tYwglYsXlfinfo, wlHzVO);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            setHzhj(tYwglYsXlfinfo, wlHzVO);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (i == tYwglYsXlfinfos.size() - <span class="number">1</span>) &#123;</span><br><span class="line">                exportList.add(wlHzVO);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHzhj</span><span class="params">(TYwglYsXlfinfo tYwglYsXlfinfo, WlHzVO wlHzVO)</span> &#123;</span><br><span class="line"><span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
          <category> algorithmCollection </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> Java </tag>
            
            <tag> algorithmCollection </tag>
            
            <tag> 相同数据整合示例 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm常用命令</title>
      <link href="/posts/34123.html"/>
      <url>/posts/34123.html</url>
      
        <content type="html"><![CDATA[<ol><li><p>检查前 NPM 源：<br>npm get registry</p></li><li><p>设置镜像命令<br>npm config set registry <a href="http://registry.npm.taobao.org/">http://registry.npm.taobao.org/</a> #设置淘宝镜像<br>npm config set registry<a href="https://registry.npmjs.org/">https://registry.npmjs.org</a> #设置默认镜像</p></li><li><p>初始化项目<br>建立一个空文件夹，在命令提示符进入该文件夹 执行命令初始化<br>npm init<br>按照提示输入相关信息，如果是用默认值则直接回车即可。<br>name: 项目名称<br>name: 项目名称<br>description: 项目描述<br>keywords: {Array}关键词，便于用户搜索到我们的项目<br>最后会生成 package.json 文件，这个是包的配置文件，相当于 maven 的 pom.xml<br>我们之后也可以根据需要进行修改。<br>如果想直接生成 package.json 文件，那么可以使用命令<br>npm init -y</p></li><li><p>当从 git&#x2F;svn 下载源码的时候，此时没有 node_modules 目录，使用此命令能根据 package.json 里的配置的依赖版本下载所有的依赖包<br>npm install</p></li><li><p>(老版本)将模块安装到项目的 node_modules 目录中，但不写入 package.json<br>(新版本)默认带–save 参数。效果和 npm install –save x 一样<br>npm install x</p></li><li><p>如果想替换版本，那么直接加@并以相同的命令执行即可。不用先执行卸载命令<br>没有@安装最新版本，有了@安装指定版本的依赖<br>npm install <a href="mailto:&#x78;&#64;&#49;&#x2e;&#50;&#46;&#x33;">&#x78;&#64;&#49;&#x2e;&#50;&#46;&#x33;</a></p></li><li><p>如果想安装 0.18 版本的最后一个小版本，那么写<br>npm install <a href="mailto:&#x78;&#x40;&#x30;&#x2e;&#49;&#x38;&#x2e;&#x78;">&#x78;&#x40;&#x30;&#x2e;&#49;&#x38;&#x2e;&#x78;</a></p></li><li><p>全局安装模块<br>不会将模块安装到项目的 node_modules，而是会安装到 node.js 的 node_modules 目录中<br>npm install –global x</p></li><li><p>安装项目运行依赖<br>将模块安装进项目的 node_modules 目录中，并写入 package.json 的 dependencies 中<br>npm install –save x</p></li><li><p>安装项目开发依赖<br>将模块安装进项目的 node_modules 目录中，并写入 package.json 的 devDependencies 中<br>npm install –save-dev x</p></li><li><p>dependencies 和 devDependencies 的区别<br>devDependencies 保存的是开发环境的依赖。比如 webpack，gulp 这些模块，都只是在开发阶段使用<br>dependencies 保存的是生产环境的依赖，比如 vue，vue-router 等</p></li><li><p>更新包（更新到最新版本）<br>针对项目的 node_modules 目录来说的，而且无论是开发依赖还是运行依赖都能生效<br>npm update 包名</p></li><li><p>卸载包<br>针对项目的 node_modules 目录来说的，而且无论是开发依赖还是运行依赖都能生效<br>npm uninstall 包名</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> node </category>
          
          <category> npm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> node </tag>
            
            <tag> npm </tag>
            
            <tag> npm常用命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>get请求的url经常会过长，导致数据丢失</title>
      <link href="/posts/17621.html"/>
      <url>/posts/17621.html</url>
      
        <content type="html"><![CDATA[<p>解决方案：采用 post 请求，来解决该问题，写一个采用 post 请求的函数即可</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sendByPost</span>(<span class="params">url, ids</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> oForm = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;form&#x27;</span>)</span><br><span class="line">  oForm.<span class="property">method</span> = <span class="string">&#x27;post&#x27;</span></span><br><span class="line">  oForm.<span class="property">action</span> = url</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> hasitemsids_input = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;input&#x27;</span>)</span><br><span class="line">  hasitemsids_input.<span class="property">type</span> = <span class="string">&#x27;hidden&#x27;</span></span><br><span class="line">  hasitemsids_input.<span class="property">name</span> = <span class="string">&#x27;ids&#x27;</span></span><br><span class="line">  hasitemsids_input.<span class="property">value</span> = ids</span><br><span class="line">  oForm.<span class="title function_">appendChild</span>(hasitemsids_input)</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(oForm)</span><br><span class="line"></span><br><span class="line">  oForm.<span class="title function_">submit</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以使用 formData</p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> JavaScript </category>
          
          <category> studyEveryday </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> studyEveryday </tag>
            
            <tag> JavaScript </tag>
            
            <tag> get请求的url经常会过长，导致数据丢失 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>isNaN()</title>
      <link href="/posts/15930.html"/>
      <url>/posts/15930.html</url>
      
        <content type="html"><![CDATA[<p>sNaN() 函数其实并不能像它的描述中所写的那样，数字值返回 false，其他返回 true。</p><p>实际上，它是判断一个值能否被 Number() 合法地转化成数字。</p><p>这中间有什么区别呢，主要提现在一些特别的情况如下：</p><ul><li><strong>1、数字形式的字符串</strong>。例如 “123”、”-3.14”，虽然是字符串型，但被 isNaN() 判为数，返回 false。（”12,345,678”，”1.2.3” 这些返回 true）</li><li><strong>2、空值</strong>。null、空字符串””、空数组[]，都可被 Number()合法的转为 0，于是被 isNaN 认为是数，返回 false。（undefined、空对象{}、空函数等无法转数字，返回 true）</li><li><strong>3、布尔值</strong>。Number(true)&#x3D;1,Number(false)&#x3D;0，所以 isNaN 对布尔值也返回 false。</li><li><strong>4、长度为 1 的数组</strong>。结果取决于其中元素，即：isNaN([a])&#x3D;isNaN(a)，可递归。例如 isNaN([[“1.5”]])&#x3D;false。</li><li><strong>5、数字特殊形式</strong>。例如”0xabc”、”2.5e+7”，这样的十六进制和科学计数法，即使是字符串也能转数字，所以也返回 false。</li></ul><p>可能还有其他情况，一时想不到了。</p><p>总之，很多时候不能用单纯用 isNaN() 取判断。</p><p>比如一个空值或者数组，甚至是包含字母和符号的字符串，它都有可能告诉你这是数值。还是要结合具体情况使用。</p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> JavaScript </category>
          
          <category> studyEveryday </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> studyEveryday </tag>
            
            <tag> JavaScript </tag>
            
            <tag> isNaN() </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用本地的html文件通过ajax访问服务器</title>
      <link href="/posts/3195.html"/>
      <url>/posts/3195.html</url>
      
        <content type="html"><![CDATA[<ul><li><p>在 chrome 的快捷方式上右键属性，选中快捷方式 tab，在目标栏的最后添加以下参数，然后重启 chrome，用来测试的文件就放在下面配置的 data-dir 里</p><p>注意：每个–前面都有一个空格</p><p>注意：服务器必须开启跨域访问</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">--user-data-dir=&quot;C:\Users\13551\Desktop&quot; --test-type --disable-web-security</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> JavaScript </category>
          
          <category> studyEveryday </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> studyEveryday </tag>
            
            <tag> JavaScript </tag>
            
            <tag> 利用本地的html文件通过ajax访问服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态加载上传图片</title>
      <link href="/posts/32149.html"/>
      <url>/posts/32149.html</url>
      
        <content type="html"><![CDATA[<p>前端</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 就是获取图片的存储路径，让图片标签的src值指向一个后台写流的方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showImg</span>(<span class="params">img</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> url = img.<span class="property">url</span></span><br><span class="line">  <span class="keyword">let</span> path = <span class="string">&#x27;/uploadFileFile/getBytesByAbsolutePath?imgPath=&#x27;</span> + url</span><br><span class="line">  $(<span class="string">&#x27;img&#x27;</span>).<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>, path)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后端</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 根据图片的绝对路径返回字节流</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/getBytesByAbsolutePath&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getBytesByAbsolutePath</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span>  Exception&#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">imgPath</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;imgPath&quot;</span>);</span><br><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(imgPath);</span><br><span class="line"><span class="keyword">if</span>(file.exists())&#123;</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line"><span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[is.available()];</span><br><span class="line">is.read(bytes);</span><br><span class="line">is.close();</span><br><span class="line"><span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line">response.setContentType(<span class="string">&quot;image/*&quot;</span>);</span><br><span class="line">os.write(bytes);</span><br><span class="line">os.close();</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;图片不存在&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> JavaScript </category>
          
          <category> studyEveryday </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> studyEveryday </tag>
            
            <tag> JavaScript </tag>
            
            <tag> 动态加载上传图片 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>后台接口返回的数据出现了$ref，$data.xxx的字样</title>
      <link href="/posts/54591.html"/>
      <url>/posts/54591.html</url>
      
        <content type="html"><![CDATA[<p>分析原因：个人理解是如果后台返回了个 map,map 里面放了两个 key 值，但是这两个 key 所对应的 value 指向的是同一个目标地址，概括为两个 key 所对应的 value 是同一个，或者说一个 value 对象（值相同，地址相同）用 map 的两个 key 值存储，那么返回前台时，第二个 key 的值不会是 value 而是第一个 key 的 value 的地址。</p><p>可以简单理解为：map 里面有重复的 value,那么就会出现如标题所示的字样。</p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> JavaScript </category>
          
          <category> studyEveryday </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> studyEveryday </tag>
            
            <tag> JavaScript </tag>
            
            <tag> 后台接口返回的数据出现了$ref，$data.xxx的字样 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用的区段查询表单验证</title>
      <link href="/posts/58527.html"/>
      <url>/posts/58527.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-正整数区段查询"><a href="#1-正整数区段查询" class="headerlink" title="1.正整数区段查询"></a>1.正整数区段查询</h2><p>支持全不填，全填，和单独填任意一个</p><p>html 代码</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-input-inline&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">    <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">id</span>=<span class="string">&quot;sjtjStartMile&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">placeholder</span>=<span class="string">&quot;开始里程（m）&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">&quot;layui-input&quot;</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-form-mid&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-input-inline&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">    <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">id</span>=<span class="string">&quot;sjtjEndMile&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">placeholder</span>=<span class="string">&quot;结束里程（m）&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">&quot;layui-input&quot;</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>js 代码</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 表单验证开始</span></span><br><span class="line"><span class="keyword">let</span> startMile = $(<span class="string">&#x27;#sjtjStartMile&#x27;</span>).<span class="title function_">val</span>()</span><br><span class="line"><span class="keyword">let</span> endMile = $(<span class="string">&#x27;#sjtjEndMile&#x27;</span>).<span class="title function_">val</span>()</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isNaN</span>(startMile) || <span class="title class_">Number</span>(startMile) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="title class_">Hussar</span>.<span class="title function_">info</span>(<span class="string">&#x27;起始里程必须大于等于0&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isNaN</span>(endMile) || <span class="title class_">Number</span>(endMile) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="title class_">Hussar</span>.<span class="title function_">info</span>(<span class="string">&#x27;终止里程必须大于等于0&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (startMile &amp;&amp; endMile &amp;&amp; <span class="title class_">Number</span>(startMile) &gt;= <span class="title class_">Number</span>(endMile)) &#123;</span><br><span class="line">  <span class="title class_">Hussar</span>.<span class="title function_">info</span>(<span class="string">&#x27;起始里程必须小于终止里程&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 表单验证结束</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> JavaScript </category>
          
          <category> studyEveryday </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> studyEveryday </tag>
            
            <tag> JavaScript </tag>
            
            <tag> 常用的区段查询表单验证 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见的前端手写功能</title>
      <link href="/posts/11266.html"/>
      <url>/posts/11266.html</url>
      
        <content type="html"><![CDATA[<h1 id="1、防抖"><a href="#1、防抖" class="headerlink" title="1、防抖"></a>1、防抖</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">fn, delay</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timer</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">      <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">    &#125;</span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args)</span><br><span class="line">    &#125;, delay)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">task</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;run task&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> debounceTask = <span class="title function_">debounce</span>(task, <span class="number">1000</span>)</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, debounceTask)</span><br></pre></td></tr></table></figure><h1 id="2、节流"><a href="#2、节流" class="headerlink" title="2、节流"></a>2、节流</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">fn, delay</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> last = <span class="number">0</span> <span class="comment">// 上次触发时间</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> now = <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">    <span class="keyword">if</span> (now - last &gt; delay) &#123;</span><br><span class="line">      last = now</span><br><span class="line">      fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">task</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;run task&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> throttleTask = <span class="title function_">throttle</span>(task, <span class="number">1000</span>)</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, throttleTask)</span><br></pre></td></tr></table></figure><h1 id="3、深拷贝"><a href="#3、深拷贝" class="headerlink" title="3、深拷贝"></a>3、深拷贝</h1><p><strong>JSON 方法</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不支持值为undefined、函数和循环引用的情况</span></span><br><span class="line"><span class="keyword">const</span> cloneObj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj))</span><br></pre></td></tr></table></figure><p><strong>递归拷贝</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">deepClone</span>(<span class="params">obj, cache = <span class="keyword">new</span> <span class="built_in">WeakMap</span>()</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (obj === <span class="literal">null</span> || <span class="keyword">typeof</span> obj !== <span class="string">&#x27;object&#x27;</span>) <span class="keyword">return</span> obj</span><br><span class="line">  <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="title class_">Date</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Date</span>(obj)</span><br><span class="line">  <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="title class_">RegExp</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RegExp</span>(obj)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (cache.<span class="title function_">has</span>(obj)) <span class="keyword">return</span> cache.<span class="title function_">get</span>(obj) <span class="comment">// 如果出现循环引用，则返回缓存的对象，防止递归进入死循环</span></span><br><span class="line">  <span class="keyword">let</span> cloneObj = <span class="keyword">new</span> obj.<span class="title function_">constructor</span>(<span class="params"></span>) <span class="comment">// 使用对象所属的构造函数创建一个新对象</span></span><br><span class="line">  cache.<span class="title function_">set</span>(obj, cloneObj) <span class="comment">// 缓存对象，用于循环引用的情况</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.<span class="title function_">hasOwnProperty</span>(key)) &#123;</span><br><span class="line">      cloneObj[key] = <span class="title function_">deepClone</span>(obj[key], cache) <span class="comment">// 递归拷贝</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> cloneObj</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;Jack&#x27;</span>, <span class="attr">address</span>: &#123; <span class="attr">x</span>: <span class="number">100</span>, <span class="attr">y</span>: <span class="number">200</span> &#125; &#125;</span><br><span class="line">obj.<span class="property">a</span> = obj <span class="comment">// 循环引用</span></span><br><span class="line"><span class="keyword">const</span> newObj = <span class="title function_">deepClone</span>(obj)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newObj.<span class="property">address</span> === obj.<span class="property">address</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h1 id="4、手写-Promise"><a href="#4、手写-Promise" class="headerlink" title="4、手写[[Promise]]"></a>4、手写[[Promise]]</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyPromise</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">executor</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">status</span> = <span class="string">&#x27;pending&#x27;</span> <span class="comment">// 初始状态为等待</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">value</span> = <span class="literal">null</span> <span class="comment">// 成功的值</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">reason</span> = <span class="literal">null</span> <span class="comment">// 失败的原因</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">onFulfilledCallbacks</span> = [] <span class="comment">// 成功的回调函数数组</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">onRejectedCallbacks</span> = [] <span class="comment">// 失败的回调函数数组</span></span><br><span class="line">    <span class="keyword">let</span> <span class="title function_">resolve</span> = (<span class="params">value</span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">status</span> = <span class="string">&#x27;fulfilled&#x27;</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">value</span> = value</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">onFulfilledCallbacks</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">fn</span>) =&gt;</span> <span class="title function_">fn</span>()) <span class="comment">// 调用成功的回调函数</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> <span class="title function_">reject</span> = (<span class="params">reason</span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">status</span> = <span class="string">&#x27;rejected&#x27;</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">reason</span> = reason</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">onRejectedCallbacks</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">fn</span>) =&gt;</span> <span class="title function_">fn</span>()) <span class="comment">// 调用失败的回调函数</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="title function_">executor</span>(resolve, reject)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      <span class="title function_">reject</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">then</span>(<span class="params">onFulfilled, onRejected</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="string">&#x27;fulfilled&#x27;</span>) &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> x = <span class="title function_">onFulfilled</span>(<span class="variable language_">this</span>.<span class="property">value</span>)</span><br><span class="line">          x <span class="keyword">instanceof</span> <span class="title class_">MyPromise</span> ? x.<span class="title function_">then</span>(resolve, reject) : <span class="title function_">resolve</span>(x)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="string">&#x27;rejected&#x27;</span>) &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> x = <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">reason</span>)</span><br><span class="line">          x <span class="keyword">instanceof</span> <span class="title class_">MyPromise</span> ? x.<span class="title function_">then</span>(resolve, reject) : <span class="title function_">resolve</span>(x)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">onFulfilledCallbacks</span>.<span class="title function_">push</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// 将成功的回调函数放入成功数组</span></span><br><span class="line">          <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> x = <span class="title function_">onFulfilled</span>(<span class="variable language_">this</span>.<span class="property">value</span>)</span><br><span class="line">            x <span class="keyword">instanceof</span> <span class="title class_">MyPromise</span> ? x.<span class="title function_">then</span>(resolve, reject) : <span class="title function_">resolve</span>(x)</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">onRejectedCallbacks</span>.<span class="title function_">push</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// 将失败的回调函数放入失败数组</span></span><br><span class="line">          <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> x = <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">reason</span>)</span><br><span class="line">            x <span class="keyword">instanceof</span> <span class="title class_">MyPromise</span> ? x.<span class="title function_">then</span>(resolve, reject) : <span class="title function_">resolve</span>(x)</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">p1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(resolve, <span class="number">1000</span>, <span class="number">1</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">p2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(resolve, <span class="number">1000</span>, <span class="number">2</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">p1</span>()</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res) <span class="comment">// 1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">p2</span>()</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">ret</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ret) <span class="comment">// 2</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h1 id="5、异步控制并发数"><a href="#5、异步控制并发数" class="headerlink" title="5、异步控制并发数"></a>5、异步控制并发数</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">limitRequest</span>(<span class="params">urls = [], limit = <span class="number">3</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> len = urls.<span class="property">length</span></span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 同时启动limit个任务</span></span><br><span class="line">    <span class="keyword">while</span> (limit &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="title function_">start</span>()</span><br><span class="line">      limit -= <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">start</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> url = urls.<span class="title function_">shift</span>() <span class="comment">// 从数组中拿取第一个任务</span></span><br><span class="line">      <span class="keyword">if</span> (url) &#123;</span><br><span class="line">        axios</span><br><span class="line">          .<span class="title function_">post</span>(url)</span><br><span class="line">          .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// todo</span></span><br><span class="line">          &#125;)</span><br><span class="line">          .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// todo</span></span><br><span class="line">          &#125;)</span><br><span class="line">          .<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (count == len - <span class="number">1</span>) &#123;</span><br><span class="line">              <span class="comment">// 最后一个任务完成</span></span><br><span class="line">              <span class="title function_">resolve</span>()</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="comment">// 完成之后，启动下一个任务</span></span><br><span class="line">              count++</span><br><span class="line">              <span class="title function_">start</span>()</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="title function_">limitRequest</span>([</span><br><span class="line">  <span class="string">&#x27;http://xxa&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;http://xxb&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;http://xxc&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;http://xxd&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;http://xxe&#x27;</span></span><br><span class="line">])</span><br></pre></td></tr></table></figure><h1 id="6、继承"><a href="#6、继承" class="headerlink" title="6、继承"></a>6、继承</h1><p><strong>ES5 继承（寄生组合继承）</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">eat</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27; is eating&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="title class_">Parent</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name)</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Child</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">let</span> xm = <span class="keyword">new</span> <span class="title class_">Child</span>(<span class="string">&#x27;xiaoming&#x27;</span>, <span class="number">12</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(xm.<span class="property">name</span>) <span class="comment">// xiaoming</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(xm.<span class="property">age</span>) <span class="comment">// 12</span></span><br><span class="line">xm.<span class="title function_">eat</span>() <span class="comment">// xiaoming is eating</span></span><br></pre></td></tr></table></figure><p><strong>ES6 继承</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">eat</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27; is eating&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Parent</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(name)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">let</span> xm = <span class="keyword">new</span> <span class="title class_">Child</span>(<span class="string">&#x27;xiaoming&#x27;</span>, <span class="number">12</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(xm.<span class="property">name</span>) <span class="comment">// xiaoming</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(xm.<span class="property">age</span>) <span class="comment">// 12</span></span><br><span class="line">xm.<span class="title function_">eat</span>() <span class="comment">// xiaoming is eating</span></span><br></pre></td></tr></table></figure><h1 id="7、数组排序"><a href="#7、数组排序" class="headerlink" title="7、数组排序"></a>7、数组排序</h1><p><strong>sort 排序</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对数字进行排序，简写</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>]</span><br><span class="line">arr.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr) <span class="comment">// [1, 2, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对字母进行排序，简写</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]</span><br><span class="line">arr.<span class="title function_">sort</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr) <span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;]</span></span><br></pre></td></tr></table></figure><p><strong>冒泡排序</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bubbleSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> len = arr.<span class="property">length</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// 从第一个元素开始，比较相邻的两个元素，前者大就交换位置</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; len - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">        <span class="keyword">let</span> num = arr[j]</span><br><span class="line">        arr[j] = arr[j + <span class="number">1</span>]</span><br><span class="line">        arr[j + <span class="number">1</span>] = num</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 每次遍历结束，都能找到一个最大值，放在数组最后</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">bubbleSort</span>([<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">4</span>])) <span class="comment">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><h1 id="8、数组去重"><a href="#8、数组去重" class="headerlink" title="8、数组去重"></a>8、数组去重</h1><p><strong>Set 去重</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> newArr = [...<span class="keyword">new</span> <span class="title class_">Set</span>(arr)]</span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line"><span class="keyword">const</span> newArr = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="keyword">new</span> <span class="title class_">Set</span>(arr))</span><br></pre></td></tr></table></figure><p><strong>indexOf 去重</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> newArr = arr.<span class="title function_">filter</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> arr.<span class="title function_">indexOf</span>(item) === index)</span><br></pre></td></tr></table></figure><h1 id="9、获取-url-参数"><a href="#9、获取-url-参数" class="headerlink" title="9、获取 url 参数"></a>9、获取 url 参数</h1><p><strong>URLSearchParams 方法</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个URLSearchParams实例</span></span><br><span class="line"><span class="keyword">const</span> urlSearchParams = <span class="keyword">new</span> <span class="title class_">URLSearchParams</span>(<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">search</span>)</span><br><span class="line"><span class="comment">// 把键值对列表转换为一个对象</span></span><br><span class="line"><span class="keyword">const</span> params = <span class="title class_">Object</span>.<span class="title function_">fromEntries</span>(urlSearchParams.<span class="title function_">entries</span>())</span><br></pre></td></tr></table></figure><p><strong>split 方法</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getParams</span>(<span class="params">url</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> res = &#123;&#125;</span><br><span class="line">  <span class="keyword">if</span> (url.<span class="title function_">includes</span>(<span class="string">&#x27;?&#x27;</span>)) &#123;</span><br><span class="line">    <span class="keyword">const</span> str = url.<span class="title function_">split</span>(<span class="string">&#x27;?&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">const</span> arr = str.<span class="title function_">split</span>(<span class="string">&#x27;&amp;&#x27;</span>)</span><br><span class="line">    arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> key = item.<span class="title function_">split</span>(<span class="string">&#x27;=&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">      <span class="keyword">const</span> val = item.<span class="title function_">split</span>(<span class="string">&#x27;=&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">      res[key] = <span class="built_in">decodeURIComponent</span>(val) <span class="comment">// 解码</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">const</span> user = <span class="title function_">getParams</span>(<span class="string">&#x27;http://www.baidu.com?user=%E9%98%BF%E9%A3%9E&amp;age=16&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user) <span class="comment">// &#123; user: &#x27;阿飞&#x27;, age: &#x27;16&#x27; &#125;</span></span><br></pre></td></tr></table></figure><h1 id="10、发布订阅模式"><a href="#10、发布订阅模式" class="headerlink" title="10、发布订阅模式"></a>10、发布订阅模式</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">EventEmitter</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cache</span> = &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">on</span>(<span class="params">name, fn</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">cache</span>[name]) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">cache</span>[name].<span class="title function_">push</span>(fn)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">cache</span>[name] = [fn]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">off</span>(<span class="params">name, fn</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> tasks = <span class="variable language_">this</span>.<span class="property">cache</span>[name]</span><br><span class="line">    <span class="keyword">if</span> (tasks) &#123;</span><br><span class="line">      <span class="keyword">const</span> index = tasks.<span class="title function_">findIndex</span>(<span class="function">(<span class="params">f</span>) =&gt;</span> f === fn || f.<span class="property">callback</span> === fn)</span><br><span class="line">      <span class="keyword">if</span> (index &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        tasks.<span class="title function_">splice</span>(index, <span class="number">1</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">emit</span>(<span class="params">name, once = <span class="literal">false</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">cache</span>[name]) &#123;</span><br><span class="line">      <span class="comment">// 创建副本，如果回调函数内继续注册相同事件，会造成死循环</span></span><br><span class="line">      <span class="keyword">const</span> tasks = <span class="variable language_">this</span>.<span class="property">cache</span>[name].<span class="title function_">slice</span>()</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> fn <span class="keyword">of</span> tasks) &#123;</span><br><span class="line">        <span class="title function_">fn</span>()</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (once) &#123;</span><br><span class="line">        <span class="keyword">delete</span> <span class="variable language_">this</span>.<span class="property">cache</span>[name]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">const</span> eventBus = <span class="keyword">new</span> <span class="title class_">EventEmitter</span>()</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">task1</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;task1&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">task2</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;task2&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">eventBus.<span class="title function_">on</span>(<span class="string">&#x27;task&#x27;</span>, task1)</span><br><span class="line">eventBus.<span class="title function_">on</span>(<span class="string">&#x27;task&#x27;</span>, task2)</span><br><span class="line">eventBus.<span class="title function_">off</span>(<span class="string">&#x27;task&#x27;</span>, task1)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  eventBus.<span class="title function_">emit</span>(<span class="string">&#x27;task&#x27;</span>) <span class="comment">// task2</span></span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> JavaScript </category>
          
          <category> studyEveryday </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> studyEveryday </tag>
            
            <tag> JavaScript </tag>
            
            <tag> 常见的前端手写功能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>获取时间</title>
      <link href="/posts/23546.html"/>
      <url>/posts/23546.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> getDate = <span class="keyword">function</span> <span class="title function_">getNowFormatDate</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">//获取当前时间</span></span><br><span class="line">  <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line">  <span class="keyword">var</span> seperator1 = <span class="string">&#x27;-&#x27;</span></span><br><span class="line">  <span class="keyword">var</span> seperator2 = <span class="string">&#x27;:&#x27;</span></span><br><span class="line">  <span class="keyword">var</span> month =</span><br><span class="line">    date.<span class="title function_">getMonth</span>() + <span class="number">1</span> &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + (date.<span class="title function_">getMonth</span>() + <span class="number">1</span>) : date.<span class="title function_">getMonth</span>() + <span class="number">1</span></span><br><span class="line">  <span class="keyword">var</span> strDate = date.<span class="title function_">getDate</span>() &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + date.<span class="title function_">getDate</span>() : date.<span class="title function_">getDate</span>()</span><br><span class="line">  <span class="keyword">var</span> currentdate =</span><br><span class="line">    date.<span class="title function_">getFullYear</span>() +</span><br><span class="line">    seperator1 +</span><br><span class="line">    month +</span><br><span class="line">    seperator1 +</span><br><span class="line">    strDate +</span><br><span class="line">    <span class="string">&#x27; &#x27;</span> +</span><br><span class="line">    date.<span class="title function_">getHours</span>() +</span><br><span class="line">    seperator2 +</span><br><span class="line">    date.<span class="title function_">getMinutes</span>() +</span><br><span class="line">    seperator2 +</span><br><span class="line">    date.<span class="title function_">getSeconds</span>()</span><br><span class="line">  <span class="keyword">return</span> currentdate</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> JavaScript </category>
          
          <category> studyEveryday </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> studyEveryday </tag>
            
            <tag> JavaScript </tag>
            
            <tag> 获取时间 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>某个dom全屏或者整体页面全屏</title>
      <link href="/posts/54254.html"/>
      <url>/posts/54254.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//如果dom没有就让整个页面全屏</span></span><br><span class="line"><span class="keyword">const</span> full = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#box&#x27;</span>) || <span class="variable language_">document</span>.<span class="property">documentElement</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (full.<span class="property">RequestFullScreen</span>) &#123;</span><br><span class="line">  full.<span class="title class_">RequestFullScreen</span>()</span><br><span class="line"></span><br><span class="line">  <span class="comment">//兼容Firefox</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (full.<span class="property">mozRequestFullScreen</span>) &#123;</span><br><span class="line">  full.<span class="title function_">mozRequestFullScreen</span>()</span><br><span class="line"></span><br><span class="line">  <span class="comment">//兼容Chrome, Safari and Opera等</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (full.<span class="property">webkitRequestFullScreen</span>) &#123;</span><br><span class="line">  full.<span class="title function_">webkitRequestFullScreen</span>()</span><br><span class="line"></span><br><span class="line">  <span class="comment">//兼容IE/Edge</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (full.<span class="property">msRequestFullscreen</span>) &#123;</span><br><span class="line">  full.<span class="title function_">msRequestFullscreen</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> JavaScript </category>
          
          <category> studyEveryday </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> studyEveryday </tag>
            
            <tag> JavaScript </tag>
            
            <tag> 某个dom全屏或者整体页面全屏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>layer弹出层table变形的问题</title>
      <link href="/posts/19453.html"/>
      <url>/posts/19453.html</url>
      
        <content type="html"><![CDATA[<p>解决方案 1<br>前提：需要给每个表头设置合适的宽度<br>效果：弹出层宽度根据渲染出来的表格宽度自适应，高度固定（百分比&#x2F;具体的数值都可以）</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.dataDetailLayer</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;dataDetailLayer&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">&quot;dataDetailTable&quot;</span> <span class="attr">lay-filter</span>=<span class="string">&quot;dataDetailTable&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">table.<span class="title function_">on</span>(<span class="string">&#x27;tool(dataTable)&#x27;</span>, <span class="keyword">function</span> (<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="comment">// 注：test 是 table 原始标签的属性 lay-filter=&quot;对应的值&quot;</span></span><br><span class="line">  <span class="keyword">let</span> data = obj.<span class="property">data</span> <span class="comment">//获得当前行数据</span></span><br><span class="line">  <span class="keyword">let</span> id = data.<span class="property">id</span></span><br><span class="line">  <span class="keyword">let</span> layEvent = obj.<span class="property">event</span></span><br><span class="line">  <span class="keyword">if</span> (layEvent === <span class="string">&#x27;view&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">//查看</span></span><br><span class="line">    <span class="title function_">initDataDetailTable</span>(data)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">initDataDetailTable</span>(<span class="params">data</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> loadLayer = layer.<span class="title function_">msg</span>(<span class="string">&#x27;正在获取数据&#x27;</span>, &#123; <span class="attr">icon</span>: <span class="number">16</span>, <span class="attr">time</span>: <span class="number">0</span> &#125;)</span><br><span class="line">  <span class="keyword">let</span> id = data.<span class="property">id</span></span><br><span class="line">  <span class="keyword">let</span> cols</span><br><span class="line">  <span class="keyword">if</span> (data.<span class="property">xianbie</span>) &#123;</span><br><span class="line">    <span class="comment">// 当宽度超过当前窗口的宽度时，可以加上下面这行代码。让弹窗宽度自适应为80%</span></span><br><span class="line">    <span class="comment">// 但是注意：此时表头右固定会失效</span></span><br><span class="line">    <span class="comment">// $(&quot;.dataDetailLayer&quot;).width($(document.body).width() * 0.8)</span></span><br><span class="line">    cols = [</span><br><span class="line">      [</span><br><span class="line">        <span class="comment">//表头</span></span><br><span class="line">        &#123; <span class="attr">type</span>: <span class="string">&#x27;numbers&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;序号&#x27;</span>, <span class="attr">width</span>: <span class="number">80</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">field</span>: <span class="string">&#x27;yskm&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;预算科目&#x27;</span>, <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>, <span class="attr">width</span>: <span class="number">90</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">field</span>: <span class="string">&#x27;wlsx&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;物料属性&#x27;</span>, <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>, <span class="attr">width</span>: <span class="number">110</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">field</span>: <span class="string">&#x27;wlbm&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;物资编码&#x27;</span>, <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>, <span class="attr">width</span>: <span class="number">140</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">field</span>: <span class="string">&#x27;wlmc&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;物料名称&#x27;</span>, <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>, <span class="attr">width</span>: <span class="number">120</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">field</span>: <span class="string">&#x27;ggxh&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;规格型号&#x27;</span>, <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>, <span class="attr">width</span>: <span class="number">120</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">field</span>: <span class="string">&#x27;dw&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;计量单位&#x27;</span>, <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>, <span class="attr">width</span>: <span class="number">90</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">field</span>: <span class="string">&#x27;dj&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;预算单价&#x27;</span>, <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>, <span class="attr">width</span>: <span class="number">90</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">field</span>: <span class="string">&#x27;sl&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;数量&#x27;</span>, <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>, <span class="attr">width</span>: <span class="number">90</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">field</span>: <span class="string">&#x27;hj&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;合计&#x27;</span>, <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>, <span class="attr">width</span>: <span class="number">80</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">field</span>: <span class="string">&#x27;slOne&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;第一季度&#x27;</span>, <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>, <span class="attr">width</span>: <span class="number">90</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">field</span>: <span class="string">&#x27;slTwo&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;第二季度&#x27;</span>, <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>, <span class="attr">width</span>: <span class="number">90</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">field</span>: <span class="string">&#x27;slThree&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;第三季度&#x27;</span>, <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>, <span class="attr">width</span>: <span class="number">90</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">field</span>: <span class="string">&#x27;slFour&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;第四季度&#x27;</span>, <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>, <span class="attr">width</span>: <span class="number">90</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">field</span>: <span class="string">&#x27;lrPer&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;录入人&#x27;</span>, <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>, <span class="attr">width</span>: <span class="number">80</span> &#125;</span><br><span class="line">      ]</span><br><span class="line">    ]</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    cols = [</span><br><span class="line">      [</span><br><span class="line">        <span class="comment">//表头</span></span><br><span class="line">        &#123; <span class="attr">type</span>: <span class="string">&#x27;numbers&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;序号&#x27;</span>, <span class="attr">rowspan</span>: <span class="number">2</span>, <span class="attr">width</span>: <span class="number">80</span> &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">field</span>: <span class="string">&#x27;yskm&#x27;</span>,</span><br><span class="line">          <span class="attr">title</span>: <span class="string">&#x27;预算科目&#x27;</span>,</span><br><span class="line">          <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">          <span class="attr">rowspan</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">width</span>: <span class="number">90</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">field</span>: <span class="string">&#x27;wlsx&#x27;</span>,</span><br><span class="line">          <span class="attr">title</span>: <span class="string">&#x27;物料属性&#x27;</span>,</span><br><span class="line">          <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">          <span class="attr">rowspan</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">width</span>: <span class="number">110</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">field</span>: <span class="string">&#x27;wlbm&#x27;</span>,</span><br><span class="line">          <span class="attr">title</span>: <span class="string">&#x27;物资编码&#x27;</span>,</span><br><span class="line">          <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">          <span class="attr">rowspan</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">width</span>: <span class="number">140</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">field</span>: <span class="string">&#x27;wlmc&#x27;</span>,</span><br><span class="line">          <span class="attr">title</span>: <span class="string">&#x27;物料名称&#x27;</span>,</span><br><span class="line">          <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">          <span class="attr">rowspan</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">width</span>: <span class="number">120</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">field</span>: <span class="string">&#x27;ggxh&#x27;</span>,</span><br><span class="line">          <span class="attr">title</span>: <span class="string">&#x27;规格型号&#x27;</span>,</span><br><span class="line">          <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">          <span class="attr">rowspan</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">width</span>: <span class="number">120</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">field</span>: <span class="string">&#x27;dw&#x27;</span>,</span><br><span class="line">          <span class="attr">title</span>: <span class="string">&#x27;计量单位&#x27;</span>,</span><br><span class="line">          <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">          <span class="attr">rowspan</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">width</span>: <span class="number">90</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">field</span>: <span class="string">&#x27;dj&#x27;</span>,</span><br><span class="line">          <span class="attr">title</span>: <span class="string">&#x27;预算单价&#x27;</span>,</span><br><span class="line">          <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">          <span class="attr">rowspan</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">width</span>: <span class="number">90</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123; <span class="attr">field</span>: <span class="string">&#x27;sl&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;数量&#x27;</span>, <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>, <span class="attr">rowspan</span>: <span class="number">2</span>, <span class="attr">width</span>: <span class="number">90</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">field</span>: <span class="string">&#x27;hj&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;合计&#x27;</span>, <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>, <span class="attr">rowspan</span>: <span class="number">2</span>, <span class="attr">width</span>: <span class="number">80</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">title</span>: <span class="string">&#x27;合计需求量&#x27;</span>, <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>, <span class="attr">colspan</span>: <span class="number">3</span> &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">field</span>: <span class="string">&#x27;lrPer&#x27;</span>,</span><br><span class="line">          <span class="attr">title</span>: <span class="string">&#x27;录入人&#x27;</span>,</span><br><span class="line">          <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">          <span class="attr">rowspan</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">width</span>: <span class="number">80</span></span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      [</span><br><span class="line">        <span class="comment">//表头</span></span><br><span class="line">        &#123; <span class="attr">field</span>: <span class="string">&#x27;slYf&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;燕房&#x27;</span>, <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>, <span class="attr">width</span>: <span class="number">80</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">field</span>: <span class="string">&#x27;slJc&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;机场&#x27;</span>, <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>, <span class="attr">width</span>: <span class="number">80</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">field</span>: <span class="string">&#x27;sl19h&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;19号&#x27;</span>, <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>, <span class="attr">width</span>: <span class="number">80</span> &#125;</span><br><span class="line">      ]</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">  table.<span class="title function_">render</span>(&#123;</span><br><span class="line">    <span class="attr">elem</span>: <span class="string">&#x27;#dataDetailTable&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="title class_">Hussar</span>.<span class="property">ctxPath</span> + <span class="string">&#x27;/tYwglYsXlfinfo/list&#x27;</span>,</span><br><span class="line">    <span class="attr">even</span>: <span class="literal">true</span>,</span><br><span class="line">    cols,</span><br><span class="line">    <span class="attr">where</span>: &#123;</span><br><span class="line">      id</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">done</span>(<span class="params"></span>) &#123;</span><br><span class="line">      layer.<span class="title function_">close</span>(loadLayer)</span><br><span class="line">      layer.<span class="title function_">open</span>(&#123;</span><br><span class="line">        <span class="attr">title</span>: data.<span class="property">jcmc</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">content</span>: $(<span class="string">&#x27;.dataDetailLayer&#x27;</span>),</span><br><span class="line">        <span class="attr">area</span>: [<span class="string">&#x27;auto&#x27;</span>, <span class="string">&#x27;80%&#x27;</span>],</span><br><span class="line">        <span class="attr">btn</span>: [<span class="string">&#x27;关闭&#x27;</span>],</span><br><span class="line">        <span class="title function_">yes</span>(<span class="params">index</span>) &#123;</span><br><span class="line">          layer.<span class="title function_">close</span>(index)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解决方案 2:表格的各个表头的宽度固定，根据表头的总高度以及弹窗的样式自己算出 layer 的宽度。<br>同时给个合适的高度。（弹窗的宽，高都是固定值）</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">layer.<span class="title function_">open</span>(&#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;区间：&#x27;</span> + util.<span class="title function_">formatMile</span>(requestData.<span class="property">startMile</span>) + <span class="string">&#x27; - &#x27;</span> + util.<span class="title function_">formatMile</span>(requestData.<span class="property">endMile</span>),</span><br><span class="line">        <span class="attr">type</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">content</span>: $(<span class="string">&quot;.chartLayer&quot;</span>),</span><br><span class="line">        <span class="attr">area</span>: [<span class="string">&#x27;628px&#x27;</span>, <span class="string">&#x27;410px&#x27;</span>],</span><br><span class="line">        <span class="title function_">success</span>(<span class="params">layero, index</span>) &#123;</span><br><span class="line">            table.<span class="title function_">render</span>(&#123;</span><br><span class="line">                <span class="attr">elem</span>: <span class="string">&#x27;#chartLayerTable&#x27;</span></span><br><span class="line">                , <span class="attr">height</span>: <span class="number">313</span></span><br><span class="line">                , <span class="attr">url</span>: <span class="title class_">Hussar</span>.<span class="property">ctxPath</span> + <span class="string">&#x27;/sjfxMhJcsj/&#x27;</span> + url <span class="comment">//数据接口</span></span><br><span class="line">                , <span class="attr">page</span>: <span class="literal">false</span> <span class="comment">//开启分页</span></span><br><span class="line">                , <span class="attr">cols</span>: [[ <span class="comment">//表头</span></span><br><span class="line">                    &#123;<span class="attr">title</span>: <span class="string">&#x27;序号&#x27;</span>, <span class="attr">type</span>: <span class="string">&#x27;numbers&#x27;</span>, <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>&#125;</span><br><span class="line">                    , &#123;</span><br><span class="line">                        <span class="attr">field</span>: <span class="string">&#x27;mile&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;里程&#x27;</span>, <span class="attr">width</span>: <span class="number">130</span>, <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>, <span class="title function_">templet</span>(<span class="params">row</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> util.<span class="title function_">formatMile</span>(row.<span class="property">mile</span>)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    , &#123;<span class="attr">field</span>: <span class="string">&#x27;lx&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;检测项&#x27;</span>, <span class="attr">width</span>: <span class="number">120</span>, <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>&#125;</span><br><span class="line">                    , &#123;<span class="attr">field</span>: <span class="string">&#x27;value&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;检测值&#x27;</span>, <span class="attr">width</span>: <span class="number">80</span>, <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>&#125;</span><br><span class="line">                    , &#123;<span class="attr">field</span>: <span class="string">&#x27;pp&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;评判&#x27;</span>, <span class="attr">width</span>: <span class="number">90</span>, <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>&#125;</span><br><span class="line">                    , &#123;<span class="attr">field</span>: <span class="string">&#x27;date&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;检测日期&#x27;</span>, <span class="attr">width</span>: <span class="number">120</span>, <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>&#125;</span><br><span class="line">                ]],</span><br><span class="line">                <span class="attr">where</span>: requestData,</span><br><span class="line">                <span class="title function_">done</span>(<span class="params">res</span>) &#123;</span><br><span class="line">                <span class="comment">// 这里可以利用假数据算出设置的弹窗高度最高可以容纳几个表格数据。当表格的数据量多于这个值的时候，重置弹窗的宽度，在原先的基础上加上17px</span></span><br><span class="line">                    <span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">length</span> &gt; <span class="number">9</span>) &#123;</span><br><span class="line">                        layer.<span class="title function_">style</span>(index, &#123;</span><br><span class="line">                            <span class="attr">width</span>: <span class="string">&#x27;645px&#x27;</span>,</span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> JavaScript </category>
          
          <category> layui </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> JavaScript </tag>
            
            <tag> layui </tag>
            
            <tag> layer弹出层table变形的问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>layer弹出层里再弹出一个弹出层导致新的弹出层重复弹出的问题</title>
      <link href="/posts/16214.html"/>
      <url>/posts/16214.html</url>
      
        <content type="html"><![CDATA[<p>解决办法:在 layui 的 layer 配置 json 里给每个弹出层指定个不同的 id 即可</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> index = layer.<span class="title function_">open</span>(&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">title</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">move</span>: $(<span class="string">&#x27;#uploadHead&#x27;</span>),</span><br><span class="line">  <span class="attr">closeBtn</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">area</span>: [<span class="string">&#x27;5.1979rem&#x27;</span>, <span class="string">&#x27;2.5052rem&#x27;</span>],</span><br><span class="line">  <span class="attr">content</span>: $(<span class="string">&#x27;#uploadFileModel&#x27;</span>),</span><br><span class="line">  <span class="attr">id</span>: <span class="string">&#x27;layer1&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">layer.<span class="title function_">confirm</span>(</span><br><span class="line">  <span class="string">&#x27;是否取消本次文件上传？&#x27;</span>,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">skin</span>: <span class="string">&#x27;confirm-class&#x27;</span>,</span><br><span class="line">    <span class="attr">icon</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;提示&#x27;</span>,</span><br><span class="line">    <span class="attr">id</span>: <span class="string">&#x27;layer2&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">function</span> (<span class="params">index1</span>) &#123;</span><br><span class="line">    <span class="comment">// index1表示确认框代表的弹出层实例</span></span><br><span class="line">    layer.<span class="title function_">closeAll</span>()</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> JavaScript </category>
          
          <category> layui </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> JavaScript </tag>
            
            <tag> layui </tag>
            
            <tag> layer弹出层里再弹出一个弹出层导致新的弹出层重复弹出的问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>layer弹出带遮罩得加载动画</title>
      <link href="/posts/31980.html"/>
      <url>/posts/31980.html</url>
      
        <content type="html"><![CDATA[<p><code>var index = layer.msg(&#39;正在删除文件，请耐心等待&#39;, &#123;icon: 16, shade: 0.7, time: 0&#125;);</code></p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> JavaScript </category>
          
          <category> layui </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> JavaScript </tag>
            
            <tag> layui </tag>
            
            <tag> layer弹出带遮罩得加载动画 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>table删除鼠标悬浮背景颜色变色的效果</title>
      <link href="/posts/28372.html"/>
      <url>/posts/28372.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*删除鼠标悬浮背景变色效果*/</span></span><br><span class="line"><span class="comment">/*其中#cxDataQdTjSxDiv是数据表格table容器的id,格式如下*/</span></span><br><span class="line"><span class="selector-id">#CxDataQdTjSxDiv</span> <span class="selector-class">.layui-table</span> <span class="selector-tag">tbody</span> <span class="selector-tag">tr</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-id">#CxDataQdTjSxDiv</span> <span class="selector-class">.layui-table</span> <span class="selector-tag">thead</span> <span class="selector-tag">tr</span>,</span><br><span class="line"><span class="selector-id">#CxDataQdTjSxDiv</span> <span class="selector-class">.layui-table</span><span class="selector-attr">[lay-even]</span> <span class="selector-tag">tr</span><span class="selector-pseudo">:nth-child</span>(even) &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: transparent <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;CxDataQdTjSxDiv&quot;</span> <span class="attr">class</span>=<span class="string">&quot;tableContainer&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;tableTitle&quot;</span>&gt;</span>区段超限情况统计（上行）<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">&quot;CxDataQdTjSxTab&quot;</span> <span class="attr">class</span>=<span class="string">&quot;layui-table&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> JavaScript </category>
          
          <category> layui </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> JavaScript </tag>
            
            <tag> layui </tag>
            
            <tag> table删除鼠标悬浮背景颜色变色的效果 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>table动态纵向合并单元格</title>
      <link href="/posts/14114.html"/>
      <url>/posts/14114.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 正常渲染表格</span></span><br><span class="line">table.<span class="title function_">render</span>(&#123;</span><br><span class="line">            <span class="attr">elem</span>: <span class="string">&#x27;#CxDataQdTjXXTab&#x27;</span>,</span><br><span class="line">            <span class="attr">height</span>: <span class="number">300</span>,</span><br><span class="line">            <span class="attr">url</span>: <span class="title class_">Hussar</span>.<span class="property">ctxPath</span> + <span class="string">&#x27;/CxData/getQdCxData&#x27;</span>,</span><br><span class="line">            <span class="attr">cols</span>: [</span><br><span class="line">                <span class="comment">//一级表头</span></span><br><span class="line">                [</span><br><span class="line">                    &#123;<span class="attr">title</span>: <span class="string">&#x27;官方序号&#x27;</span>, <span class="attr">type</span>: <span class="string">&#x27;numbers&#x27;</span>, <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>, <span class="attr">halign</span>: <span class="string">&#x27;center&#x27;</span>, <span class="attr">hide</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">                    &#123;<span class="attr">title</span>: <span class="string">&#x27;模板索引&#x27;</span>, <span class="attr">field</span>: <span class="string">&#x27;index1&#x27;</span>, <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>, <span class="attr">halign</span>: <span class="string">&#x27;center&#x27;</span>, <span class="attr">hide</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">                    &#123;<span class="attr">title</span>: <span class="string">&#x27;序号&#x27;</span>, <span class="attr">field</span>: <span class="string">&#x27;index2&#x27;</span>, <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>, <span class="attr">halign</span>: <span class="string">&#x27;center&#x27;</span>,&#125;,</span><br><span class="line">                    &#123;<span class="attr">title</span>: <span class="string">&#x27;区段&#x27;</span>, <span class="attr">field</span>: <span class="string">&#x27;qj&#x27;</span>, <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>, <span class="attr">halign</span>: <span class="string">&#x27;center&#x27;</span>,&#125;,</span><br><span class="line">                    &#123;<span class="attr">title</span>: <span class="string">&#x27;通道&#x27;</span>, <span class="attr">field</span>: <span class="string">&#x27;lx&#x27;</span>, <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>, <span class="attr">halign</span>: <span class="string">&#x27;center&#x27;</span>,&#125;,</span><br><span class="line">                    &#123;<span class="attr">title</span>: <span class="string">&#x27;超限数量&#x27;</span>, <span class="attr">field</span>: <span class="string">&#x27;sl&#x27;</span>, <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>, <span class="attr">halign</span>: <span class="string">&#x27;center&#x27;</span>&#125;,</span><br><span class="line">                ],</span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">page</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">id</span>: <span class="string">&#x27;CxDataQdTjXXTab&#x27;</span>,</span><br><span class="line">            <span class="attr">even</span>: <span class="literal">true</span>, <span class="attr">limit</span>: <span class="number">20</span>,</span><br><span class="line">            <span class="attr">where</span>: &#123;</span><br><span class="line">                <span class="attr">csrwId</span>: $(<span class="string">&quot;#csrwId&quot;</span>).<span class="title function_">val</span>(),</span><br><span class="line">                <span class="attr">xb</span>: <span class="string">&#x27;下行&#x27;</span>,</span><br><span class="line">                <span class="attr">isSpecial</span>: isSpecial,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="title function_">done</span>(<span class="params">res</span>) &#123;</span><br><span class="line">                <span class="comment">// 表格渲染结束后调用合并单元格的方法</span></span><br><span class="line">                <span class="title function_">merge</span>(res, <span class="string">&quot;CxDataQdTjXXTab&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态和并单元格的方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">merge</span>(<span class="params">res, id</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> data = res.<span class="property">data</span>;</span><br><span class="line">        <span class="keyword">var</span> mergeIndex = <span class="number">0</span>;<span class="comment">//定位需要添加合并属性的行数</span></span><br><span class="line">        <span class="keyword">var</span> mark = <span class="number">1</span>; <span class="comment">//这里涉及到简单的运算，mark是计算每次需要合并的格子数</span></span><br><span class="line">        <span class="keyword">var</span> columsName = [<span class="string">&#x27;index2&#x27;</span>, <span class="string">&#x27;qj&#x27;</span>];<span class="comment">//需要合并的列名称</span></span><br><span class="line">        <span class="comment">/*这里的索引是表格col[]数组的下标，下标从0开始，隐藏的列也要算。注意，index列请在后台把要合并的行转为1111，22，3333，444444……..的格式*/</span></span><br><span class="line">        <span class="keyword">var</span> columsIndex = [<span class="number">2</span>, <span class="number">3</span>];<span class="comment">//需要合并的列索引值</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> k = <span class="number">0</span>; k &lt; columsName.<span class="property">length</span>; k++) &#123; <span class="comment">//这里循环所有要合并的列</span></span><br><span class="line">            <span class="keyword">var</span> trArr = $(<span class="string">&quot;[lay-id=&#x27;&quot;</span> + id + <span class="string">&quot;&#x27;]&gt;.layui-table-box&gt;.layui-table-body&gt;.layui-table&quot;</span>).<span class="title function_">find</span>(<span class="string">&quot;tr&quot;</span>);<span class="comment">//所有行</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; res.<span class="property">data</span>.<span class="property">length</span>; i++) &#123; <span class="comment">//这里循环表格当前的数据</span></span><br><span class="line">                <span class="keyword">var</span> tdCurArr = trArr.<span class="title function_">eq</span>(i).<span class="title function_">find</span>(<span class="string">&quot;td&quot;</span>).<span class="title function_">eq</span>(columsIndex[k]);<span class="comment">//获取当前行的当前列</span></span><br><span class="line">                <span class="keyword">var</span> tdPreArr = trArr.<span class="title function_">eq</span>(mergeIndex).<span class="title function_">find</span>(<span class="string">&quot;td&quot;</span>).<span class="title function_">eq</span>(columsIndex[k]);<span class="comment">//获取相同列的第一列</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (data[i][columsName[k]] === data[i - <span class="number">1</span>][columsName[k]]) &#123; <span class="comment">//后一行的值与前一行的值做比较，相同就需要合并</span></span><br><span class="line">                    mark += <span class="number">1</span>;</span><br><span class="line">                    tdPreArr.<span class="title function_">each</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;<span class="comment">//相同列的第一列增加rowspan属性</span></span><br><span class="line">                        $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&quot;rowspan&quot;</span>, mark);</span><br><span class="line">                    &#125;);</span><br><span class="line">                    tdCurArr.<span class="title function_">each</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;<span class="comment">//当前行隐藏</span></span><br><span class="line">                        $(<span class="variable language_">this</span>).<span class="title function_">css</span>(<span class="string">&quot;display&quot;</span>, <span class="string">&quot;none&quot;</span>);</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    mergeIndex = i;</span><br><span class="line">                    mark = <span class="number">1</span>;<span class="comment">//一旦前后两行的值不一样了，那么需要合并的格子数mark就需要重新计算</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            mergeIndex = <span class="number">0</span>;</span><br><span class="line">            mark = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> JavaScript </category>
          
          <category> layui </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> JavaScript </tag>
            
            <tag> layui </tag>
            
            <tag> table动态纵向合并单元格 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>table单元格编辑使用键盘跳转</title>
      <link href="/posts/17520.html"/>
      <url>/posts/17520.html</url>
      
        <content type="html"><![CDATA[<p>可以单独把下面的代码写个 js，然后在需要的页面上引入该 js</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">on</span>(<span class="string">&#x27;keydown&#x27;</span>, <span class="string">&#x27;.layui-table-edit&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="comment">// debugger</span></span><br><span class="line">  <span class="keyword">var</span> td = $(<span class="variable language_">this</span>).<span class="title function_">parent</span>(<span class="string">&#x27;td&#x27;</span>),</span><br><span class="line">    tr = td.<span class="title function_">parent</span>(<span class="string">&#x27;tr&#x27;</span>),</span><br><span class="line">    trs = tr.<span class="title function_">parent</span>().<span class="title function_">parent</span>().<span class="title function_">find</span>(<span class="string">&#x27;tr&#x27;</span>),</span><br><span class="line">    tr_index = tr.<span class="title function_">index</span>(),</span><br><span class="line">    td_index = td.<span class="title function_">index</span>(),</span><br><span class="line">    td_last_index = tr.<span class="title function_">find</span>(<span class="string">&#x27;[data-edit=&quot;text&quot;]:last&#x27;</span>).<span class="title function_">index</span>(),</span><br><span class="line">    td_first_index = tr.<span class="title function_">find</span>(<span class="string">&#x27;[data-edit=&quot;text&quot;]:first&#x27;</span>).<span class="title function_">index</span>()</span><br><span class="line">  <span class="keyword">switch</span> (e.<span class="property">keyCode</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">13</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">39</span>:</span><br><span class="line">      td.<span class="title function_">nextAll</span>(<span class="string">&#x27;[data-edit=&quot;text&quot;]:first&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">      <span class="keyword">if</span> (td_index == td_last_index) &#123;</span><br><span class="line">        tr.<span class="title function_">next</span>().<span class="title function_">find</span>(<span class="string">&#x27;td&#x27;</span>).<span class="title function_">eq</span>(td_first_index).<span class="title function_">click</span>()</span><br><span class="line">        <span class="keyword">if</span> (tr_index == trs.<span class="property">length</span> - <span class="number">1</span>) &#123;</span><br><span class="line">          trs.<span class="title function_">eq</span>(<span class="number">0</span>).<span class="title function_">find</span>(<span class="string">&#x27;td&#x27;</span>).<span class="title function_">eq</span>(td_first_index).<span class="title function_">click</span>()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        $(<span class="string">&#x27;.layui-table-edit&#x27;</span>).<span class="title function_">select</span>()</span><br><span class="line">      &#125;, <span class="number">0</span>)</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">37</span>:</span><br><span class="line">      td.<span class="title function_">prevAll</span>(<span class="string">&#x27;[data-edit=&quot;text&quot;]:first&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        $(<span class="string">&#x27;.layui-table-edit&#x27;</span>).<span class="title function_">select</span>()</span><br><span class="line">      &#125;, <span class="number">0</span>)</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">38</span>:</span><br><span class="line">      tr.<span class="title function_">prev</span>().<span class="title function_">find</span>(<span class="string">&#x27;td&#x27;</span>).<span class="title function_">eq</span>(td_index).<span class="title function_">click</span>()</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        $(<span class="string">&#x27;.layui-table-edit&#x27;</span>).<span class="title function_">select</span>()</span><br><span class="line">      &#125;, <span class="number">0</span>)</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">40</span>:</span><br><span class="line">      tr.<span class="title function_">next</span>().<span class="title function_">find</span>(<span class="string">&#x27;td&#x27;</span>).<span class="title function_">eq</span>(td_index).<span class="title function_">click</span>()</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        $(<span class="string">&#x27;.layui-table-edit&#x27;</span>).<span class="title function_">select</span>()</span><br><span class="line">      &#125;, <span class="number">0</span>)</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> JavaScript </category>
          
          <category> layui </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> JavaScript </tag>
            
            <tag> layui </tag>
            
            <tag> table单元格编辑使用键盘跳转 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>table懒加载</title>
      <link href="/posts/14808.html"/>
      <url>/posts/14808.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> page = <span class="number">1</span>, limit = <span class="number">30</span>, pageNum = <span class="number">0</span>,count = <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> dataList = [];</span><br><span class="line"><span class="title class_">DataAnalysis</span>.<span class="property">initData</span> = <span class="keyword">function</span> (<span class="params">page, limit</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> ajax = <span class="keyword">new</span> $ax( <span class="title class_">Hussar</span>.<span class="property">ctxPath</span>+<span class="string">&#x27;/swj/swjdetail&#x27;</span>,</span><br><span class="line">        <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">            count = res.<span class="property">count</span>;</span><br><span class="line">            <span class="keyword">let</span> recordList = res.<span class="property">data</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; recordList.<span class="property">length</span>; i++) &#123;</span><br><span class="line">                dataList.<span class="title function_">push</span>(recordList[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            pageNum = <span class="title class_">Math</span>.<span class="title function_">floor</span>(count/limit)+<span class="number">1</span>;</span><br><span class="line">        &#125;, <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">            <span class="title class_">Hussar</span>.<span class="title function_">error</span>(<span class="string">&quot;加载失败&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    ajax.<span class="title function_">set</span>(<span class="string">&quot;xlmc&quot;</span>,xlmc);</span><br><span class="line">    ajax.<span class="title function_">set</span>(<span class="string">&quot;id&quot;</span>,id);</span><br><span class="line">    ajax.<span class="title function_">set</span>(<span class="string">&quot;page&quot;</span>, page);</span><br><span class="line">    ajax.<span class="title function_">set</span>(<span class="string">&quot;limit&quot;</span>, limit);</span><br><span class="line">    ajax.<span class="title function_">start</span>();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">DataAnalysis</span>.<span class="property">initTablea</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">table.<span class="title function_">render</span>(&#123;</span><br><span class="line">    <span class="attr">elem</span>: <span class="string">&#x27;#swjtable&#x27;</span>,</span><br><span class="line">    <span class="attr">height</span>:$(<span class="string">&quot;body&gt;div:first-child&quot;</span>).<span class="title function_">height</span>(),</span><br><span class="line">        [</span><br><span class="line">            &#123;<span class="attr">title</span>: <span class="string">&#x27;序号&#x27;</span>, <span class="attr">type</span>: <span class="string">&#x27;numbers&#x27;</span>, <span class="attr">align</span>: <span class="string">&quot;center&quot;</span>, <span class="attr">halign</span>: <span class="string">&#x27;center&#x27;</span>, <span class="attr">width</span>: <span class="number">50</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">title</span>: <span class="string">&#x27;检测时间&#x27;</span>, <span class="attr">field</span>: <span class="string">&#x27;jcsj&#x27;</span>, <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>, <span class="attr">halign</span>: <span class="string">&#x27;center&#x27;</span>,<span class="attr">width</span>: <span class="number">120</span>&#125;,</span><br><span class="line">        ]],</span><br><span class="line">    <span class="attr">page</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">id</span>: <span class="string">&#x27;testReload&#x27;</span>,</span><br><span class="line">    <span class="attr">even</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">limit</span>:count,</span><br><span class="line">    <span class="attr">data</span>:dataList,</span><br><span class="line">    <span class="attr">where</span>: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">done</span>: <span class="keyword">function</span> (<span class="params">res, curr, count</span>) &#123;</span><br><span class="line">        <span class="comment">// 监听滚动条</span></span><br><span class="line">        $(<span class="string">&quot;.layui-table-main&quot;</span>).<span class="title function_">scroll</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="comment">// console.log(&#x27;监听到了&#x27;)</span></span><br><span class="line">            <span class="keyword">if</span> (($(<span class="string">&#x27;.layui-table-main&#x27;</span>)[<span class="number">0</span>].<span class="property">scrollHeight</span> - $(<span class="variable language_">this</span>).<span class="title function_">scrollTop</span>() - $(<span class="string">&#x27;.layui-table-main&#x27;</span>)[<span class="number">0</span>].<span class="property">clientHeight</span>) == <span class="number">0</span> &amp;&amp; pageNum &gt; page) &#123;</span><br><span class="line">                <span class="title class_">DataAnalysis</span>.<span class="property">scrollHeight</span>=$(<span class="variable language_">this</span>).<span class="title function_">scrollTop</span>();</span><br><span class="line">                page = page + <span class="number">1</span>;</span><br><span class="line">                <span class="title class_">DataAnalysis</span>.<span class="title function_">initData</span>(page, limit);</span><br><span class="line">                table.<span class="title function_">reload</span>(<span class="string">&#x27;testReload&#x27;</span>, &#123;</span><br><span class="line">                    <span class="attr">data</span>: dataList</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 手动设置滚动条的位置</span></span><br><span class="line">        <span class="keyword">if</span> (page != <span class="number">1</span>) &#123;</span><br><span class="line">            $(<span class="string">&quot;.layui-table-main&quot;</span>).<span class="title function_">scrollTop</span>(<span class="title class_">DataAnalysis</span>.<span class="property">scrollHeight</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">DataAnalysis</span>.<span class="title function_">initData</span>(page,limit)</span><br><span class="line"><span class="title class_">DataAnalysis</span>.<span class="title function_">initTablea</span>();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> JavaScript </category>
          
          <category> layui </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> JavaScript </tag>
            
            <tag> layui </tag>
            
            <tag> table懒加载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>table拼接日期输入框和下拉框</title>
      <link href="/posts/11106.html"/>
      <url>/posts/11106.html</url>
      
        <content type="html"><![CDATA[<p>代码如下</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">SbUseHistoryInfoTableEditRowObj</span> = <span class="literal">null</span> <span class="comment">// 预先定义一个下拉框的变量</span></span><br><span class="line"><span class="comment">// 使用履历</span></span><br><span class="line">table.<span class="title function_">render</span>(&#123;</span><br><span class="line">  <span class="attr">elem</span>: <span class="string">&#x27;#SbUseHistoryInfoTable&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: [],</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">  <span class="attr">contentType</span>: <span class="string">&#x27;application/json;charset=UTF-8&#x27;</span>,</span><br><span class="line">  <span class="comment">//url : Hussar.ctxPath+&#x27;/sbinfoProject/getSbUseHistory&#x27;,</span></span><br><span class="line">  <span class="attr">cols</span>: [</span><br><span class="line">    [</span><br><span class="line">      &#123; <span class="attr">checkbox</span>: <span class="literal">true</span>, <span class="attr">halign</span>: <span class="string">&#x27;center&#x27;</span>, <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>, <span class="attr">width</span>: <span class="number">50</span> &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;序号&#x27;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;numbers&#x27;</span>,</span><br><span class="line">        <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">        <span class="attr">halign</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">        <span class="attr">width</span>: <span class="number">50</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;项目&#x27;</span>,</span><br><span class="line">        <span class="attr">field</span>: <span class="string">&#x27;xm&#x27;</span>,</span><br><span class="line">        <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">        <span class="attr">halign</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">        <span class="attr">edit</span>: <span class="string">&#x27;text&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;时间&#x27;</span>,</span><br><span class="line">        <span class="attr">field</span>: <span class="string">&#x27;sj&#x27;</span>,</span><br><span class="line">        <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">        <span class="attr">halign</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">        <span class="attr">edit</span>: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">        <span class="attr">event</span>: <span class="string">&#x27;inputDate&#x27;</span>,</span><br><span class="line">        <span class="attr">data_filed</span>: <span class="string">&#x27;date&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;状态&#x27;</span>,</span><br><span class="line">        <span class="attr">field</span>: <span class="string">&#x27;zt&#x27;</span>,</span><br><span class="line">        <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">        <span class="attr">halign</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">        <span class="attr">event</span>: <span class="string">&#x27;ztDropDown&#x27;</span>,</span><br><span class="line">        <span class="attr">templet</span>: <span class="keyword">function</span> (<span class="params">d</span>) &#123;</span><br><span class="line">          <span class="keyword">var</span> html = <span class="string">&#x27;&#x27;</span></span><br><span class="line">          <span class="keyword">if</span> (d.<span class="property">zt</span> == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">            html =</span><br><span class="line">              <span class="string">&quot;&lt;option value=&#x27;0&#x27;&gt;使用中&lt;/option&gt; &lt;option value=&#x27;1&#x27; selected=&#x27;selected&#x27;&gt;以归还&lt;/option&gt;&quot;</span></span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            html =</span><br><span class="line">              <span class="string">&quot;&lt;option value=&#x27;0&#x27; selected=&#x27;selected&#x27;&gt;使用中&lt;/option&gt; &lt;option value=&#x27;1&#x27;&gt;以归还&lt;/option&gt;&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> <span class="string">&#x27;&lt;select lay-filter=&quot;zt&quot; name=&quot;zt&quot;  &gt;&#x27;</span> + html + <span class="string">&#x27;&lt;/select&gt;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">limit</span>: <span class="number">10</span>,</span><br><span class="line">  <span class="comment">//id : &#x27;useHistoryReload&#x27;,</span></span><br><span class="line">  <span class="attr">even</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">where</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">done</span>: <span class="keyword">function</span> (<span class="params">res, curr, count</span>) &#123;</span><br><span class="line">    form.<span class="title function_">render</span>(<span class="string">&#x27;select&#x27;</span>)</span><br><span class="line">    $(<span class="string">&#x27;.layui-table-body, .layui-table-box, .layui-table-cell&#x27;</span>).<span class="title function_">css</span>(</span><br><span class="line">      <span class="string">&#x27;overflow&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;visible&#x27;</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">form.<span class="title function_">on</span>(<span class="string">&#x27;select(zt)&#x27;</span>, <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">  <span class="comment">// 这里的zt就是select的lay-filter的值</span></span><br><span class="line">  <span class="keyword">var</span> oldData = table.<span class="property">cache</span>[<span class="string">&#x27;SbUseHistoryInfoTable&#x27;</span>] <span class="comment">// 这里cache后面的值也是table标签里面的lay-filter的值或者为id值，可以将它们两个设置为一样</span></span><br><span class="line">  <span class="title class_">SbUseHistoryInfoTableEditRowObj</span>.<span class="title function_">update</span>(&#123;</span><br><span class="line">    <span class="attr">zt</span>: data.<span class="property">value</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  table.<span class="title function_">reload</span>(<span class="string">&#x27;SbUseHistoryInfoTable&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: oldData,</span><br><span class="line">    <span class="attr">done</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// 回调，css，防止下拉框被盖住，直接粘贴即可</span></span><br><span class="line">      $(<span class="string">&#x27;.layui-table-body, .layui-table-box, .layui-table-cell&#x27;</span>).<span class="title function_">css</span>(</span><br><span class="line">        <span class="string">&#x27;overflow&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;visible&#x27;</span></span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">table.<span class="title function_">on</span>(<span class="string">&#x27;tool(SbUseHistoryInfoTable)&#x27;</span>, <span class="keyword">function</span> (<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> newdata = &#123;&#125;</span><br><span class="line">  <span class="keyword">if</span> (obj.<span class="property">event</span> === <span class="string">&#x27;inputDate&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// 点击事件日期输入框时进入到此事件</span></span><br><span class="line">    <span class="keyword">var</span> field = $(<span class="variable language_">this</span>).<span class="title function_">data</span>(<span class="string">&#x27;field&#x27;</span>)</span><br><span class="line">    laydate.<span class="title function_">render</span>(&#123;</span><br><span class="line">      <span class="attr">elem</span>: <span class="variable language_">this</span>.<span class="property">firstChild</span>,</span><br><span class="line">      <span class="attr">show</span>: <span class="literal">true</span>, <span class="comment">//直接显示</span></span><br><span class="line">      <span class="attr">range</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">closeStop</span>: <span class="variable language_">this</span>,</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;datetime&#x27;</span>,</span><br><span class="line">      <span class="attr">format</span>: <span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>,</span><br><span class="line">      <span class="attr">done</span>: <span class="keyword">function</span> (<span class="params">value, date</span>) &#123;</span><br><span class="line">        newdata[field] = value</span><br><span class="line">        obj.<span class="title function_">update</span>(newdata)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (obj.<span class="property">event</span> === <span class="string">&#x27;ztDropDown&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// 点击下拉框时先进入到此事件</span></span><br><span class="line">    <span class="title class_">SbUseHistoryInfoTableEditRowObj</span> = obj</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> JavaScript </category>
          
          <category> layui </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> JavaScript </tag>
            
            <tag> layui </tag>
            
            <tag> table拼接日期输入框和下拉框 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>table高度自适应</title>
      <link href="/posts/11603.html"/>
      <url>/posts/11603.html</url>
      
        <content type="html"><![CDATA[<p>只需要给表格加上一下 css 即可，加上之后，使用 templet 可以自定义格式化 html 来填充每个 td 的高度</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*右下方的表格的内容高度自适应*/</span></span><br><span class="line"><span class="selector-class">.layui-table-cell</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: table-cell;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：加上之后，可能标题和内容的宽度对应不起来，只需要手动给每个 col（表头对象）一个固定的宽度即可解决该问题</p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> JavaScript </category>
          
          <category> layui </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> JavaScript </tag>
            
            <tag> layui </tag>
            
            <tag> table高度自适应 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>table点击行触发表格的checkbox选中</title>
      <link href="/posts/38275.html"/>
      <url>/posts/38275.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 正常的渲染一个表格</span></span><br><span class="line">table.<span class="title function_">render</span>(&#123;</span><br><span class="line">  <span class="attr">elem</span>: <span class="string">&#x27;#LineStruTable&#x27;</span>,</span><br><span class="line">  <span class="attr">height</span>: $(<span class="string">&#x27;.tableArea&#x27;</span>).<span class="title function_">height</span>() - <span class="number">85</span>,</span><br><span class="line">  <span class="attr">url</span>: <span class="title class_">Hussar</span>.<span class="property">ctxPath</span> + <span class="string">&#x27;/lineStru/list&#x27;</span>,</span><br><span class="line">  <span class="attr">toolbar</span>: <span class="string">&#x27;#toolbarDemo&#x27;</span>,</span><br><span class="line">  <span class="attr">defaultToolbar</span>: [<span class="string">&#x27;filter&#x27;</span>, <span class="string">&#x27;exports&#x27;</span>],</span><br><span class="line">  <span class="attr">cols</span>: [</span><br><span class="line">    [</span><br><span class="line">      &#123; <span class="attr">checkbox</span>: <span class="literal">true</span>, <span class="attr">halign</span>: <span class="string">&#x27;center&#x27;</span>, <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>, <span class="attr">width</span>: <span class="number">50</span> &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;序号&#x27;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;numbers&#x27;</span>,</span><br><span class="line">        <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">        <span class="attr">halign</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">        <span class="attr">width</span>: <span class="number">50</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;主键&#x27;</span>,</span><br><span class="line">        <span class="attr">hide</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">field</span>: <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">        <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">        <span class="attr">halign</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">        <span class="attr">sort</span>: <span class="literal">true</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;线路名称&#x27;</span>,</span><br><span class="line">        <span class="attr">field</span>: <span class="string">&#x27;lineName&#x27;</span>,</span><br><span class="line">        <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">        <span class="attr">halign</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">        <span class="attr">sort</span>: <span class="literal">true</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;线路编号&#x27;</span>,</span><br><span class="line">        <span class="attr">field</span>: <span class="string">&#x27;linkCode&#x27;</span>,</span><br><span class="line">        <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">        <span class="attr">halign</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">        <span class="attr">sort</span>: <span class="literal">true</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;起始里程&#x27;</span>,</span><br><span class="line">        <span class="attr">field</span>: <span class="string">&#x27;startMileStr&#x27;</span>,</span><br><span class="line">        <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">        <span class="attr">halign</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">        <span class="attr">sort</span>: <span class="literal">true</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;结束里程&#x27;</span>,</span><br><span class="line">        <span class="attr">field</span>: <span class="string">&#x27;endMileStr&#x27;</span>,</span><br><span class="line">        <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">        <span class="attr">halign</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">        <span class="attr">sort</span>: <span class="literal">true</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;线路类型&#x27;</span>,</span><br><span class="line">        <span class="attr">field</span>: <span class="string">&#x27;typeStr&#x27;</span>,</span><br><span class="line">        <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">        <span class="attr">halign</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">        <span class="attr">sort</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">page</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">id</span>: <span class="string">&#x27;lineStruTable&#x27;</span>,</span><br><span class="line">  <span class="attr">even</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">where</span>: &#123;</span><br><span class="line">    <span class="attr">cityId</span>: $(<span class="string">&#x27;#city&#x27;</span>).<span class="title function_">val</span>(),</span><br><span class="line">    <span class="attr">linkCode</span>: $(<span class="string">&#x27;#line&#x27;</span>).<span class="title function_">val</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染完表格后加上下面这两段代码即可</span></span><br><span class="line"><span class="comment">// 点击layui表格行会选中复选框</span></span><br><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">on</span>(</span><br><span class="line">  <span class="string">&#x27;click&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;.layui-table-body table.layui-table tbody tr&#x27;</span>,</span><br><span class="line">  <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> index = $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;data-index&#x27;</span>)</span><br><span class="line">    <span class="keyword">var</span> tableBox = $(<span class="variable language_">this</span>).<span class="title function_">parents</span>(<span class="string">&#x27;.layui-table-box&#x27;</span>)</span><br><span class="line">    <span class="comment">//存在固定列</span></span><br><span class="line">    <span class="keyword">if</span> (tableBox.<span class="title function_">find</span>(<span class="string">&#x27;.layui-table-fixed.layui-table-fixed-l&#x27;</span>).<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      tableDiv = tableBox.<span class="title function_">find</span>(<span class="string">&#x27;.layui-table-fixed.layui-table-fixed-l&#x27;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      tableDiv = tableBox.<span class="title function_">find</span>(<span class="string">&#x27;.layui-table-body.layui-table-main&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> checkCell = tableDiv</span><br><span class="line">      .<span class="title function_">find</span>(<span class="string">&#x27;tr[data-index=&#x27;</span> + index + <span class="string">&#x27;]&#x27;</span>)</span><br><span class="line">      .<span class="title function_">find</span>(<span class="string">&#x27;td div.laytable-cell-checkbox div.layui-form-checkbox I&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> (checkCell.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      checkCell.<span class="title function_">click</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//对td的单击事件进行拦截停止，防止事件冒泡再次触发上述的单击事件（Table的单击行事件不会拦截，依然有效）</span></span><br><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">on</span>(</span><br><span class="line">  <span class="string">&#x27;click&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;td div.laytable-cell-checkbox div.layui-form-checkbox&#x27;</span>,</span><br><span class="line">  <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">    e.<span class="title function_">stopPropagation</span>()</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> JavaScript </category>
          
          <category> layui </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> JavaScript </tag>
            
            <tag> layui </tag>
            
            <tag> table点击行触发表格的checkbox选中 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在子弹窗写方法关闭当前子弹窗</title>
      <link href="/posts/58763.html"/>
      <url>/posts/58763.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> index = parent.<span class="property">layer</span>.<span class="title function_">getFrameIndex</span>(<span class="variable language_">window</span>.<span class="property">name</span>)</span><br><span class="line">parent.<span class="property">layer</span>.<span class="title function_">close</span>(index)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> JavaScript </category>
          
          <category> layui </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> JavaScript </tag>
            
            <tag> layui </tag>
            
            <tag> 在子弹窗写方法关闭当前子弹窗 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>时间日期控件点击完日期后，自动弹出时间选择框</title>
      <link href="/posts/25254.html"/>
      <url>/posts/25254.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;layui-master/dist/css/layui.css&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#f1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">500px</span> auto;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;layui-form&quot;</span> <span class="attr">id</span>=<span class="string">&quot;f1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;i1&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;layui-master/dist/layui.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      layui.<span class="title function_">use</span>([<span class="string">&#x27;laydate&#x27;</span>, <span class="string">&#x27;layer&#x27;</span>], <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> $ = layui.<span class="property">$</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> laydate = layui.<span class="property">laydate</span></span></span><br><span class="line"><span class="language-javascript">        laydate.<span class="title function_">render</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">elem</span>: <span class="string">&#x27;#i1&#x27;</span>, <span class="comment">//指定元素</span></span></span><br><span class="line"><span class="language-javascript">          <span class="attr">type</span>: <span class="string">&#x27;datetime&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">min</span>: <span class="string">&#x27;2021-1-15&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">max</span>: <span class="string">&#x27;2021-2-18&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">/*重点代码*/</span></span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">ready</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&#x27;.layui-laydate-content table tbody tr&#x27;</span>).<span class="title function_">on</span>(</span></span><br><span class="line"><span class="language-javascript">              <span class="string">&#x27;click&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">              <span class="string">&#x27;td&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (</span></span><br><span class="line"><span class="language-javascript">                  $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;class&#x27;</span>) == <span class="string">&#x27;&#x27;</span> ||</span></span><br><span class="line"><span class="language-javascript">                  $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;class&#x27;</span>) == <span class="literal">null</span> ||</span></span><br><span class="line"><span class="language-javascript">                  $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;class&#x27;</span>) == <span class="string">&#x27;layui-this&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                ) &#123;</span></span><br><span class="line"><span class="language-javascript">                  $(</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&quot;.layui-laydate-footer [lay-type=&#x27;datetime&#x27;].laydate-btns-time&quot;</span></span></span><br><span class="line"><span class="language-javascript">                  ).<span class="title function_">click</span>()</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">              &#125;</span></span><br><span class="line"><span class="language-javascript">            )</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> JavaScript </category>
          
          <category> layui </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> JavaScript </tag>
            
            <tag> layui </tag>
            
            <tag> 时间日期控件点击完日期后，自动弹出时间选择框 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>父子页面通信</title>
      <link href="/posts/14449.html"/>
      <url>/posts/14449.html</url>
      
        <content type="html"><![CDATA[<ul><li>子页面获取父页面元素的值<br>在 layui.use().里面写即可<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> cityId = parent.<span class="property">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;cityId&#x27;</span>).<span class="property">value</span></span><br><span class="line"><span class="keyword">let</span> id = parent.<span class="property">layui</span>.$(<span class="string">&#x27;#id&#x27;</span>).<span class="title function_">val</span>()</span><br></pre></td></tr></table></figure></li><li>子页面调用父页面的方法<br>在 layui.use 之前写一个 json 对象赋给 window 对象<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Cdl</span> = &#123;</span><br><span class="line">  <span class="attr">seItem</span>: <span class="literal">null</span>,   <span class="comment">// 选中的条目</span></span><br><span class="line">  <span class="attr">layIndex</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">scrollHeight</span>: <span class="number">0</span>,</span><br><span class="line">&#125;</span><br><span class="line">layui.<span class="title function_">user</span>(&#123;</span><br><span class="line"><span class="title class_">Cdl</span>.<span class="property">initTreeView</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>子页面<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">parent</span>.<span class="property">Cdl</span>.<span class="title function_">initTreeView</span>()</span><br></pre></td></tr></table></figure></li><li>layui 让父页面的某个按钮点击<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">parent.<span class="property">layui</span>.$(<span class="string">&#x27;#search&#x27;</span>).<span class="title function_">click</span>()</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> JavaScript </category>
          
          <category> layui </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> JavaScript </tag>
            
            <tag> layui </tag>
            
            <tag> 父子页面通信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>给layui的下拉框赋值，同时触发layui的下拉框选择事件</title>
      <link href="/posts/46931.html"/>
      <url>/posts/46931.html</url>
      
        <content type="html"><![CDATA[<p>前提：该选择框需要放在 layui-form 的表单下</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#citySerch&quot;</span>).<span class="title function_">val</span>(cityId);<span class="comment">// 给下拉框赋值</span></span><br><span class="line"><span class="title class_">Let</span> filter=$(<span class="string">&#x27;#citySerch&#x27;</span>).<span class="title function_">attr</span>(<span class="string">&#x27;lay-filter&#x27;</span>);<span class="comment">//获取该元素的lay-filter属性</span></span><br><span class="line">filter&amp;&amp;layui.<span class="title function_">event</span>(<span class="string">&#x27;form&#x27;</span>,<span class="string">&#x27;select(&#x27;</span>+filter+<span class="string">&#x27;)&#x27;</span>,&#123;<span class="attr">elem</span>:$(<span class="string">&quot;#citySerch&quot;</span>),<span class="attr">value</span>:cityId&#125;);<span class="comment">//触发该标签的select事件</span></span><br><span class="line">form.<span class="title function_">render</span>(<span class="string">&#x27;select&#x27;</span>);<span class="comment">// 重新渲染下拉框</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> JavaScript </category>
          
          <category> layui </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> JavaScript </tag>
            
            <tag> layui </tag>
            
            <tag> 给layui的下拉框赋值，同时触发layui的下拉框选择事件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Promise</title>
      <link href="/posts/30119.html"/>
      <url>/posts/30119.html</url>
      
        <content type="html"><![CDATA[<h1 id="promise-封装-ajax，并且-promise-的链式调用的示例"><a href="#promise-封装-ajax，并且-promise-的链式调用的示例" class="headerlink" title="promise 封装 ajax，并且 promise 的链式调用的示例"></a>promise 封装 ajax，并且 promise 的链式调用的示例</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> request = <span class="keyword">function</span> (<span class="params">url, type = <span class="string">&#x27;get&#x27;</span>, data = <span class="string">&#x27;&#x27;</span>, msg = <span class="string">&#x27;请求失败&#x27;</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 封装jq ajax</span></span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">      type,</span><br><span class="line">      url,</span><br><span class="line">      <span class="attr">async</span>: <span class="literal">true</span>,</span><br><span class="line">      data,</span><br><span class="line">      <span class="title function_">success</span>(<span class="params">res</span>) &#123;</span><br><span class="line">        <span class="comment">//成功的回调函数</span></span><br><span class="line">        <span class="keyword">if</span> (res.<span class="property">code</span> === <span class="number">500</span>) &#123;</span><br><span class="line">          <span class="title class_">Hussar</span>.<span class="title function_">info</span>(msg)</span><br><span class="line">          <span class="title function_">reject</span>()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title function_">resolve</span>(res.<span class="property">data</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="title function_">error</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">reject</span>()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">request</span>(<span class="string">&#x27;/mainLine/getAllLineList&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    homePage.<span class="property">lineList</span> = res</span><br><span class="line">    homePage.<span class="property">lineTableList</span> = res</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">request</span>(<span class="string">&#x27;/car/getAllCarList&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    homePage.<span class="property">carList</span> = res</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">request</span>(<span class="string">&#x27;/carOverrun/getAllCarOverRunData&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    homePage.<span class="property">tableData</span> = res</span><br><span class="line">    homePage.<span class="title function_">initSelect</span>()</span><br><span class="line">    homePage.<span class="title function_">createStationMap</span>($(<span class="string">&#x27;#line&#x27;</span>).<span class="title function_">val</span>(), $(<span class="string">&#x27;#car&#x27;</span>).<span class="title function_">val</span>())</span><br><span class="line">    homePage.<span class="title function_">initTable</span>()</span><br><span class="line">    homePage.<span class="title function_">initButton</span>()</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> JavaScript </category>
          
          <category> es6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> JavaScript </tag>
            
            <tag> es6 </tag>
            
            <tag> Promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ajax前后台参数传递</title>
      <link href="/posts/64611.html"/>
      <url>/posts/64611.html</url>
      
        <content type="html"><![CDATA[<h2 id="contentType-的类型"><a href="#contentType-的类型" class="headerlink" title="contentType 的类型"></a>contentType 的类型</h2><ul><li><p>ajax 的默认 contentType 是：</p><p>“application&#x2F;x-www-form-urlencoded;charset&#x3D;utf-8”</p><p>它是最普通的{key-value,key-value}的格式</p><p>无论 get 还是 post，springboot 可以默认封装成一个简单的 bean,此时不用添加任何注解。但是如果 bean 的属性有数组等复杂属性。那么会封装失败</p><p>后台也可以用@RequestParam 注解来提取某个简单的参数，如果同名该注解可以省略。但是对于 get 请求。不能提取数组。</p><p>想要提取数组。请求方式必须为 post 并且语法如下@RequestParam(“ids[]”)</p></li><li><p>如果为</p><p>contentType:”application&#x2F;json;charset&#x3D;utf-8”,</p><p>data:JSON.stringfy(data),</p><p>此时，请求方式必须为 post，后台用@RequestBody(JavaBean javaBean)</p><p>来接收，该方式几乎是除了文件外的万能方式。</p></li><li><p>如果为 false</p><p>那么一般就是上传文件，详见 ssmpj 的图片上传与回显的例子</p></li><li><p>如果为</p><p>text&#x2F;xml</p><p>就看这篇博客的解析：</p><p><a href="https://blog.csdn.net/nicexibeidage/article/details/84070290">原文链接</a></p><p>因为实际情况很少遇到</p></li></ul><h2 id="前后台传值的例子"><a href="#前后台传值的例子" class="headerlink" title="前后台传值的例子"></a>前后台传值的例子</h2><ol><li><p>get 方式传递普通数组和其他单独的参数<br>前台 js 代码</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建一个测试数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> boxIds = <span class="keyword">new</span> <span class="title class_">Array</span>()</span><br><span class="line"></span><br><span class="line">boxIds.<span class="title function_">push</span>(<span class="number">12182</span>)</span><br><span class="line"></span><br><span class="line">boxIds.<span class="title function_">push</span>(<span class="number">12183</span>)</span><br><span class="line"></span><br><span class="line">boxIds.<span class="title function_">push</span>(<span class="number">12184</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//向后台交互</span></span><br><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;/xxx&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">boxIds</span>: boxIds,</span><br><span class="line"></span><br><span class="line">    <span class="attr">boxType</span>: <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">time</span>: <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>()</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">traditional</span>: <span class="literal">true</span>, <span class="comment">//当有数组的时候这里设置为true，没有数组的时候这里可以不设置</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="comment">//do sth...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>后台 controller 代码（SpringMVC）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/box/changeLock&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">changeLock</span><span class="params">(Long[] boxIds, <span class="type">int</span> boxType)</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> locker_ChangeLockService.changeLock(boxIds, boxType);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>post 方式向后台传递数组和普通参数</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建一个测试数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> boxIds = <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line"></span><br><span class="line">boxIds.<span class="title function_">push</span>(<span class="number">12182</span>);</span><br><span class="line"></span><br><span class="line">boxIds.<span class="title function_">push</span>(<span class="number">12183</span>);</span><br><span class="line"></span><br><span class="line">boxIds.<span class="title function_">push</span>(<span class="number">12184</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//向后台交互</span></span><br><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line"></span><br><span class="line">  <span class="attr">url</span>: <span class="string">&quot;/xxx&quot;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="attr">type</span>: <span class="string">&quot;post&quot;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="attr">contentType</span>:<span class="string">&#x27;application/www-form-urlencoded;charset=utf-8&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;boxIds&quot;</span>: boxIds,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;boxType&quot;</span>: <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;time&quot;</span>: <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>()</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//do sth...</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>后台 controller 代码（SpringMVC）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/box/changeLock&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">changeLock</span><span class="params">(Long[] boxIds, <span class="type">int</span> boxType)</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> locker_ChangeLockService.changeLock(boxIds, boxType);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>post 方式向后台传递复杂参数后台使用@RequestBody 封装</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建一个测试数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> boxIds = <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line"></span><br><span class="line">boxIds.<span class="title function_">push</span>(<span class="number">12182</span>);</span><br><span class="line"></span><br><span class="line">boxIds.<span class="title function_">push</span>(<span class="number">12183</span>);</span><br><span class="line"></span><br><span class="line">boxIds.<span class="title function_">push</span>(<span class="number">12184</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;boxIds&quot;</span>: boxIds,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;boxType&quot;</span>: <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;time&quot;</span>: <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>()</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//向后台交互</span></span><br><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line"></span><br><span class="line">  <span class="attr">url</span>: <span class="string">&quot;/xxx&quot;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="attr">type</span>: <span class="string">&quot;post&quot;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="attr">contentType</span>:<span class="string">&#x27;application/json;charset=utf-8&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">data</span>: <span class="title class_">JSON</span>.<span class="title function_">stringfy</span>(obj)</span><br><span class="line"></span><br><span class="line">  <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//do sth...</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>后台 controller 代码（SpringMVC 和 bean）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/box/changeLock&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">changeLock</span><span class="params">(<span class="meta">@RequestBody</span> MyObj obj)</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> locker_ChangeLockService.changeLock(boxIds, boxType);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyObj</span>&#123;</span><br><span class="line"><span class="keyword">private</span> Integer[] boxIds;<span class="comment">// 这里用数组还是List都可以</span></span><br><span class="line"><span class="keyword">private</span> Integer boxType;</span><br><span class="line"><span class="keyword">private</span> LocalDateTime time;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>post 方式向后台对象数组，后台直接封装为 list<br>前台代码</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sbUseHistory = table.<span class="property">cache</span>[<span class="string">&#x27;SbUseHistoryInfoTable&#x27;</span>]</span><br><span class="line"><span class="keyword">var</span> sbUseHistoryList = [] <span class="comment">// 这就是json对象数组</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; sbUseHistory.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> sbinfoProject = &#123;&#125;</span><br><span class="line">  <span class="comment">// 下面是把对象的属性和后台实体的属性对应起来，然后在吧json对象push进list数组中</span></span><br><span class="line">  sbinfoProject.<span class="property">xmName</span> = sbUseHistory[i].<span class="property">xm</span></span><br><span class="line">  sbinfoProject.<span class="property">sbId</span> = sbId</span><br><span class="line">  sbinfoProject.<span class="property">syTime</span> = sbUseHistory[i].<span class="property">sj</span></span><br><span class="line">  sbinfoProject.<span class="property">syStatus</span> = sbUseHistory[i].<span class="property">zt</span></span><br><span class="line">  <span class="comment">// sbinfoProject.createTime =</span></span><br><span class="line">  sbUseHistoryList.<span class="title function_">push</span>(sbinfoProject)</span><br><span class="line">&#125;</span><br><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="title class_">Hussar</span>.<span class="property">ctxPath</span> + <span class="string">&#x27;/sbinfoProject/add&#x27;</span>,</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">  <span class="attr">dataType</span>: <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">  <span class="attr">async</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">data</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(sbUseHistoryList), <span class="comment">// 这里把json数组用stringfy()方法转成字符串，后台就能封装成对应的实体的集合</span></span><br><span class="line">  <span class="attr">contentType</span>: <span class="string">&#x27;application/json;charset=utf-8&#x27;</span>,</span><br><span class="line">  <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">result</span>) &#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>后台代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/add&quot;)</span></span><br><span class="line"><span class="meta">@BussinessLog(key = &quot;/sbinfoProject/add&quot;, type = BussinessLogType.INSERT, value = &quot;新增设备项目履历&quot;)</span></span><br><span class="line"><span class="meta">@RequiresPermissions(&quot;sbinfoProject:add&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">add</span><span class="params">(<span class="meta">@RequestBody</span> List&lt;SbinfoProject&gt; list)</span> &#123;</span><br><span class="line"></span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    Boolean flag;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        flag = sbinfoProjectService.saveBatch(list);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        map.put(<span class="string">&quot;code&quot;</span>, <span class="number">500</span>);</span><br><span class="line">        map.put(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;添加失败&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">        map.put(<span class="string">&quot;code&quot;</span>, <span class="number">200</span>);</span><br><span class="line">        map.put(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;添加成功&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        map.put(<span class="string">&quot;code&quot;</span>, <span class="number">500</span>);</span><br><span class="line">        map.put(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;添加失败&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>上传文件并监听上传进度</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>()</span><br><span class="line"><span class="comment">// 这里的file对象可以用其他的框架上传插件来获取，比如layui的或者bootstrap的,或者只是input type=&#x27;file&#x27;的等等等等。</span></span><br><span class="line"><span class="comment">// 这里只是获取到文件对象，并不用框架来上传，真正上传文件还在下面的代码中</span></span><br><span class="line">formData.<span class="title function_">append</span>(<span class="string">&#x27;file&#x27;</span>, file) <span class="comment">// 这里的这个file就是前台的文件对象，后台用MultipartFile类接收的</span></span><br><span class="line">formData.<span class="title function_">append</span>(<span class="string">&#x27;fileInfo&#x27;</span>, fileInfo)</span><br><span class="line">formData.<span class="title function_">append</span>(<span class="string">&#x27;id&#x27;</span>, newId)</span><br><span class="line"><span class="keyword">let</span> aj = &#123;</span><br><span class="line">  <span class="comment">//上传文件数据</span></span><br><span class="line">  <span class="attr">url</span>: <span class="title class_">Hussar</span>.<span class="property">ctxPath</span> + <span class="string">&#x27;/dtjcResources/uploadFile&#x27;</span>,</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">  <span class="attr">cache</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">data</span>: formData,</span><br><span class="line">  <span class="attr">processData</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">contentType</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">async</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="title function_">xhr</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">    xhr.<span class="property">upload</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;progress&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> progressRate = <span class="title class_">Math</span>.<span class="title function_">round</span>((e.<span class="property">loaded</span> / e.<span class="property">total</span>) * <span class="number">100</span>) + <span class="string">&#x27;%&#x27;</span> <span class="comment">// 获取到百分比</span></span><br><span class="line">      $(<span class="string">&quot;[fileId=&#x27;&quot;</span> + domId + <span class="string">&quot;&#x27;] .progress_num&quot;</span>).<span class="title function_">text</span>(progressRate) <span class="comment">// 让前台的dom元素显示这个百分比</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> xhr</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">success</span>(<span class="params">res</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (res.<span class="property">code</span> == <span class="string">&#x27;200&#x27;</span>) &#123;</span><br><span class="line">      $(<span class="string">&quot;[fileId=&#x27;&quot;</span> + domId + <span class="string">&quot;&#x27;] .file_progress&quot;</span>).<span class="title function_">text</span>(<span class="string">&#x27;上传成功&#x27;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      $(<span class="string">&quot;[fileId=&#x27;&quot;</span> + domId + <span class="string">&quot;&#x27;] .file_progress&quot;</span>).<span class="title function_">text</span>(<span class="string">&#x27;上传失败&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">error</span>(<span class="params"></span>) &#123;</span><br><span class="line">    $(<span class="string">&quot;[fileId=&#x27;&quot;</span> + domId + <span class="string">&quot;&#x27;] .file_progress&quot;</span>).<span class="title function_">text</span>(<span class="string">&#x27;上传失败&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">$.<span class="title function_">ajax</span>(aj)</span><br></pre></td></tr></table></figure><p>后台使用@RequestParam 一个个提取参数</p></li><li><p>上传一个或多个文件完整示例（按照 3 的方式微调可以监听上传进度）</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;layui-form addArea&quot;</span> <span class="attr">lay-filter</span>=<span class="string">&quot;addForm&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-form-item&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-inline&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;layui-form-label&quot;</span>&gt;</span>线别<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-input-inline&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;add-xianbie&quot;</span> <span class="attr">lay-filter</span>=<span class="string">&quot;addXianbie&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-form-item&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-inline&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;layui-form-label&quot;</span>&gt;</span>行别<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-input-inline&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;add-xingbie&quot;</span> <span class="attr">lay-filter</span>=<span class="string">&quot;addXingbie&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-form-item&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-inline&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;layui-form-label&quot;</span>&gt;</span>期次<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-input-inline&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;add-period&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-form-item&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-inline&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;layui-form-label&quot;</span>&gt;</span>文件上传<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-input-inline&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">          <span class="attr">id</span>=<span class="string">&quot;add-file-name&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">&quot;layui-input&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">readonly</span></span></span><br><span class="line"><span class="tag">          <span class="attr">placeholder</span>=<span class="string">&quot;点击选择文件&quot;</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-form-mid&quot;</span> <span class="attr">style</span>=<span class="string">&quot;padding: 0!important;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span></span></span><br><span class="line"><span class="tag">          <span class="attr">type</span>=<span class="string">&quot;button&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">&quot;layui-btn button-delete&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">id</span>=<span class="string">&quot;removeFile&quot;</span></span></span><br><span class="line"><span class="tag">        &gt;</span></span><br><span class="line">          删除文件</span><br><span class="line">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 这里的accept特指接收.xlsx文件,如果加上multipart属性还能多选文件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">    <span class="attr">type</span>=<span class="string">&quot;file&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">id</span>=<span class="string">&quot;add-file&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">&quot;layui-hide&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">accept</span>=<span class="string">&quot;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&quot;</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-form-item&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-input-block&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;layui-btn&quot;</span> <span class="attr">id</span>=<span class="string">&quot;confirmAdd&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">&quot;button&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">&quot;layui-btn layui-btn-primary&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">id</span>=<span class="string">&quot;cancelAdd&quot;</span></span></span><br><span class="line"><span class="tag">      &gt;</span></span><br><span class="line">        取消</span><br><span class="line">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 显示的input和隐藏的input type=file的交互</span></span><br><span class="line">$(<span class="string">&#x27;#add-file-name&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  $(<span class="string">&#x27;#add-file&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">$(<span class="string">&#x27;#add-file&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;change&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> event = e || <span class="variable language_">window</span>.<span class="property">event</span></span><br><span class="line">  <span class="comment">//获取 文件 个数 取消的时候使用</span></span><br><span class="line">  <span class="keyword">let</span> files = event.<span class="property">target</span>.<span class="property">files</span></span><br><span class="line">  <span class="keyword">if</span> (files &amp;&amp; files.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    $(<span class="string">&#x27;#add-file-name&#x27;</span>).<span class="title function_">val</span>(files[<span class="number">0</span>].<span class="property">name</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $(<span class="string">&#x27;#add-file-name&#x27;</span>).<span class="title function_">val</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">$(<span class="string">&#x27;#removeFile&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  $(<span class="string">&#x27;#add-file&#x27;</span>).<span class="title function_">val</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">  $(<span class="string">&#x27;#add-file-name&#x27;</span>).<span class="title function_">val</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ajax文件和参数一起请求的方法</span></span><br><span class="line">$(<span class="string">&#x27;#confirmAdd&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!$(<span class="string">&#x27;#add-xianbie&#x27;</span>).<span class="title function_">val</span>()) &#123;</span><br><span class="line">    <span class="title class_">Hussar</span>.<span class="title function_">info</span>(<span class="string">&#x27;请选择线别&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!$(<span class="string">&#x27;#add-xingbie&#x27;</span>).<span class="title function_">val</span>()) &#123;</span><br><span class="line">    <span class="title class_">Hussar</span>.<span class="title function_">info</span>(<span class="string">&#x27;请选择行别&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!$(<span class="string">&#x27;#add-period&#x27;</span>).<span class="title function_">val</span>()) &#123;</span><br><span class="line">    <span class="title class_">Hussar</span>.<span class="title function_">info</span>(<span class="string">&#x27;请选择期次&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!$(<span class="string">&#x27;#add-file&#x27;</span>).<span class="title function_">val</span>()) &#123;</span><br><span class="line">    <span class="title class_">Hussar</span>.<span class="title function_">info</span>(<span class="string">&#x27;请选择文件&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 拼接form数据</span></span><br><span class="line">  <span class="keyword">let</span> param = <span class="keyword">new</span> <span class="title class_">FormData</span>() <span class="comment">//创建form对象</span></span><br><span class="line">  param.<span class="title function_">append</span>(<span class="string">&#x27;xianbie&#x27;</span>, $(<span class="string">&#x27;#add-xianbie&#x27;</span>).<span class="title function_">val</span>()) <span class="comment">//通过append向form对象添加数据</span></span><br><span class="line">  param.<span class="title function_">append</span>(<span class="string">&#x27;xingbie&#x27;</span>, $(<span class="string">&#x27;#add-xingbie&#x27;</span>).<span class="title function_">val</span>()) <span class="comment">//通过append向form对象添加数据</span></span><br><span class="line">  param.<span class="title function_">append</span>(<span class="string">&#x27;period&#x27;</span>, $(<span class="string">&#x27;#add-period&#x27;</span>).<span class="title function_">val</span>()) <span class="comment">//通过append向form对象添加数据</span></span><br><span class="line">  <span class="comment">// 这里如果写.files而不是.files[0]那么就能就能向后台一次发送多个文件</span></span><br><span class="line">  param.<span class="title function_">append</span>(<span class="string">&#x27;file&#x27;</span>, $(<span class="string">&#x27;#add-file&#x27;</span>)[<span class="number">0</span>].<span class="property">files</span>[<span class="number">0</span>]) <span class="comment">//通过append向form对象添加数据</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> load = layer.<span class="title function_">msg</span>(<span class="string">&#x27;正在读取文件并保存数据，请耐心等待&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">icon</span>: <span class="number">16</span>,</span><br><span class="line">    <span class="attr">shade</span>: <span class="number">0.7</span>,</span><br><span class="line">    <span class="attr">time</span>: <span class="number">0</span></span><br><span class="line">  &#125;)</span><br><span class="line">  $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="title class_">Hussar</span>.<span class="property">ctxPath</span> + <span class="string">&#x27;/tJcsjCjLj/addNewLjcjRecord&#x27;</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    <span class="attr">async</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">contentType</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">processData</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">data</span>: param,</span><br><span class="line">    <span class="title function_">success</span>(<span class="params">res</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!res) &#123;</span><br><span class="line">        layer.<span class="title function_">close</span>(load)</span><br><span class="line">        <span class="title class_">Hussar</span>.<span class="title function_">error</span>(<span class="string">&#x27;新增失败&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      layer.<span class="title function_">closeAll</span>()</span><br><span class="line">      <span class="title class_">Hussar</span>.<span class="title function_">success</span>(<span class="string">&#x27;新增成功&#x27;</span>)</span><br><span class="line">      <span class="title function_">initTable</span>()</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">error</span>(<span class="params"></span>) &#123;</span><br><span class="line">      layer.<span class="title function_">close</span>(load)</span><br><span class="line">      <span class="title class_">Hussar</span>.<span class="title function_">error</span>(<span class="string">&#x27;新增失败&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 上传文件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/addNewLjcjRecord&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="comment">// 这里文件的接收能通过这种写法@RequestParam(&quot;file[]&quot;) MultipartFile[] file来接收多个文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addNewLjcjRecord</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> MultipartFile file,</span></span><br><span class="line"><span class="params">                                <span class="meta">@RequestParam(&quot;xianbie&quot;)</span> String xianbie,</span></span><br><span class="line"><span class="params">                                <span class="meta">@RequestParam(&quot;xingbie&quot;)</span> String xingbie,</span></span><br><span class="line"><span class="params">                                <span class="meta">@RequestParam(&quot;period&quot;)</span> String period)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> cjLjService.addNewLjcjRecord(xianbie, xingbie, period, file);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>多文件上传（一起上传,监听上传进度）</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--上传按钮--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;uploadBtn&quot;</span>&gt;</span>点击我进行多文件上传<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--#uploadFileInputDiv是html里一个隐藏的div--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--多文件上传需要用到该容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;uploadFileInputDiv&quot;</span> <span class="attr">class</span>=<span class="string">&quot;layui-hide&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#uploadBtn&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 在隐藏的div里拼接dom元素</span></span><br><span class="line">  <span class="keyword">let</span> html =</span><br><span class="line">    <span class="string">&#x27;&lt;input type=&quot;file&quot; id=&quot;multiInput&quot; name=&quot;filename&quot; multiple=&quot;multiple&quot; hidden&gt;&#x27;</span></span><br><span class="line">  $(<span class="string">&#x27;#uploadFileInputDiv&#x27;</span>).<span class="title function_">html</span>(html)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 给拼接的dom元素监听事件</span></span><br><span class="line">  $(<span class="string">&#x27;#uploadFileInputDiv input&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;change&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>() <span class="comment">//每一次需重新创建</span></span><br><span class="line">    <span class="keyword">let</span> files = $(<span class="string">&#x27;#uploadFileInputDiv input&#x27;</span>)[<span class="number">0</span>].<span class="property">files</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; files.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">let</span> file = files[i]</span><br><span class="line">      formData.<span class="title function_">append</span>(<span class="string">&#x27;file&#x27;</span>, file)</span><br><span class="line">    &#125;</span><br><span class="line">    formData.<span class="title function_">append</span>(<span class="string">&#x27;testTaskId&#x27;</span>, $(<span class="string">&#x27;#csrw_id&#x27;</span>).<span class="title function_">val</span>())</span><br><span class="line">    formData.<span class="title function_">append</span>(<span class="string">&#x27;fileId&#x27;</span>, fileId)</span><br><span class="line">    <span class="title function_">uploadMultiFile</span>(formData)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 触发dom元素的点击事件</span></span><br><span class="line">  $(<span class="string">&#x27;#uploadFileInputDiv input&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件上传的前台代码</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">uploadMultiFile</span>(<span class="params">formData</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> aj = &#123;</span><br><span class="line">    <span class="comment">//上传文件数据</span></span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/MultiFileUpload&#x27;</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    <span class="attr">cache</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">data</span>: formData,</span><br><span class="line">    <span class="attr">processData</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">contentType</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">async</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="title function_">xhr</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">      xhr.<span class="property">upload</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;progress&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> progressRate = <span class="title class_">Math</span>.<span class="title function_">round</span>((e.<span class="property">loaded</span> / e.<span class="property">total</span>) * <span class="number">100</span>) + <span class="string">&#x27;%&#x27;</span> <span class="comment">// 上传进度</span></span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">return</span> xhr</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">success</span>(<span class="params">res</span>) &#123;</span><br><span class="line">      layer.<span class="title function_">close</span>(progressLayer)</span><br><span class="line">      <span class="keyword">if</span> (res.<span class="property">code</span> === <span class="number">500</span>) &#123;</span><br><span class="line">        <span class="title class_">Hussar</span>.<span class="title function_">info</span>(<span class="string">&#x27;上传文件失败&#x27;</span>)</span><br><span class="line">        fileUpload.<span class="title function_">reload</span>()</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="title class_">Hussar</span>.<span class="title function_">success</span>(<span class="string">&#x27;上传成功！&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">error</span>(<span class="params"></span>) &#123;</span><br><span class="line">      layer.<span class="title function_">close</span>(progressLayer)</span><br><span class="line">      <span class="title class_">Hussar</span>.<span class="title function_">info</span>(<span class="string">&#x27;上传文件失败&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  $.<span class="title function_">ajax</span>(aj)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/MultiFileUpload&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">noiseFileUpload</span><span class="params">(<span class="meta">@RequestParam(&quot;file[]&quot;)</span> MultipartFile[] file,</span></span><br><span class="line"><span class="params">                                           <span class="meta">@RequestParam(&quot;testTaskId&quot;)</span> String testTaskId,</span></span><br><span class="line"><span class="params">                                           <span class="meta">@RequestParam(&quot;fileId&quot;)</span> String fileId)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接收的参数有二进制的文件数组，还有其他的参数</span></span><br><span class="line">   <span class="comment">// 自己做处理</span></span><br><span class="line">    <span class="comment">// ....</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回</span></span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：有的时候<code>@RequestParam(&quot;file[]&quot;) MultipartFile[] file</code>获取到的文件数组的长度为 0<br>此时，可以用如下的方式获取文件数组 or 集合</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/import_v1&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> Tip <span class="title function_">import_v1</span><span class="params">(<span class="meta">@RequestParam(&quot;xianbie&quot;)</span> Integer xianbie,</span></span><br><span class="line"><span class="params">                     <span class="meta">@RequestParam(&quot;xingbie&quot;)</span> Integer xingbie,</span></span><br><span class="line"><span class="params">                     <span class="meta">@RequestParam(&quot;lx&quot;)</span> Integer lx,</span></span><br><span class="line"><span class="params">                     <span class="meta">@RequestParam(&quot;jcfs&quot;)</span> Integer jcfs,</span></span><br><span class="line"><span class="params">                     <span class="meta">@RequestParam(&quot;jcrq&quot;)</span> String jcrq,</span></span><br><span class="line"><span class="params">                     <span class="meta">@RequestParam(&quot;jcry&quot;)</span> String jcry,</span></span><br><span class="line"><span class="params">                     HttpServletRequest request)</span> &#123;</span><br><span class="line">    <span class="type">SjfxMhJcjl</span> <span class="variable">jcjl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SjfxMhJcjl</span>();</span><br><span class="line">    jcjl.setXianbie(xianbie);</span><br><span class="line">    jcjl.setXingbie(xingbie);</span><br><span class="line">    jcjl.setLx(lx);</span><br><span class="line">    jcjl.setJcfs(jcfs);</span><br><span class="line">    jcjl.setJcrq(Timestamp.valueOf(jcrq));</span><br><span class="line">    jcjl.setJcry(jcry);</span><br><span class="line">    <span class="type">MultipartHttpServletRequest</span> <span class="variable">multipartRequest</span> <span class="operator">=</span> (MultipartHttpServletRequest) request;</span><br><span class="line">    List&lt;MultipartFile&gt; files = multipartRequest.getFiles(<span class="string">&quot;file&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> sjfxMhJcjlService.Import_v1(files, jcjl);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> JavaScript </category>
          
          <category> jQuery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> JavaScript </tag>
            
            <tag> jQuery </tag>
            
            <tag> ajax前后台参数传递 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ajax导入静态文件</title>
      <link href="/posts/126.html"/>
      <url>/posts/126.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">  <span class="attr">url</span>: <span class="title class_">Hussar</span>.<span class="property">ctxPath</span> + <span class="string">&#x27;/static/js/homePage/map.json&#x27;</span>, <span class="comment">// 文件相对地址（相对于使用这个js脚本的html文件,非常重要，仔细理解这句话）</span></span><br><span class="line">  <span class="attr">dataType</span>: <span class="string">&#x27;json&#x27;</span>, <span class="comment">// 类型,文件里定义的变量的类型</span></span><br><span class="line">  <span class="attr">async</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="title class_">Lmap</span> = data</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> JavaScript </category>
          
          <category> jQuery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> JavaScript </tag>
            
            <tag> jQuery </tag>
            
            <tag> ajax导入静态文件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>事件委托</title>
      <link href="/posts/16284.html"/>
      <url>/posts/16284.html</url>
      
        <content type="html"><![CDATA[<p>拼接的元素对于 jQ 的 click 无响应，此时就需要事件委托</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;.file_container&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="string">&#x27;.file_del&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 此时就能获取被点击的子元素，获取不到尝试加个parent()或children()试试</span></span><br><span class="line">  <span class="comment">// 如过target里面还有元素，那么点击该元素也会触发，即会有事件冒泡</span></span><br><span class="line">  <span class="keyword">let</span> dom = $(event.<span class="property">target</span>)</span><br><span class="line">&#125;)</span><br><span class="line">$(<span class="string">&#x27;.file_container&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="string">&#x27;.file_del&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 或者不用event对象，直接用$(this)正常来说也能获取到</span></span><br><span class="line">  <span class="keyword">let</span> dom = $(<span class="variable language_">this</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> JavaScript </category>
          
          <category> jQuery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> JavaScript </tag>
            
            <tag> jQuery </tag>
            
            <tag> 事件委托 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用jQuery实现让容器的滚动条滚动到某个内部元素的位置。让内部元素本来在中间，一下子跑到最上面</title>
      <link href="/posts/3285.html"/>
      <url>/posts/3285.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height:50px;overflow:auto&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;children&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height:25px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;children&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height:25px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;children&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height:25px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;children&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height:25px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;.parent&#x27;</span>).<span class="title function_">scrollTop</span>(</span><br><span class="line">  $(<span class="string">&#x27;.children:eq(2)&#x27;</span>).<span class="title function_">offset</span>().<span class="property">top</span> -</span><br><span class="line">    $(<span class="string">&#x27;.parent&#x27;</span>).<span class="title function_">offset</span>().<span class="property">top</span> +</span><br><span class="line">    $(<span class="string">&#x27;.parent&#x27;</span>).<span class="title function_">scrollTop</span>()</span><br><span class="line">)</span><br><span class="line"><span class="comment">// 上面的例子就是让父容器的滚动条滚动，让第三个孩子跑到最上面</span></span><br><span class="line"><span class="comment">// 其中parent是父容器</span></span><br><span class="line"><span class="comment">// children是子元素。</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> JavaScript </category>
          
          <category> jQuery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> JavaScript </tag>
            
            <tag> jQuery </tag>
            
            <tag> 利用jQuery实现让容器的滚动条滚动到某个内部元素的位置。让内部元素本来在中间，一下子跑到最上面 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实时监听input或textarea值发生变化（不需要失去焦点）</title>
      <link href="/posts/23464.html"/>
      <url>/posts/23464.html</url>
      
        <content type="html"><![CDATA[<p>暂时只对 input 和 textarea 有效</p><p>select 没经过测试，不知道对 select 是否也有效</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;textarea&#x27;</span>).<span class="title function_">bind</span>(<span class="string">&#x27;input propertychange&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// do sth</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> JavaScript </category>
          
          <category> jQuery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> JavaScript </tag>
            
            <tag> jQuery </tag>
            
            <tag> 实时监听input或textarea值发生变化（不需要失去焦点） </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>键盘事件</title>
      <link href="/posts/61433.html"/>
      <url>/posts/61433.html</url>
      
        <content type="html"><![CDATA[<h2 id="回车搜索"><a href="#回车搜索" class="headerlink" title="回车搜索"></a>回车搜索</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#search&#x27;</span>).<span class="title function_">bind</span>(<span class="string">&#x27;keydown&#x27;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> e = event || <span class="variable language_">window</span>.<span class="property">event</span> || <span class="variable language_">arguments</span>.<span class="property">callee</span>.<span class="property">caller</span>.<span class="property">arguments</span>[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">if</span> (e.<span class="property">keyCode</span> == <span class="number">13</span>) &#123;</span><br><span class="line">    <span class="comment">// search是输入框，此处是要执行输入完毕后按下回车后的操作</span></span><br><span class="line">    <span class="comment">//…………..</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> JavaScript </category>
          
          <category> jQuery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> JavaScript </tag>
            
            <tag> jQuery </tag>
            
            <tag> 键盘事件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markLine或markArea在使用滚动条放大之后消失的问题</title>
      <link href="/posts/37931.html"/>
      <url>/posts/37931.html</url>
      
        <content type="html"><![CDATA[<ul><li><p>问题：水平的 markLine 或者 markArea 当使用 dataZoom 放大的时候。只要 markLine&#x2F;markArea 不完全在当前缩放的范围内（有部分在）那么它们就会整体消失</p></li><li><p>解决方式：官方没有给出真正的解决方式。临时解决方式如下</p><p>监听滚动条的滚动，获得使用滚动条缩放 echarts 缩放后的范围（x 轴的最小值和最大值）。根据后台请求的 markLineData&#x2F;markAreaData 重新计算边界。如果某个 markLine&#x2F;markArea 的左侧边界小于缩放后的 x 轴左侧边界，那么就将它的左侧边界放大到 x 轴的左侧边界。右侧同理。替换掉原先的标记 series。</p><p><strong>注意：重新 setOption()时，可以合并原先的 option（noMerge:false)。因为只是重绘 markLine&#x2F;markArea,没必要销毁原先的所有组件，并重新创建新的组件。同时如果有内置滚动条的情况下，必须指定(silent:true)（不抛出事件）,否则使用内置滚动条放大 echarts 后，每次左右平移只能移动一点点，因为只要移动就会进入到滚动条监听事件里，而监听事件里又有 setOption()会打断平移操作</strong></p><p>示例代码</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">charts.<span class="title function_">off</span>(<span class="string">&#x27;dataZoom&#x27;</span>)</span><br><span class="line">charts.<span class="title function_">on</span>(<span class="string">&#x27;dataZoom&#x27;</span>, <span class="keyword">function</span> (<span class="params">params</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> opt = charts.<span class="title function_">getOption</span>()</span><br><span class="line">  <span class="keyword">let</span> startValuex = <span class="title class_">Math</span>.<span class="title function_">ceil</span>(opt.<span class="property">dataZoom</span>[<span class="number">0</span>].<span class="property">startValue</span>) <span class="comment">// x轴左侧向上取整</span></span><br><span class="line">  <span class="keyword">let</span> endValuex = <span class="title class_">Math</span>.<span class="title function_">floor</span>(opt.<span class="property">dataZoom</span>[<span class="number">0</span>].<span class="property">endValue</span>) <span class="comment">// x轴右侧向下取整</span></span><br><span class="line">  <span class="keyword">let</span> markLineData = [] <span class="comment">// 新的markLine数组</span></span><br><span class="line">  echartsData.<span class="property">lineStruData</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// echartsData.lineStuData是后台传回来的标线数据[[&#123;name:&#x27;&#x27;,xAxis:100&#125;,&#123;xAxis:200&#125;].]</span></span><br><span class="line">    <span class="keyword">let</span> startCoordMile = e[<span class="number">0</span>].<span class="property">xAxis</span></span><br><span class="line">    <span class="keyword">let</span> endCoordMie = e[<span class="number">1</span>].<span class="property">xAxis</span></span><br><span class="line">    <span class="keyword">if</span> (e[<span class="number">0</span>].<span class="property">xAxis</span> &lt; startValuex &amp;&amp; e[<span class="number">1</span>].<span class="property">xAxis</span> &gt; startValuex) &#123;</span><br><span class="line">      startCoordMile = startValuex</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (e[<span class="number">0</span>].<span class="property">xAxis</span> &lt; endValuex &amp;&amp; e[<span class="number">1</span>].<span class="property">xAxis</span> &gt; endValuex) &#123;</span><br><span class="line">      endCoordMie = endValuex</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    markLineData.<span class="title function_">push</span>(&#123;</span><br><span class="line">      <span class="attr">xAxis</span>: startCoordMile</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    markLineData.<span class="title function_">push</span>(&#123;</span><br><span class="line">      <span class="attr">xAxis</span>: endCoordMie</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    markLineData.<span class="title function_">push</span>([</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">xAxis</span>: startCoordMile,</span><br><span class="line">        <span class="attr">yAxis</span>: yMax,</span><br><span class="line">        <span class="attr">symbol</span>: <span class="string">&#x27;arrow&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: e[<span class="number">0</span>].<span class="property">name</span>,</span><br><span class="line">        <span class="attr">label</span>: &#123;</span><br><span class="line">          <span class="attr">show</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">position</span>: <span class="string">&#x27;middle&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">xAxis</span>: endCoordMie,</span><br><span class="line">        <span class="attr">yAxis</span>: yMax,</span><br><span class="line">        <span class="attr">symbol</span>: <span class="string">&#x27;arrow&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ])</span><br><span class="line">  &#125;)</span><br><span class="line">  opt.<span class="property">series</span>[opt.<span class="property">series</span>.<span class="property">length</span> - <span class="number">1</span>].<span class="property">markLine</span>.<span class="property">data</span> = markLineData</span><br><span class="line">  charts.<span class="title function_">setOption</span>(opt, &#123;</span><br><span class="line">    <span class="comment">// noMerge默认值为false，不用显示的写出</span></span><br><span class="line">    <span class="attr">silent</span>: <span class="literal">true</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> JavaScript </category>
          
          <category> Echarts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> JavaScript </tag>
            
            <tag> Echarts </tag>
            
            <tag> markLine或markArea在使用滚动条放大之后消失的问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于堆叠属性stack的问题</title>
      <link href="/posts/43700.html"/>
      <url>/posts/43700.html</url>
      
        <content type="html"><![CDATA[<ol><li>多系列的柱状图 stack 如果是数字且越小，该系列的每根柱子越靠前；</li><li>但是如果 stack 为 0，那么该系列的每根柱子都会被放到最后；</li><li>这是一个需要注意的问题！！！！！！！！！</li></ol>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> JavaScript </category>
          
          <category> Echarts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> JavaScript </tag>
            
            <tag> Echarts </tag>
            
            <tag> 关于堆叠属性stack的问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>监听窗口的尺寸变化，动态刷新echarts图</title>
      <link href="/posts/9557.html"/>
      <url>/posts/9557.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onresize</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> chart = echarts.<span class="title function_">init</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;id&#x27;</span>))</span><br><span class="line">  chart.<span class="title function_">resize</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> JavaScript </category>
          
          <category> Echarts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> JavaScript </tag>
            
            <tag> Echarts </tag>
            
            <tag> 监听窗口的尺寸变化，动态刷新echarts图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fileinput插件获取不到手动拖拽的文件对象的问题</title>
      <link href="/posts/39443.html"/>
      <url>/posts/39443.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> frame;</span><br><span class="line">$(<span class="string">&quot;#add_file&quot;</span>).<span class="title function_">fileinput</span>(&#123;</span><br><span class="line">  <span class="attr">language</span>: <span class="string">&#x27;zh&#x27;</span>,                 <span class="comment">//中文</span></span><br><span class="line">  <span class="attr">uploadUrl</span>: <span class="string">&#x27;/&#x27;</span> + url + <span class="string">&#x27;/uploadFile&#x27;</span>,</span><br><span class="line">  <span class="attr">showUpload</span>: <span class="literal">false</span>,               <span class="comment">//是否显示上传按钮</span></span><br><span class="line">  <span class="attr">showCaption</span>: <span class="literal">false</span>,             <span class="comment">//不显示文字表述</span></span><br><span class="line">  <span class="attr">uploadAsync</span>: <span class="literal">true</span>,               <span class="comment">//采用同步上传</span></span><br><span class="line">  <span class="attr">removeFromPreviewOnError</span>: <span class="literal">true</span>,  <span class="comment">//当文件不符合规则，就不显示预览</span></span><br><span class="line">  <span class="attr">dropZoneEnabled</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">dropZoneTitle</span>: <span class="string">&#x27;拖拽文件到这里 …&lt;br&gt;只支持单文件上传&#x27;</span>,</span><br><span class="line">  <span class="attr">maxFileCount</span>: <span class="number">100</span>,</span><br><span class="line">  <span class="attr">maxFileSize</span>: <span class="number">0</span>,          <span class="comment">//单位为kb，如果为0表示不限制文件大小</span></span><br><span class="line">  <span class="attr">uploadExtraData</span>: <span class="keyword">function</span> (<span class="params">previewId, index</span>) &#123;</span><br><span class="line">    <span class="comment">//这是一个回调函数，会在上传时调用，读取配置的额外参数。</span></span><br><span class="line">    <span class="comment">//拷贝代码，参数先不删</span></span><br><span class="line">    <span class="keyword">var</span> obj = &#123;</span><br><span class="line">      <span class="attr">xb2</span>: $(<span class="string">&quot;#xb2&quot;</span>).<span class="title function_">val</span>(),</span><br><span class="line">      <span class="attr">yewuId</span>: $(<span class="string">&quot;#yewuId&quot;</span>).<span class="title function_">val</span>(),</span><br><span class="line">      <span class="attr">algType</span>: $(<span class="string">&quot;#algType&quot;</span>).<span class="title function_">find</span>(<span class="string">&quot;option:selected&quot;</span>).<span class="title function_">text</span>(),</span><br><span class="line">      <span class="attr">fileType</span>: $(<span class="string">&quot;#fileType&quot;</span>).<span class="title function_">find</span>(<span class="string">&quot;option:selected&quot;</span>).<span class="title function_">text</span>(),</span><br><span class="line">      <span class="attr">col1</span>: $(<span class="string">&quot;#col1&quot;</span>).<span class="title function_">val</span>(),</span><br><span class="line">      <span class="attr">col2</span>: $(<span class="string">&quot;#col2&quot;</span>).<span class="title function_">val</span>(),</span><br><span class="line">      <span class="attr">col3</span>: $(<span class="string">&quot;#col3&quot;</span>).<span class="title function_">val</span>(),</span><br><span class="line">      <span class="attr">col4</span>: $(<span class="string">&quot;#col4&quot;</span>).<span class="title function_">val</span>(),</span><br><span class="line">      <span class="attr">magor</span>: $(<span class="string">&quot;#magor&quot;</span>).<span class="title function_">html</span>(),</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).<span class="title function_">on</span>(<span class="string">&quot;filebatchselected&quot;</span>, <span class="keyword">function</span>(<span class="params">event, files</span>) &#123;<span class="comment">// 监听文件选择</span></span><br><span class="line">  <span class="comment">// document.getElementById(&#x27;add_file&#x27;)</span></span><br><span class="line">  <span class="comment">// $(&#x27;#add_file&#x27;).append(files[0])</span></span><br><span class="line">  frame = files[<span class="number">0</span>] <span class="comment">// 此时拖拽文件后，监听事件，frame就等于第一个文件对象</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">frame = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;add_file&#x27;</span>).<span class="property">files</span>[<span class="number">0</span>];<span class="comment">// 这能获得手动选择文件后的第一个文件对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 前台传递</span></span><br><span class="line">formData = <span class="keyword">new</span> <span class="title class_">FormData</span>();        <span class="comment">//每一次需重新创建</span></span><br><span class="line">formData.<span class="title function_">append</span>(<span class="string">&#x27;file&#x27;</span>, blob);</span><br><span class="line">formData.<span class="title function_">append</span>(<span class="string">&#x27;fileName&#x27;</span>, file.<span class="property">name</span>);</span><br><span class="line">formData.<span class="title function_">append</span>(<span class="string">&#x27;part&#x27;</span>, part);</span><br><span class="line">formData.<span class="title function_">append</span>(<span class="string">&#x27;guid&#x27;</span>, uid);</span><br><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">  <span class="comment">//上传文件数据</span></span><br><span class="line">  <span class="attr">url</span>: <span class="title class_">Hussar</span>.<span class="property">ctxPath</span> + <span class="string">&quot;/testTasks/doUploadDatas&quot;</span>,</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">  <span class="attr">cache</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">data</span>: formData,</span><br><span class="line">  <span class="attr">processData</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">contentType</span>: <span class="literal">false</span>，</span><br><span class="line">  <span class="title function_">success</span>(<span class="params"></span>)&#123;&#125;,</span><br><span class="line">  <span class="title function_">error</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 后台接收</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/doUploadDatas&quot;,method = RequestMethod.POST)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span>  Map&lt;String,Object&gt; <span class="title function_">doSaveImportDatas</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> MultipartFile file, String fileName, Integer part,String guid)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">  Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;();</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">uuid</span> <span class="operator">=</span> UUID.randomUUID().toString().replaceAll(<span class="string">&quot;-&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> fpPath+ File.separator+<span class="string">&quot;source&quot;</span>+File.separator+guid+File.separator;</span><br><span class="line"></span><br><span class="line">    <span class="type">File</span> <span class="variable">mkdir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path);</span><br><span class="line">    <span class="keyword">if</span> (!mkdir.exists()) &#123;</span><br><span class="line">      mkdir.mkdirs();</span><br><span class="line">    &#125;</span><br><span class="line">    file.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(path+<span class="string">&quot;\\&quot;</span>+fileName+<span class="string">&quot;-&quot;</span>+part));</span><br><span class="line">    <span class="type">String</span> <span class="variable">fileId</span> <span class="operator">=</span> UUID.randomUUID().toString().replaceAll(<span class="string">&quot;-&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;code&quot;</span>,<span class="number">200</span>);</span><br><span class="line">    map.put(<span class="string">&quot;path&quot;</span>,path);</span><br><span class="line">    map.put(<span class="string">&quot;fileId&quot;</span>,fileId);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    map.put(<span class="string">&quot;error&quot;</span>,e.getMessage());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> JavaScript </category>
          
          <category> bootstrap </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> JavaScript </tag>
            
            <tag> bootstrap </tag>
            
            <tag> fileinput插件获取不到手动拖拽的文件对象的问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue组件公共模板</title>
      <link href="/posts/48436.html"/>
      <url>/posts/48436.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;index&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> vue </category>
          
          <category> base </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> vue </tag>
            
            <tag> base </tag>
            
            <tag> vue组件公共模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue自定义上传功能</title>
      <link href="/posts/13753.html"/>
      <url>/posts/13753.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">importData</span>(<span class="params">params</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> axios.<span class="title function_">post</span>(<span class="string">&#x27;/engineeringCar/importData&#x27;</span>, params, &#123;</span><br><span class="line">    <span class="attr">headers</span>: &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;multipart/form-data&#x27;</span> &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;el-button @click=&quot;importData&quot;&gt;导入&lt;/el-button&gt;</span><br><span class="line">    &lt;input</span><br><span class="line">      v-show=&quot;false&quot;</span><br><span class="line">      name=&quot;file&quot;</span><br><span class="line">      ref=&quot;selectFile&quot;</span><br><span class="line">      type=&quot;file&quot;</span><br><span class="line">      @change=&quot;changeFile&quot;</span><br><span class="line">    /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; importData &#125; from &#x27;./request&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;index&#x27;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    changeFile(e) &#123;</span><br><span class="line">      let file = e.target.files[0]</span><br><span class="line"></span><br><span class="line">      // 判断文件类型</span><br><span class="line">      let fileType = file.name.substring(file.name.lastIndexOf(&#x27;.&#x27;) + 1)</span><br><span class="line">      if (fileType !== &#x27;xlsx&#x27;) &#123;</span><br><span class="line">        layer.warning(this, &#x27;仅支持上传xlsx文件&#x27;)</span><br><span class="line">        this.$refs.selectFile.value = &#x27;&#x27; // 清空已选择的文件</span><br><span class="line">        return</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      // 拼接form数据</span><br><span class="line">      let param = new FormData() //创建form对象</span><br><span class="line">      param.append(&#x27;file&#x27;, file) //通过append向form对象添加数据</span><br><span class="line"></span><br><span class="line">      importData(param).then((res) =&gt; &#123;</span><br><span class="line">        if (res.code === 200) &#123;</span><br><span class="line">          layer.success(this, &#x27;导入成功&#x27;)</span><br><span class="line">          this.list()</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          layer.failure(this, res.message)</span><br><span class="line">        &#125;</span><br><span class="line">        this.$refs.selectFile.value = &#x27;&#x27;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    importData() &#123;</span><br><span class="line">      this.$refs.selectFile.dispatchEvent(new MouseEvent(&#x27;click&#x27;))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/importData&quot;)</span></span><br><span class="line"><span class="keyword">public</span> DtoResult <span class="title function_">importData</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> MultipartFile file)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> engineeringCarService.importData(file);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> vue </category>
          
          <category> base </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> vue </tag>
            
            <tag> base </tag>
            
            <tag> vue自定义上传功能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue自定义下载功能</title>
      <link href="/posts/15793.html"/>
      <url>/posts/15793.html</url>
      
        <content type="html"><![CDATA[<h4 id="返回整体文件流，通过浏览器转成二进制触发下载"><a href="#返回整体文件流，通过浏览器转成二进制触发下载" class="headerlink" title="返回整体文件流，通过浏览器转成二进制触发下载"></a>返回整体文件流，通过浏览器转成二进制触发下载</h4><p>该方式和传统的方式不同。</p><p>传统是读取服务器返回的流，这里是服务器流都已经整体返回了，然后才通过 js 转成文件触发下载</p><p>该方式只适合下载小文件（一般是小于 10M），如果文件过大，会导致浏览器占用内存过大，页面崩溃</p><p>以下载 excel 为例子</p><p>前台代码</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 下载数据导入模板</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">downloadImportTemplate</span>(<span class="params">url, fileName</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    url,</span><br><span class="line">    <span class="attr">responseType</span>: <span class="string">&#x27;blob&#x27;</span></span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> url = <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">createObjectURL</span>(<span class="keyword">new</span> <span class="title class_">Blob</span>([res]))</span><br><span class="line">    <span class="keyword">const</span> link = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    link.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span></span><br><span class="line">    link.<span class="property">href</span> = url</span><br><span class="line">    link.<span class="title function_">setAttribute</span>(<span class="string">&#x27;download&#x27;</span>, fileName + <span class="string">&#x27;.xlsx&#x27;</span>)</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(link)</span><br><span class="line">    link.<span class="title function_">click</span>()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其他地方只需引入该方法，调用传入参数即可</span></span><br><span class="line"><span class="title function_">downloadImportTemplate</span>(<span class="string">&#x27;/downloadTemplate&#x27;</span>, <span class="string">&#x27;工程车辆导入模板&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/downloadTemplate&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">downLoadEngineeringVehiclesImportTemplateFile</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    downLoadTemplate(<span class="string">&quot;工程车导入模板&quot;</span>, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">downLoadTemplate</span><span class="params">(String name, HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;template/&quot;</span> + name + <span class="string">&quot;.xlsx&quot;</span>;</span><br><span class="line">    <span class="comment">// 创建缓冲区</span></span><br><span class="line">    <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];<span class="comment">// 缓冲区大小1k</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 重点就是获取输入流和输出流，还有设置请求头</span></span><br><span class="line">    <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getClassLoader().getResourceAsStream(path);</span><br><span class="line">         <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> response.getOutputStream()) &#123;</span><br><span class="line">        <span class="comment">// 设置头部信息</span></span><br><span class="line">        response.setHeader(</span><br><span class="line">            <span class="string">&quot;Content-disposition&quot;</span>,</span><br><span class="line">            <span class="string">&quot;attachment;filename=&quot;</span></span><br><span class="line">            + <span class="keyword">new</span> <span class="title class_">String</span>((name + <span class="string">&quot;.xlsx&quot;</span>).getBytes(StandardCharsets.UTF_8), StandardCharsets.ISO_8859_1));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//循环将输入流中的内容读取到缓冲区当中</span></span><br><span class="line">        <span class="keyword">while</span> ((len = in.read(buffer)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//输出缓冲区的内容到浏览器，实现文件下载</span></span><br><span class="line">            out.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> vue </category>
          
          <category> base </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> vue </tag>
            
            <tag> base </tag>
            
            <tag> vue自定义下载功能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二进制文件流转文件并触发下载</title>
      <link href="/posts/60522.html"/>
      <url>/posts/60522.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * word/doc</span></span><br><span class="line"><span class="comment"> * data就是后台返回的二进制流</span></span><br><span class="line"><span class="comment"> * fileName就是你想要把这个流转为二进制的名称</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">downloadDoc</span>(<span class="params">data, fileName</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> blob = <span class="keyword">new</span> <span class="title class_">Blob</span>([data], &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;application/vnd.openxmlformats-officedocument.wordprocessingml.document&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">let</span> link = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">  link.<span class="property">href</span> = <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">createObjectURL</span>(blob)</span><br><span class="line">  link.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span></span><br><span class="line">  link.<span class="title function_">setAttribute</span>(<span class="string">&#x27;download&#x27;</span>, fileName + <span class="string">&#x27;.doc&#x27;</span>)</span><br><span class="line">  link.<span class="title function_">click</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * excel/xlsx</span></span><br><span class="line"><span class="comment"> * data就是后台返回的二进制流</span></span><br><span class="line"><span class="comment"> * fileName就是你想要把这个流转为二进制的名称</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">downloadXlsx</span>(<span class="params">data, fileName</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> url = <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">createObjectURL</span>(<span class="keyword">new</span> <span class="title class_">Blob</span>([data]))</span><br><span class="line">  <span class="keyword">const</span> link = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">  link.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span></span><br><span class="line">  link.<span class="property">href</span> = url</span><br><span class="line">  link.<span class="title function_">setAttribute</span>(<span class="string">&#x27;download&#x27;</span>, fileName + <span class="string">&#x27;.xlsx&#x27;</span>)</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(link)</span><br><span class="line">  link.<span class="title function_">click</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> vue </category>
          
          <category> base </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> vue </tag>
            
            <tag> base </tag>
            
            <tag> 二进制文件流转文件并触发下载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>局部导入css</title>
      <link href="/posts/48248.html"/>
      <url>/posts/48248.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;index&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">@import &#x27;~@/assets/css/single_block.css&#x27;;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> vue </category>
          
          <category> base </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> vue </tag>
            
            <tag> base </tag>
            
            <tag> 局部导入css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>上传组件设置token</title>
      <link href="/posts/14250.html"/>
      <url>/posts/14250.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el-upload</span><br><span class="line">  class=&quot;uploadBtn&quot;</span><br><span class="line">  accept=&quot;xlsx&quot;</span><br><span class="line">  action=&quot;http://127.0.0.1:82/lineDic/sstjq/importData&quot;</span><br><span class="line">  :on-success=&quot;importData&quot;</span><br><span class="line">  :show-file-list=&quot;false&quot;</span><br><span class="line">  :limit=&quot;1&quot;</span><br><span class="line">  :headers=&quot;headers&quot;</span><br><span class="line">  :file-list=&quot;fileList&quot;</span><br><span class="line">&gt;</span><br><span class="line">    &lt;el-button size=&quot;small&quot; type=&quot;primary&quot;&gt;导入&lt;/el-button&gt;</span><br><span class="line">&lt;/el-upload&gt;</span><br><span class="line"></span><br><span class="line">data()&#123; return&#123; headers: &#123; Authorization: null &#125;, &#125; &#125; methods: &#123; setToken() &#123;</span><br><span class="line">let tokenName = window.tokenName || window.top.tokenName let token =</span><br><span class="line">localStorage.getItem(tokenName) this.headers.Authorization = token &#125;, &#125;</span><br><span class="line">mounted() &#123; this.setToken(); &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> vue </category>
          
          <category> element-ui </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> vue </tag>
            
            <tag> element-ui </tag>
            
            <tag> 上传组件设置token </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>@Async和@EnableAsync注解</title>
      <link href="/posts/28711.html"/>
      <url>/posts/28711.html</url>
      
        <content type="html"><![CDATA[<h2 id="1）-含义："><a href="#1）-含义：" class="headerlink" title="1） 含义："></a>1） 含义：</h2><p>1，在方法上使用该@Async 注解，申明该方法是一个异步任务；</p><p>2，在类上面使用该@Async 注解，申明该类中的所有方法都是异步任务；</p><p>3，使用此注解的方法的类对象，必须是 spring 管理下的 bean 对象；</p><p>4，要想使用异步任务，需要在主类上开启异步配置，即，配置上@EnableAsync 注解；</p><h2 id="2）-使用："><a href="#2）-使用：" class="headerlink" title="2）  使用："></a>2）  使用：</h2><p>在 Spring 中启用@Async：</p><p>1，@Async 注解在使用时，如果不指定线程池的名称，则使用 Spring 默认的线程池，Spring 默认的线程池为<strong>SimpleAsyncTaskExecutor</strong>。</p><p>2，方法上一旦标记了这个@Async 注解，当其它线程调用这个方法时，就会开启一个新的子线程去异步处理该业务逻辑。</p><h2 id="3）-代码示例–默认线程池："><a href="#3）-代码示例–默认线程池：" class="headerlink" title="3）  代码示例–默认线程池："></a>3）  代码示例–默认线程池：</h2><h3 id="3-1，启动类中增加-EnableAsync"><a href="#3-1，启动类中增加-EnableAsync" class="headerlink" title="3.1，启动类中增加@EnableAsync"></a>3.1，启动类中增加@EnableAsync</h3><p>以 Spring boot 为例，启动类中增加@EnableAsync：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableAsync</span><span class="meta">@SpringBootApplicationpublic</span> <span class="keyword">class</span> <span class="title class_">ManageApplication</span> &#123;    <span class="comment">//...&#125;</span></span><br></pre></td></tr></table></figure><h3 id="3-2，方法上加-Async-注解："><a href="#3-2，方法上加-Async-注解：" class="headerlink" title="3.2，方法上加@Async 注解："></a>3.2，方法上加@Async 注解：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Componentpublic</span> <span class="keyword">class</span> <span class="title class_">MyAsyncTask</span> &#123;     <span class="meta">@Async</span>    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">asyncCpsItemImportTask</span><span class="params">(Long platformId, String jsonList)</span>&#123;        <span class="comment">//...具体业务逻辑    &#125;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="3-3，默认线程池的缺陷："><a href="#3-3，默认线程池的缺陷：" class="headerlink" title="3.3，默认线程池的缺陷："></a>3.3，默认线程池的缺陷：</h3><p>上面的配置会启用默认的线程池&#x2F;执行器，异步执行指定的方法。</p><p>Spring 默认的线程池的默认配置：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">默认核心线程数：8，        最大线程数：Integet.MAX<span class="emphasis">_VALUE，    队列使用LinkedBlockingQueue，    容量是：Integet.MAX_</span>VALUE，    空闲线程保留时间：60s，    线程池拒绝策略：AbortPolicy。</span><br></pre></td></tr></table></figure><p>从最大线程数的配置上，相信你也看到问题了：<strong>并发情况下，会无限创建线程。。。</strong></p><h3 id="3-4，默认线程池–自定义配置参数："><a href="#3-4，默认线程池–自定义配置参数：" class="headerlink" title="3.4，默认线程池–自定义配置参数："></a>3.4，默认线程池–自定义配置参数：</h3><p>默认线程池的上述缺陷如何解决：</p><p>答案是，自定义配置参数就可以了。</p><figure class="highlight delphi"><table><tr><td class="code"><pre><span class="line">spring:  task:    execution:      pool:        max-size: <span class="number">6</span>        core-size: <span class="number">3</span>        keep-alive: <span class="number">3</span>s        queue-capacity: <span class="number">1000</span>        thread-<span class="keyword">name</span>-prefix: <span class="keyword">name</span></span><br></pre></td></tr></table></figure><h2 id="4）-代码示例–自定义线程池："><a href="#4）-代码示例–自定义线程池：" class="headerlink" title="4） 代码示例–自定义线程池："></a>4） 代码示例–<a href="https://so.csdn.net/so/search?q=%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BA%BF%E7%A8%8B%E6%B1%A0&spm=1001.2101.3001.7020">自定义线程池</a>：</h2><p>在业务场景中，有时需要使用自己定义的执行器来跑异步的业务逻辑，那该怎么办呢？</p><p>答案是，自定义线程池。</p><h3 id="4-1，还是启动类中先增加-EnableAsync"><a href="#4-1，还是启动类中先增加-EnableAsync" class="headerlink" title="4.1，还是启动类中先增加@EnableAsync"></a>4.1，还是启动类中先增加@EnableAsync</h3><p>以 Spring boot 为例，启动类中增加@EnableAsync：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableAsync</span><span class="meta">@SpringBootApplicationpublic</span> <span class="keyword">class</span> <span class="title class_">ManageApplication</span> &#123;    <span class="comment">//...&#125;</span></span><br></pre></td></tr></table></figure><h3 id="4-2，编写配置类"><a href="#4-2，编写配置类" class="headerlink" title="4.2，编写配置类"></a>4.2，编写配置类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span><span class="meta">@Datapublic</span> <span class="keyword">class</span> <span class="title class_">ExecutorConfig</span>&#123;    <span class="comment">/**     * 核心线程     */</span>    <span class="keyword">private</span> <span class="type">int</span> corePoolSize;    <span class="comment">/**     * 最大线程     */</span>    <span class="keyword">private</span> <span class="type">int</span> maxPoolSize;    <span class="comment">/**     * 队列容量     */</span>    <span class="keyword">private</span> <span class="type">int</span> queueCapacity;    <span class="comment">/**     * 保持时间     */</span>    <span class="keyword">private</span> <span class="type">int</span> keepAliveSeconds;    <span class="comment">/**     * 名称前缀     */</span>    <span class="keyword">private</span> String preFix;     <span class="meta">@Bean(&quot;MyExecutor&quot;)</span>    <span class="keyword">public</span> Executor <span class="title function_">myExecutor</span><span class="params">()</span> &#123;        <span class="type">ThreadPoolTaskExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolTaskExecutor</span>();        executor.setCorePoolSize(corePoolSize);        executor.setMaxPoolSize(maxPoolSize);        executor.setQueueCapacity(queueCapacity);        executor.setKeepAliveSeconds(keepAliveSeconds);        executor.setThreadNamePrefix(preFix);        executor.setRejectedExecutionHandler( <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.AbortPolicy());        executor.initialize();        <span class="keyword">return</span> executor;    &#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3，方法上加-Async-注解："><a href="#4-3，方法上加-Async-注解：" class="headerlink" title="4.3，方法上加@Async 注解："></a>4.3，方法上加@Async 注解：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Componentpublic</span> <span class="keyword">class</span> <span class="title class_">MyAsyncTask</span> &#123;     <span class="meta">@Async(&quot;MyExecutor&quot;)</span> <span class="comment">//使用自定义的线程池(执行器)    public void asyncCpsItemImportTask(Long platformId, String jsonList)&#123;        //...具体业务逻辑    &#125;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="5）异步任务的事务问题："><a href="#5）异步任务的事务问题：" class="headerlink" title="5）异步任务的事务问题："></a>5）异步任务的事务问题：</h2><p>@Async 注解由于是异步执行的，在其进行数据库的操作之时，将无法控制事务管理。</p><p>解决办法：可以把@<a href="https://so.csdn.net/so/search?q=Transactional&spm=1001.2101.3001.7020">Transactional</a>注解放到内部的需要进行事务的方法上。</p><h2 id="6）异步任务的返回结果："><a href="#6）异步任务的返回结果：" class="headerlink" title="6）异步任务的返回结果："></a>6）异步任务的返回结果：</h2><p>异步的业务逻辑处理场景 有两种：一个是不需要返回结果，另一种是需要接收返回结果。</p><p>不需要返回结果的比较简单，就不多说了。</p><p>需要接收返回结果的示例如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Async(&quot;MyExecutor&quot;)</span><span class="keyword">public</span> Future&lt;Map&lt;Long, List&gt;&gt; <span class="title function_">queryMap</span><span class="params">(List ids)</span> &#123;    List&lt;&gt; result = businessService.queryMap(ids);    ..............    Map&lt;Long, List&gt; resultMap = Maps.newHashMap();    ...    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AsyncResult</span>&lt;&gt;(resultMap);&#125;</span><br></pre></td></tr></table></figure><p>调用异步方法的示例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Map&lt;Long, List&gt; <span class="title function_">asyncProcess</span><span class="params">(List&lt;BindDeviceDO&gt; bindDevices,List&lt;BindStaffDO&gt; bindStaffs, String dccId)</span> &#123;        Map&lt;Long, List&gt; finalMap =<span class="literal">null</span>;        <span class="comment">// 返回值：        Future&lt;Map&lt;Long, List&gt;&gt; asyncResult = MyService.queryMap(ids);        try &#123;            finalMap = asyncResult.get();        &#125; catch (Exception e) &#123;            ...        &#125;        return finalMap;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="7）关于-Spring-中的线程池-执行器"><a href="#7）关于-Spring-中的线程池-执行器" class="headerlink" title="7）关于 Spring 中的线程池(执行器)"></a>7）关于 Spring 中的线程池(执行器)</h2><p>Spring 用 TaskExecutor 和 TaskScheduler 接口提供了异步执行和调度任务的抽象。</p><p>Spring 的 TaskExecutor 和 java.util.concurrent.Executor 接口时一样的，这个接口只有一个方法 execute(Runnable task)。</p><p>Spring 已经内置了许多 TaskExecutor 的实现，没有必要自己去实现：</p><ul><li><strong>SimpleAsyncTaskExecutor</strong>：  这种实现不会重用任何线程，<strong>每次调用都会创建一个新的线程</strong>。</li><li><strong>SyncTaskExecutor</strong>：  这种实现不会异步的执行，相反，每次调用都在发起调用的线程中执行。它的主要用处是在不需要多线程的时候，比如简单的测试用例；</li><li><strong>ConcurrentTaskExecutor</strong>：这个实现是对 Java 5 java.util.concurrent.Executor 类的包装。有另一个 ThreadPoolTaskExecutor 类更为好用，它暴露了 Executor 的配置参数作为 bean 属性。</li><li><strong>SimpleThreadPoolTaskExecutor</strong>：  这个实现实际上是 Quartz 的 SimpleThreadPool 类的子类，它会监听 Spring 的生命周期回调。当你有线程池，需要在 Quartz 和非 Quartz 组件中共用时，这是它的典型用处。</li><li><strong>ThreadPoolTaskExecutor：   这是最常用、最通用的一种实现</strong>。它包含了 java.util.concurrent.ThreadPoolExecutor 的属性，并且用 TaskExecutor 进行包装。</li></ul><h2 id="8）无法调用同类中的-Async-的方法"><a href="#8）无法调用同类中的-Async-的方法" class="headerlink" title="8）无法调用同类中的@Async 的方法"></a>8）<strong>无法调用同类中的@Async 的方法</strong></h2><h3 id="Async-的原理概括："><a href="#Async-的原理概括：" class="headerlink" title="@Async 的原理概括："></a>@Async 的原理概括：</h3><p>@Async  的原理是通过 Spring AOP 动态代理   的方式来实现的。</p><p>Spring 容器启动初始化 bean 时，判断类中是否使用了@<a href="https://so.csdn.net/so/search?q=Async&spm=1001.2101.3001.7020" title="Async">Async</a>注解，如果使用了则为其创建切入点和切入点处理器，根据切入点创建代理，</p><p>在线程调用@Async 注解标注的方法时，会调用代理，执行切入点处理器 invoke 方法，将方法的执行提交给线程池中的另外一个线程来处理，从而实现了异步执行。</p><p>所以，需要注意的一个错误用法是，如果 a 方法调用它同类中的标注@Async 的 b 方法，是不会异步执行的，因为从 a 方法进入调用的都是该类对象本身，不会进入代理类。</p><p><strong>因此，相同类中的方法调用带@Async 的方法是无法异步的，这种情况仍然是同步。</strong></p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> SpringBoot </category>
          
          <category> 异步 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> 异步 </tag>
            
            <tag> @Async和@EnableAsync注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>异步demo</title>
      <link href="/posts/49484.html"/>
      <url>/posts/49484.html</url>
      
        <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>在日常开发中，有很多时候都会使用异步的方式去请求方法，以提高代码的执行效率。比如用户购买某件商品，然后需要插入购买记录，物品-1，微信公众号消息推送之类，流程会很多，也会需要很多时间，而 SpringBoot 为异步提供了更加简单的使用方式，通过两个注解即可实现异步调用方法。</p><h2 id="1、使用方式"><a href="#1、使用方式" class="headerlink" title="1、使用方式"></a>1、使用方式</h2><p>SpringBoot 为我们提供了很多使用便利，我们只需要一个@Enablexxx 注解 + 功能注解，便能轻松简单的实现功能，比如异步调用和定时任务。</p><h4 id="1-1-简单使用异步调用（无返回调用）"><a href="#1-1-简单使用异步调用（无返回调用）" class="headerlink" title="1.1 简单使用异步调用（无返回调用）"></a>1.1 简单使用异步调用（无返回调用）</h4><p>假定使用场景：用户购买完一件商品，需要短信通知 + 微信消息推送（不考虑失败场景），不需要返回值。</p><blockquote><p>注意：下面代码是为了展现一个之前一直困惑我的问题，所以代码有些问题，解决办法看下面：</p></blockquote><p><strong>Service 层，模拟功能实现：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AsyncMsgService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(AsyncMsgService.class);</span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendSms</span><span class="params">()</span>&#123;</span><br><span class="line">        ThreadUtil.sleep(<span class="number">3000L</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;发送短信~~~~~~~~~~~~~~~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pushWechatMsg</span><span class="params">()</span> &#123;</span><br><span class="line">        ThreadUtil.sleep(<span class="number">3000L</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;推送微信消息~~~~~~~~~~~~~~~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMsg</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        sendSms();</span><br><span class="line">        pushWechatMsg();</span><br><span class="line">        <span class="comment">// 耗时时间</span></span><br><span class="line">        <span class="type">float</span> <span class="variable">totalTime</span> <span class="operator">=</span> (<span class="type">float</span>)(System.currentTimeMillis() - start) / <span class="number">1000</span>;</span><br><span class="line">        logger.info(<span class="string">&quot;total time: &quot;</span> + totalTime + <span class="string">&quot; seconds&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>然后写一个调用的 Controller：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/v1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApiController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AsyncMsgService msgService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/sendMsg&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMsg</span><span class="params">()</span> &#123;</span><br><span class="line">        msgService.sendMsg();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>执行结果：</strong></p><blockquote><p>发送短信~~~~~~~~~~~~~~~<br>推送微信消息~~~~~~~~~~~~~~~<br>total time: 6.001 seconds</p></blockquote><p>可以看出我们所期待的异步执行并没有发生，两个任务仍然在同步执行。我相信肯定不只是我碰到这个问题，我也是看了上面推荐的那篇博客才发现自己的问题所在：</p><blockquote><p>在使用 spring 的异步<a href="https://so.csdn.net/so/search?q=%E5%A4%9A%E7%BA%BF%E7%A8%8B&spm=1001.2101.3001.7020">多线程</a>时经常回碰到多线程失效的问题，解决方式为：<br>异步方法和调用方法一定要写在不同的类中 ,如果写在一个类中,是没有效果的！</p></blockquote><p>原因：</p><blockquote><p>Spring 对@Transactional 注解时也有类似问题，Spring 对扫描时具有@Transactional 注解方法的类时，是生成一个代理类，由代理类去开启关闭事务，而在同一个类中，方法调用是在类体内执行的，Spring 对无法截获这个方法调用。</p></blockquote><p>因此上面代码的解决方式就是将两个异步方法和调用的<code>sendMsg()</code>方法分开，便能实现异步调用。</p><h4 id="1-2-有返回值的异步调用"><a href="#1-2-有返回值的异步调用" class="headerlink" title="1.2 有返回值的异步调用"></a>1.2 有返回值的异步调用</h4><p>很多时候我们使用异步调用是需要方法的返回值，而不是进行简单的调用，如果我们还是按照上面的方式来调用，我们大概率会得到一个 null 的返回值，因为主线程并未等待异步任务的完成就 return 了结果。</p><h5 id="1-2-1-配置线程池"><a href="#1-2-1-配置线程池" class="headerlink" title="1.2.1 配置线程池"></a>1.2.1 配置线程池</h5><blockquote><p>这一步不是必须的，一个@EnableAsync 便能让 SpringBoot 为我们自动配置，我们也可以通过自定义的方式来让它和我们的实际使用更加契合。</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAsync</span>  <span class="comment">// 启用异步任务</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AsyncConfiguration</span> &#123;</span><br><span class="line">    <span class="comment">// 声明一个线程池(并指定线程池的名字)</span></span><br><span class="line">    <span class="meta">@Bean(&quot;taskExecutor&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Executor <span class="title function_">asyncExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ThreadPoolTaskExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolTaskExecutor</span>();</span><br><span class="line">        <span class="comment">//核心线程数5：线程池创建时候初始化的线程数</span></span><br><span class="line">        executor.setCorePoolSize(<span class="number">5</span>);</span><br><span class="line">        <span class="comment">//最大线程数5：线程池最大的线程数，只有在缓冲队列满了之后才会申请超过核心线程数的线程</span></span><br><span class="line">        executor.setMaxPoolSize(<span class="number">5</span>);</span><br><span class="line">        <span class="comment">//缓冲队列500：用来缓冲执行任务的队列</span></span><br><span class="line">        executor.setQueueCapacity(<span class="number">500</span>);</span><br><span class="line">        <span class="comment">//允许线程的空闲时间60秒：当超过了核心线程出之外的线程在空闲时间到达之后会被销毁</span></span><br><span class="line">        executor.setKeepAliveSeconds(<span class="number">60</span>);</span><br><span class="line">        <span class="comment">//线程池名的前缀：设置好了之后可以方便我们定位处理任务所在的线程池</span></span><br><span class="line">        executor.setThreadNamePrefix(<span class="string">&quot;DailyAsync-&quot;</span>);</span><br><span class="line">        executor.initialize();</span><br><span class="line">        <span class="keyword">return</span> executor;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Service 层，模拟功能实现：</strong></p><blockquote><p>有返回的异步方法，其返回值最好封装为 CompletableFuture 类型，使用 Java8 提供的 Future 的扩展功能</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AsyncService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AsyncMsgService msgService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(AsyncService.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异步执行查询用户的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Async(&quot;taskExecutor&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CompletableFuture&lt;String&gt; <span class="title function_">findUser</span><span class="params">()</span>&#123;</span><br><span class="line">        ThreadUtil.sleep(<span class="number">3000L</span>);</span><br><span class="line">        <span class="keyword">return</span> CompletableFuture.completedFuture(<span class="string">&quot;执行异步任务···&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>写一个测试方法：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.DEFINED_PORT)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AsyncTest</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(AsyncTest.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AsyncService asyncService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">asyncUser</span><span class="params">()</span> <span class="keyword">throws</span> ExecutionException, InterruptedException, TimeoutException &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 异步任务</span></span><br><span class="line">        System.out.println(<span class="string">&quot;异步任务开启~~~~~~~~~~~~~~~~~~&quot;</span>);</span><br><span class="line">        CompletableFuture&lt;String&gt; user1 = asyncService.findUser();</span><br><span class="line">        CompletableFuture&lt;String&gt; user2 = asyncService.findUser();</span><br><span class="line">        CompletableFuture&lt;String&gt; user3 = asyncService.findUser();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//join() 的作用：让“主线程”等待“子线程”结束之后才能继续运行</span></span><br><span class="line">        CompletableFuture.allOf(user1,user2,user3).join();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 耗时时间</span></span><br><span class="line">        <span class="type">float</span> <span class="variable">totalTime</span> <span class="operator">=</span> (<span class="type">float</span>)(System.currentTimeMillis() - start) / <span class="number">1000</span>;</span><br><span class="line">        logger.info(<span class="string">&quot;total time: &quot;</span> + totalTime + <span class="string">&quot; seconds&quot;</span>);</span><br><span class="line">        logger.info(<span class="string">&quot;--&gt; &quot;</span> + user1.get());</span><br><span class="line">        logger.info(<span class="string">&quot;--&gt; &quot;</span> + user2.get());</span><br><span class="line">        logger.info(<span class="string">&quot;--&gt; &quot;</span> + user3.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>返回结果：</strong></p><blockquote><p>异步任务开启~~~~~~<br>total time: 3.016 seconds<br>–&gt; 执行异步任务···<br>–&gt; 执行异步任务···<br>–&gt; 执行异步任务···</p></blockquote><p>从消耗时间可以看出异步方法生效，但是需要注意，调用方法和异步方法不能处于同一类中，否则会造成异步任务失效。</p><h2 id="2、CompletableFuture-实现异步方法"><a href="#2、CompletableFuture-实现异步方法" class="headerlink" title="2、CompletableFuture 实现异步方法"></a>2、CompletableFuture 实现异步方法</h2><p>如果你不想或者不愿局限于 SpringBoot 的注解式调用异步，你可以使用 CompletableFuture 快速、简单的实现异步调用方法。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 无返回值的异步方法CompletableFuture.runAsync()</span></span><br><span class="line"><span class="keyword">public</span> CompletableFuture&lt;Void&gt; <span class="title function_">testMethod</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class="line">ThreadUtil.sleep(<span class="number">3000L</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;异步无返回&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有返回值的异步方法CompletableFuture.supplyAsync()</span></span><br><span class="line"><span class="keyword">public</span> CompletableFuture&lt;String&gt; <span class="title function_">testMethod2</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">ThreadUtil.sleep(<span class="number">3000L</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;异步有返回&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试方法：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">asyncTest</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">asyncMsgService.testMethod().get(<span class="number">4000L</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException | ExecutionException | TimeoutException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 耗时时间</span></span><br><span class="line"><span class="type">float</span> <span class="variable">totalTime</span> <span class="operator">=</span> (<span class="type">float</span>)(System.currentTimeMillis() - start) / <span class="number">1000</span>;</span><br><span class="line">logger.info(<span class="string">&quot;total time: &quot;</span> + totalTime + <span class="string">&quot; seconds&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">asyncTest2</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">CompletableFuture&lt;String&gt; future = asyncMsgService.testMethod2();</span><br><span class="line"><span class="comment">// 计算结果完成时的回调方法</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">future.whenComplete((k, v) -&gt; &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;返回k=&quot;</span> + k);</span><br><span class="line">System.out.println(<span class="string">&quot;异常v=&quot;</span> + v);</span><br><span class="line">&#125;).exceptionally(e -&gt; &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;捕获异常=&quot;</span> + e.getMessage());</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;okk&quot;</span>;</span><br><span class="line">&#125;).get(<span class="number">4000</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException | ExecutionException | TimeoutException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 耗时时间</span></span><br><span class="line"><span class="type">float</span> <span class="variable">totalTime</span> <span class="operator">=</span> (<span class="type">float</span>)(System.currentTimeMillis() - start) / <span class="number">1000</span>;</span><br><span class="line">logger.info(<span class="string">&quot;total time: &quot;</span> + totalTime + <span class="string">&quot; seconds&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用以上方法，也能实现对方法的异步调用。</p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> SpringBoot </category>
          
          <category> 异步 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> 异步 </tag>
            
            <tag> 异步demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>创建shell脚本并且运行</title>
      <link href="/posts/22256.html"/>
      <url>/posts/22256.html</url>
      
        <content type="html"><![CDATA[<p>创建 shell 脚本并且运行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim hello.sh</span><br></pre></td></tr></table></figure><p>提权</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod u+x hello.sh</span><br></pre></td></tr></table></figure><p>执行</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bash hello.sh</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Ops </category>
          
          <category> linux </category>
          
          <category> general </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ops </tag>
            
            <tag> general </tag>
            
            <tag> linux </tag>
            
            <tag> 创建shell脚本并且运行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>后台运行命令</title>
      <link href="/posts/60780.html"/>
      <url>/posts/60780.html</url>
      
        <content type="html"><![CDATA[<p>如果使用 nohup 命令提交作业，那么在缺省情况下该作业的所有输出都被重定向到一个名为 nohup.out 的文件中，除非另外指定 了输出文件：</p><p>输出被重定向到 myout.file 文件中。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nohup command &gt; myout.file 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><p>不输出日志文件。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nohup command &gt;/dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Ops </category>
          
          <category> linux </category>
          
          <category> general </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ops </tag>
            
            <tag> general </tag>
            
            <tag> linux </tag>
            
            <tag> 后台运行命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查看cpu核心数</title>
      <link href="/posts/1698.html"/>
      <url>/posts/1698.html</url>
      
        <content type="html"><![CDATA[<p>查看物理 cpu 数目</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /proc/cpuinfo | grep &quot;physical id&quot; | sort | uniq | wc -l</span><br></pre></td></tr></table></figure><p>查看每个物理 cpu 里的核数</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /proc/cpuinfo| grep &quot;cpu cores&quot;| uniq</span><br></pre></td></tr></table></figure><p>查看 cpu 逻辑核心数（cpu 数量*每个 cpu 的核数）</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /proc/cpuinfo| grep &quot;processor&quot;| wc -l</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/qq_38880380/article/details/79638252">原文链接</a></p>]]></content>
      
      
      <categories>
          
          <category> Ops </category>
          
          <category> linux </category>
          
          <category> general </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ops </tag>
            
            <tag> general </tag>
            
            <tag> linux </tag>
            
            <tag> 查看cpu核心数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查看后台运行的java -jar项目的端口号，并杀死该进程</title>
      <link href="/posts/58898.html"/>
      <url>/posts/58898.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lsof -i:8088Kill -9 pid</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Ops </category>
          
          <category> linux </category>
          
          <category> general </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ops </tag>
            
            <tag> general </tag>
            
            <tag> linux </tag>
            
            <tag> 查看后台运行的java -jar项目的端口号，并杀死该进程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查看日志最后几行</title>
      <link href="/posts/9243.html"/>
      <url>/posts/9243.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tail -n 50 wx.log</span><br></pre></td></tr></table></figure><p>示例：查看&#x2F;var&#x2F;log&#x2F;boot.log，只显示最后一行。则执行</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tail -n 1  /var/log/boot.log</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tail -n 1000 #显示最后1000行</span><br><span class="line">tail -n +1000 #从1000行开始显示，显示1000行以后的</span><br><span class="line">head -n 1000 #显示前面1000行</span><br></pre></td></tr></table></figure><p>实时监听文件末尾多行的变化，打印到控制台。ctrl+c 退出</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tail -f file #默认显示10行</span><br><span class="line">tail -500f file #调整为500行</span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/keta/p/9627227.html">原文链接</a></p>]]></content>
      
      
      <categories>
          
          <category> Ops </category>
          
          <category> linux </category>
          
          <category> general </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ops </tag>
            
            <tag> general </tag>
            
            <tag> linux </tag>
            
            <tag> 查看日志最后几行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查看命令所在源文件的位置</title>
      <link href="/posts/50313.html"/>
      <url>/posts/50313.html</url>
      
        <content type="html"><![CDATA[<p>直接使用下面这条命令跟随符号链接来以获取实际的可执行文件</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">readlink -f `which java`</span><br></pre></td></tr></table></figure><p><code>readlink</code> 命令会跟随一个符号链接。我在 <code>which java</code> 的外侧使用 <code>readlink</code> 将会使用 <code>which java</code> 的输出来替换要检查的符号链接，这被称之为命令替换。因此，在这个实例中，上面的命令大体上相当于 <code>readlink -f /usr/bin/java</code> 。</p><p>在我的示例中，可执行文件的位置是 <code>/usr/lib/jvm/java-11-openjdk-amd64/bin/java</code> 。</p>]]></content>
      
      
      <categories>
          
          <category> Ops </category>
          
          <category> linux </category>
          
          <category> general </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ops </tag>
            
            <tag> general </tag>
            
            <tag> linux </tag>
            
            <tag> 查看命令所在源文件的位置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用windowd的cmd向linux服务器上传文件</title>
      <link href="/posts/31381.html"/>
      <url>/posts/31381.html</url>
      
        <content type="html"><![CDATA[<p>示例代码</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp -P 221 D:\hussar-web-2.2.0.war root@123.123.122.138:/opt/tomcat8/webapps/</span><br></pre></td></tr></table></figure><p>城轨项目的使用的上传 war 包用：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp -P 221 D:\Work\workProject\dtjc\target\hussar-web-2.2.0.war root@123.123.122.138:/opt/tomcat8/webapps/</span><br></pre></td></tr></table></figure><p>说明：<br>其中 221 是端口，123.123.122.138 是 ip，root 是登陆用户，D:\hussar-web-2.2.0.war 是文件路径,&#x2F;opt&#x2F;tomcat8&#x2F;webapps&#x2F;是服务器存储上传文件的路径</p><p><em><strong>网上拷贝</strong></em></p><hr><p>1、上传本地文件到服务器</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp -P 221 /path/filename username@servername:/path/</span><br></pre></td></tr></table></figure><p>例如 scp &#x2F;var&#x2F;www&#x2F;test.php <a href="mailto:&#114;&#111;&#x6f;&#x74;&#64;&#x31;&#x39;&#50;&#x2e;&#x31;&#x36;&#x38;&#46;&#x30;&#46;&#x31;&#48;&#49;">&#114;&#111;&#x6f;&#x74;&#64;&#x31;&#x39;&#50;&#x2e;&#x31;&#x36;&#x38;&#46;&#x30;&#46;&#x31;&#48;&#49;</a>:&#x2F;var&#x2F;www&#x2F; 把本机&#x2F;var&#x2F;www&#x2F;目录下的 test.php 文件上传到 192.168.0.101 这台服务器上的&#x2F;var&#x2F;www&#x2F;目录中</p><p>2、从服务器下载文件</p><p>下载文件我们经常使用 wget，但是如果没有 http 服务，如何从服务器上下载文件呢？</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp -P 221 username@servername:/path/filename /var/www/local_dir（本地目录）</span><br></pre></td></tr></table></figure><p>例如 scp <a href="mailto:&#x72;&#111;&#111;&#116;&#x40;&#x31;&#57;&#x32;&#x2e;&#49;&#x36;&#x38;&#46;&#48;&#46;&#x31;&#48;&#x31;">&#x72;&#111;&#111;&#116;&#x40;&#x31;&#57;&#x32;&#x2e;&#49;&#x36;&#x38;&#46;&#48;&#46;&#x31;&#48;&#x31;</a>:&#x2F;var&#x2F;www&#x2F;test.txt 把 192.168.0.101 上的&#x2F;var&#x2F;www&#x2F;test.txt 的文件下载到&#x2F;var&#x2F;www&#x2F;local_dir（本地目录）</p><p>3、从服务器下载整个目录</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp -P 221 -r username@servername:/var/www/remote_dir/（远程目录） /var/www/local_dir（本地目录）</span><br></pre></td></tr></table></figure><p>例如:scp -r <a href="mailto:&#114;&#111;&#111;&#x74;&#x40;&#49;&#x39;&#x32;&#x2e;&#49;&#x36;&#x38;&#46;&#x30;&#x2e;&#49;&#x30;&#49;">&#114;&#111;&#111;&#x74;&#x40;&#49;&#x39;&#x32;&#x2e;&#49;&#x36;&#x38;&#46;&#x30;&#x2e;&#49;&#x30;&#49;</a>:&#x2F;var&#x2F;www&#x2F;test &#x2F;var&#x2F;www&#x2F;</p><p>4、上传目录到服务器</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp -P 221 -r local_dir username@servername:remote_dir</span><br></pre></td></tr></table></figure><p>例如：scp -r test <a href="mailto:&#114;&#x6f;&#111;&#x74;&#x40;&#49;&#x39;&#x32;&#46;&#x31;&#54;&#56;&#46;&#48;&#46;&#x31;&#x30;&#x31;">&#114;&#x6f;&#111;&#x74;&#x40;&#49;&#x39;&#x32;&#46;&#x31;&#54;&#56;&#46;&#48;&#46;&#x31;&#x30;&#x31;</a>:&#x2F;var&#x2F;www&#x2F; 把当前目录下的 test 目录上传到服务器的&#x2F;var&#x2F;www&#x2F; 目录</p>]]></content>
      
      
      <categories>
          
          <category> Ops </category>
          
          <category> linux </category>
          
          <category> general </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ops </tag>
            
            <tag> general </tag>
            
            <tag> linux </tag>
            
            <tag> 用windowd的cmd向linux服务器上传文件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查看网址</title>
      <link href="/posts/16547.html"/>
      <url>/posts/16547.html</url>
      
        <content type="html"><![CDATA[<p>示例</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl 127.0.0.1:80 #查看本地的nginx是否启动</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Ops </category>
          
          <category> linux </category>
          
          <category> general </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ops </tag>
            
            <tag> general </tag>
            
            <tag> linux </tag>
            
            <tag> 查看网址 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>端口管理</title>
      <link href="/posts/31179.html"/>
      <url>/posts/31179.html</url>
      
        <content type="html"><![CDATA[<h2 id="开放端口"><a href="#开放端口" class="headerlink" title="开放端口"></a>开放端口</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=5672/tcp --permanent   # 开放5672端口</span><br><span class="line">firewall-cmd --zone=public --remove-port=5672/tcp --permanent  #关闭5672端口</span><br><span class="line">firewall-cmd --reload   # 配置立即生效</span><br></pre></td></tr></table></figure><h2 id="查看防火墙所有开放的端口"><a href="#查看防火墙所有开放的端口" class="headerlink" title="查看防火墙所有开放的端口"></a>查看防火墙所有开放的端口</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --list-ports</span><br></pre></td></tr></table></figure><h2 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h2><p>如果要开放的端口太多，嫌麻烦，可以关闭防火墙，安全性自行评估</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld.service</span><br></pre></td></tr></table></figure><h2 id="查看防火墙状态"><a href="#查看防火墙状态" class="headerlink" title="查看防火墙状态"></a>查看防火墙状态</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --state</span><br></pre></td></tr></table></figure><h2 id="查看和监听端口"><a href="#查看和监听端口" class="headerlink" title="查看和监听端口"></a>查看和监听端口</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netstat -lnpt</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/zhangyuhannerv/picture-host-1/main/20210708231956.png" alt="图片示意图"></p><h2 id="检查端口被哪个进程占用"><a href="#检查端口被哪个进程占用" class="headerlink" title="检查端口被哪个进程占用"></a>检查端口被哪个进程占用</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netstat -lnpt |grep 5672</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/zhangyuhannerv/picture-host-1/main/20210708232118.png" alt="图片示意"></p><p><a href="https://www.cnblogs.com/heqiuyong/p/10460150.htm">原文链</a></p>]]></content>
      
      
      <categories>
          
          <category> Ops </category>
          
          <category> linux </category>
          
          <category> general </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ops </tag>
            
            <tag> general </tag>
            
            <tag> linux </tag>
            
            <tag> 端口管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>磁盘管理</title>
      <link href="/posts/55826.html"/>
      <url>/posts/55826.html</url>
      
        <content type="html"><![CDATA[<h2 id="查看某个文件夹所属的磁盘容量"><a href="#查看某个文件夹所属的磁盘容量" class="headerlink" title="查看某个文件夹所属的磁盘容量"></a>查看某个文件夹所属的磁盘容量</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">df -h 文件路径</span><br></pre></td></tr></table></figure><p>查看磁盘列表</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">df -hl</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Ops </category>
          
          <category> linux </category>
          
          <category> general </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ops </tag>
            
            <tag> general </tag>
            
            <tag> linux </tag>
            
            <tag> 磁盘管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>根据端口号查询占用pid</title>
      <link href="/posts/50070.html"/>
      <url>/posts/50070.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netstat -nap|grep 8080</span><br><span class="line">tcp6       0      0 :::8081                 :::*                    LISTEN      16996/java</span><br><span class="line">kill -9 16996</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Ops </category>
          
          <category> linux </category>
          
          <category> general </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ops </tag>
            
            <tag> general </tag>
            
            <tag> linux </tag>
            
            <tag> 根据端口号查询占用pid </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进程管理</title>
      <link href="/posts/11053.html"/>
      <url>/posts/11053.html</url>
      
        <content type="html"><![CDATA[<h2 id="查看进程的详细信息"><a href="#查看进程的详细信息" class="headerlink" title="查看进程的详细信息"></a>查看进程的详细信息</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps 6832</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/zhangyuhannerv/picture-host-1/main/20210708232827.png" alt="图片示意"></p><h2 id="中止进程"><a href="#中止进程" class="headerlink" title="中止进程"></a>中止进程</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kill -9 6832</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Ops </category>
          
          <category> linux </category>
          
          <category> general </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ops </tag>
            
            <tag> general </tag>
            
            <tag> linux </tag>
            
            <tag> 进程管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下文档类型转PDF乱码解决方式</title>
      <link href="/posts/29596.html"/>
      <url>/posts/29596.html</url>
      
        <content type="html"><![CDATA[<p>在 Linux 系统下进行文本类型转 PDF 时出现乱码。<br><img src="https://raw.githubusercontent.com/zhangyuhannerv/picture-host-1/main/20210708223956.png" alt="问题示意图"></p><p>解决方案：</p><ol><li><p>安装 fontconfig</p><p>安装命令：</p><p>yum –y install fontconfig</p></li><li><p>在&#x2F;usr&#x2F;share&#x2F;fonts 目录下新建一个目录 chinese</p><p>操作命令：</p><p>cd &#x2F;usr&#x2F;share&#x2F;fonts</p><p>mkdir chinese</p><p>cd chinese</p></li><li><p>修改文件夹权限</p><p>操作命令：</p><p>chmod -R 755 &#x2F;usr&#x2F;share&#x2F;fonts&#x2F;chinese&#x2F;</p></li><li><p>将本地字体上传至服务器</p><p>操作步骤：</p><ol><li>将 C:\Windows\Fonts 目录下的字体拷贝到一个新建文件夹（因为文件夹权限无法直接上传，所以需要创建一个新建文件夹）</li><li>将需要的字体上传到服务器的&#x2F;usr&#x2F;share&#x2F;fonts&#x2F;chinese 目录下</li></ol></li><li><p>安装 ttmkfdir</p><p>安装命令：</p><p>yum -y install ttmkfdir</p><p>ttmkfdir -e &#x2F;usr&#x2F;share&#x2F;X11&#x2F;fonts&#x2F;encodings&#x2F;encodings.dir</p></li><li><p>修改 fonts.conf 配置文件</p><p>操作命令：</p><p>vi &#x2F;etc&#x2F;fonts&#x2F;fonts.conf</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Font directory list --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dir</span>&gt;</span>/usr/share/fonts<span class="tag">&lt;/<span class="name">dir</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dir</span>&gt;</span>/usr/share/X11/fonts/Type1<span class="tag">&lt;/<span class="name">dir</span>&gt;</span> <span class="tag">&lt;<span class="name">dir</span>&gt;</span>/usr/share/X11/fonts/TTF<span class="tag">&lt;/<span class="name">dir</span>&gt;</span> <span class="tag">&lt;<span class="name">dir</span>&gt;</span>/usr/local/share/fonts<span class="tag">&lt;/<span class="name">dir</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dir</span> <span class="attr">prefix</span>=<span class="string">&quot;xdg&quot;</span>&gt;</span>fonts<span class="tag">&lt;/<span class="name">dir</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dir</span>&gt;</span>/usr/share/fonts/chinese<span class="tag">&lt;/<span class="name">dir</span>&gt;</span> #这里是你要添加的路径</span><br><span class="line"><span class="comment">&lt;!-- the following element will be removed in the future --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dir</span>&gt;</span>~/.fonts<span class="tag">&lt;/<span class="name">dir</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>刷新 Liunx 字体缓存</p><p>操作命令：</p><p>mkfontdir</p><p>mkfontscale</p><p>fc-cache –fv</p><p>fc-list :lang&#x3D;ZH</p></li><li><p>重启服务器(完成配置)（注意：第 7 步完成之后如果生效了。那么就不用之行第 8 步了）</p></li></ol><p><a href="https://blog.csdn.net/weixin_45606229/article/details/111060060">原文链接</a></p>]]></content>
      
      
      <categories>
          
          <category> Ops </category>
          
          <category> linux </category>
          
          <category> centos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ops </tag>
            
            <tag> linux </tag>
            
            <tag> centos </tag>
            
            <tag> Linux下文档类型转PDF乱码解决方式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置openOffice</title>
      <link href="/posts/62612.html"/>
      <url>/posts/62612.html</url>
      
        <content type="html"><![CDATA[<ol><li><p>下载 tar.gz 包。下载地址：<a href="http://www.openoffice.org/zh-cn/">http://www.openoffice.org/zh-cn/</a> (需要下载 rpm 格式的)</p></li><li><p>通过 xftp 上传到 linux 中。我的目录在&#x2F;opt&#x2F;openoffice 中</p></li><li><p>解压文件：tar -zxvf Apache_OpenOffice_4.1.6_Linux_x86-64_install-rpm_zh-CN.tar.gz，解压后进入 zh-CN 目录中。</p></li><li><p>cd RPMS&#x2F; 里面都是 rpm 文件，我们需要安装这些文件</p></li><li><p>安装 rpm 文件： rpm -ivh *.rpm</p></li><li><p>进入 desktop-integration&#x2F;目录：cd desktop-integration&#x2F;</p></li><li><p>安装 openoffice:rpm -ivh openoffice4.1.6-redhat-menus-4.1.6-9790.noarch.rpm</p></li><li><p>安装成功后会在&#x2F;opt 下出现一个 openoffice4 文件。</p></li><li><p>启动服务</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/opt/openoffice4/program/soffice -headless -accept=&quot;socket,host=127.0.0.1,port=8100;urp;&quot; -nofirststartwizard</span><br></pre></td></tr></table></figure></li><li><p>查看启动状态</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps -ef|grep openofficenetstat -lnp |grep 8100</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Ops </category>
          
          <category> linux </category>
          
          <category> centos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ops </tag>
            
            <tag> linux </tag>
            
            <tag> centos </tag>
            
            <tag> 配置openOffice </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决centos8下python命令失效的问题</title>
      <link href="/posts/14182.html"/>
      <url>/posts/14182.html</url>
      
        <content type="html"><![CDATA[<p>执行</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ln -s /usr/bin/python3.6 /usr/bin/python</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/have_a_cat/article/details/118191281">参考地址</a></p>]]></content>
      
      
      <categories>
          
          <category> Ops </category>
          
          <category> linux </category>
          
          <category> centos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ops </tag>
            
            <tag> linux </tag>
            
            <tag> centos </tag>
            
            <tag> 解决centos8下python命令失效的问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中国大陆镜像源</title>
      <link href="/posts/28789.html"/>
      <url>/posts/28789.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http://mirrors.aliyun.com/ubuntu</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Ops </category>
          
          <category> linux </category>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ops </tag>
            
            <tag> linux </tag>
            
            <tag> ubuntu </tag>
            
            <tag> 中国大陆镜像源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rabbitmq-server管理</title>
      <link href="/posts/58254.html"/>
      <url>/posts/58254.html</url>
      
        <content type="html"><![CDATA[<p>前提：通信端口默认是 5672 端口，如果远程连接，别忘记先在防火墙上开启该端口</p><p>查看运行状态</p><h1 id="service-rabbitmq-server-status"><a href="#service-rabbitmq-server-status" class="headerlink" title="service rabbitmq-server status"></a>service rabbitmq-server status</h1><p>启动</p><p><code>service rabbitmq-server stop</code></p><p>停止</p><p><code>service rabbitmq-server start</code></p><p>重启 rabbitmq 服务</p><p><code>service rabbitmq-server restart</code></p><p>查看 log 文件</p><p><code>cd /var/log/rabbitmq/</code></p><p><code>vim ***.log</code></p><p>查看已有插件列表</p><p><code>rabbitmq-plugins list</code></p><p>安装插件<br>(这里以安装 web 管理客户端为例子，该客户端的端口是 15672.别忘记在防火墙开启端口)<br><code>rabbitmq-plugins enable rabbitmq_management</code></p><p>编写配置文件（这里以开放外部访问为例子）<br><code>cd /etc/rabbitmq/ </code><br><code>vim rabbitmq.config</code></p><p>向 rabbitmq.config 文件中写入如下内容：<br>[{rabbit, [{loopback_users, []}]}].</p>]]></content>
      
      
      <categories>
          
          <category> Ops </category>
          
          <category> linux </category>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ops </tag>
            
            <tag> linux </tag>
            
            <tag> ubuntu </tag>
            
            <tag> rabbitmq-server管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>切换为root账号</title>
      <link href="/posts/3339.html"/>
      <url>/posts/3339.html</url>
      
        <content type="html"><![CDATA[<ul><li>Ubuntu 的默认 root 密码是随机的，即每次开机都有一个新的 root 密码。可以在终端输入命令 sudo passwd，然后输入当前用户的密码，回车.</li><li>终端会提示输入新的密码并确认，此时的密码就是 root 新密码。修改成功后，输入命令 su root，再输入新的密码就成功切换到 root 帐号了</li></ul>]]></content>
      
      
      <categories>
          
          <category> Ops </category>
          
          <category> linux </category>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ops </tag>
            
            <tag> linux </tag>
            
            <tag> ubuntu </tag>
            
            <tag> 切换为root账号 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>传输文件显示permission denied</title>
      <link href="/posts/28736.html"/>
      <url>/posts/28736.html</url>
      
        <content type="html"><![CDATA[<p>scp 默认不允许使用 root 账号传输文件.如果想用 root 账号传输文件，在两端服务器</p><p>0、使用第二步切换为 root 账号</p><p>1、修改 sshd 配置文件</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><p>2、找到 PermitRootLogin，把前面的#去掉，并且改为 yes</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PermitRootLogin <span class="built_in">yes</span></span><br></pre></td></tr></table></figure><p>3、重启 sshd 服务</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service ssh start</span><br></pre></td></tr></table></figure><p>4、使用 root 账户远程登陆服务器并传输文件即可。注意 root 密码是在第二步自己设置的</p>]]></content>
      
      
      <categories>
          
          <category> Ops </category>
          
          <category> linux </category>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ops </tag>
            
            <tag> linux </tag>
            
            <tag> ubuntu </tag>
            
            <tag> 传输文件显示permission denied </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装nginx</title>
      <link href="/posts/31907.html"/>
      <url>/posts/31907.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换至root用户</span></span><br><span class="line">sudo su root</span><br><span class="line">apt-get install nginx</span><br></pre></td></tr></table></figure><p>查看 nginx 是否安装成功</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nginx -v</span><br></pre></td></tr></table></figure><p>启动 nginx</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service nginx start #方式1</span><br><span class="line">/usr/sbin/nginx #方式2</span><br></pre></td></tr></table></figure><p>结束 nginx</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service nginx stop #方式1</span><br><span class="line">/usr/sbin/nginx -s stop #方式2</span><br></pre></td></tr></table></figure><p>重启 nginx</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service nginx reload #方式1</span><br><span class="line">/usr/sbin/nginx -s reload #方式2</span><br></pre></td></tr></table></figure><p><strong>注意：nginx 方式 1 和方式 2 不能互相调用</strong></p><p>nginx 文件安装完成之后的文件位置：</p><ul><li>&#x2F;usr&#x2F;sbin&#x2F;nginx：主程序</li><li>&#x2F;etc&#x2F;nginx：存放配置文件</li><li>&#x2F;usr&#x2F;share&#x2F;nginx：存放静态文件</li><li>&#x2F;var&#x2F;log&#x2F;nginx：存放日志</li></ul>]]></content>
      
      
      <categories>
          
          <category> Ops </category>
          
          <category> linux </category>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ops </tag>
            
            <tag> linux </tag>
            
            <tag> ubuntu </tag>
            
            <tag> 安装nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>没有firewall-cmd命令</title>
      <link href="/posts/40422.html"/>
      <url>/posts/40422.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get install firewalld</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Ops </category>
          
          <category> linux </category>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ops </tag>
            
            <tag> linux </tag>
            
            <tag> ubuntu </tag>
            
            <tag> 没有firewall-cmd命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设置静态ip</title>
      <link href="/posts/47994.html"/>
      <url>/posts/47994.html</url>
      
        <content type="html"><![CDATA[<h2 id="ubuntu-server18"><a href="#ubuntu-server18" class="headerlink" title="ubuntu_server18"></a>ubuntu_server18</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/netplan/50-cloud-init.yaml</span><br></pre></td></tr></table></figure><p>配置如下,注意格式 冒号后边有个空格</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">network:</span></span><br><span class="line">  <span class="attr">ethernets:</span></span><br><span class="line">    <span class="attr">ens33:</span></span><br><span class="line">      <span class="attr">dhcp4:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">addresses:</span> [<span class="number">192.168</span><span class="number">.37</span><span class="number">.188</span><span class="string">/24</span>]</span><br><span class="line">      <span class="attr">gateway4:</span> <span class="number">192.168</span><span class="number">.37</span><span class="number">.2</span></span><br><span class="line">      <span class="attr">nameservers:</span></span><br><span class="line">        <span class="attr">addresses:</span> [<span class="number">114.114</span><span class="number">.114</span><span class="number">.114</span>, <span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span>]</span><br><span class="line">  <span class="attr">version:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><p>编辑好 最后保存配置文件，执行命令重启网络服务生效</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo netplan applys</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Ops </category>
          
          <category> linux </category>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ops </tag>
            
            <tag> linux </tag>
            
            <tag> ubuntu </tag>
            
            <tag> 设置静态ip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hello world</title>
      <link href="/posts/14785.html"/>
      <url>/posts/14785.html</url>
      
        <content type="html"><![CDATA[<p>值此博客建站成功之际，难以抑制内心的激动心情<br>只好写一行 hello world 了 😄😄😄</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p>写完了 hello world，然后就是测试主题 butterfly 的各种功能</p><h1 id="测试-toc-功能"><a href="#测试-toc-功能" class="headerlink" title="测试 toc 功能"></a>测试 toc 功能</h1><h2 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h2><p>111</p><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><p>222</p><h2 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h2><p>333</p><hr><p>还要整合的模块</p><ul><li><input disabled="" type="checkbox"> 评论系统</li><li><input disabled="" type="checkbox"> 搜索系统</li><li><input disabled="" type="checkbox"> 网站验证</li><li><input disabled="" type="checkbox"> 广告</li></ul>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
